
PedalleR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e8c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004f9c  08004f9c  00014f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005040  08005040  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08005040  08005040  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005040  08005040  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005040  08005040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005044  08005044  00015044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08005048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c4  20000168  080051ac  00020168  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a2c  080051ac  00020a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116ec  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000381c  00000000  00000000  00031879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000acae  00000000  00000000  00035095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  0003fd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ae8  00000000  00000000  00040760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d12  00000000  00000000  00042248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000138fc  00000000  00000000  0005bf5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087b35  00000000  00000000  0006f856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f738b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bf0  00000000  00000000  000f73dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000168 	.word	0x20000168
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f84 	.word	0x08004f84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000016c 	.word	0x2000016c
 800014c:	08004f84 	.word	0x08004f84

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8c:	2300      	movs	r3, #0
{
 8000a8e:	b5d0      	push	{r4, r6, r7, lr}
 8000a90:	b094      	sub	sp, #80	; 0x50
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a92:	2601      	movs	r6, #1
 8000a94:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a98:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9a:	2102      	movs	r1, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa0:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000aa8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aac:	e9cd 3301 	strd	r3, r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab0:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab2:	9304      	str	r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab4:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab8:	9303      	str	r3, [sp, #12]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000aba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abe:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac4:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac6:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac8:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000aca:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f002 f866 	bl	8002b9c <HAL_RCC_OscConfig>
 8000ad0:	b108      	cbz	r0, 8000ad6 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad6:	220f      	movs	r2, #15
 8000ad8:	2302      	movs	r3, #2
 8000ada:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae4:	9008      	str	r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ae6:	4621      	mov	r1, r4
 8000ae8:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aea:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aee:	f002 fa45 	bl	8002f7c <HAL_RCC_ClockConfig>
 8000af2:	b108      	cbz	r0, 8000af8 <SystemClock_Config+0x6c>
 8000af4:	b672      	cpsid	i
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000af8:	2112      	movs	r1, #18
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000afa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b02:	4668      	mov	r0, sp
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000b04:	e9cd 2302 	strd	r2, r3, [sp, #8]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000b08:	9100      	str	r1, [sp, #0]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0a:	f002 fb09 	bl	8003120 <HAL_RCCEx_PeriphCLKConfig>
 8000b0e:	b108      	cbz	r0, 8000b14 <SystemClock_Config+0x88>
 8000b10:	b672      	cpsid	i
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <SystemClock_Config+0x86>
}
 8000b14:	b014      	add	sp, #80	; 0x50
 8000b16:	bdd0      	pop	{r4, r6, r7, pc}

08000b18 <main>:
{
 8000b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1c:	4c2e      	ldr	r4, [pc, #184]	; (8000bd8 <main+0xc0>)
{
 8000b1e:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000b20:	f000 fad8 	bl	80010d4 <HAL_Init>
  SystemClock_Config();
 8000b24:	f7ff ffb2 	bl	8000a8c <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b28:	69a3      	ldr	r3, [r4, #24]
  hadc1.Instance = ADC1;
 8000b2a:	4e2c      	ldr	r6, [pc, #176]	; (8000bdc <main+0xc4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2c:	f043 0320 	orr.w	r3, r3, #32
 8000b30:	61a3      	str	r3, [r4, #24]
 8000b32:	69a3      	ldr	r3, [r4, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b34:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	f003 0320 	and.w	r3, r3, #32
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	69a3      	ldr	r3, [r4, #24]
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	61a3      	str	r3, [r4, #24]
 8000b46:	69a3      	ldr	r3, [r4, #24]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	9302      	str	r3, [sp, #8]
 8000b4e:	9b02      	ldr	r3, [sp, #8]
  MX_USB_DEVICE_Init();
 8000b50:	f003 ffb2 	bl	8004ab8 <MX_USB_DEVICE_Init>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b56:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b58:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6163      	str	r3, [r4, #20]
 8000b60:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b62:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	9303      	str	r3, [sp, #12]
 8000b6a:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b6c:	f000 fe0c 	bl	8001788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b70:	200b      	movs	r0, #11
 8000b72:	f000 fe47 	bl	8001804 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8000b76:	4a1a      	ldr	r2, [pc, #104]	; (8000be0 <main+0xc8>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b78:	2300      	movs	r3, #0
  hadc1.Instance = ADC1;
 8000b7a:	6032      	str	r2, [r6, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b80:	4630      	mov	r0, r6
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b82:	e9cd 3304 	strd	r3, r3, [sp, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b86:	7335      	strb	r5, [r6, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b88:	6135      	str	r5, [r6, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b8a:	9306      	str	r3, [sp, #24]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b8c:	60b3      	str	r3, [r6, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b8e:	7533      	strb	r3, [r6, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b90:	61f2      	str	r2, [r6, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b92:	6073      	str	r3, [r6, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b94:	f000 fad4 	bl	8001140 <HAL_ADC_Init>
 8000b98:	b108      	cbz	r0, 8000b9e <main+0x86>
 8000b9a:	b672      	cpsid	i
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <main+0x84>
  sConfig.Channel = ADC_CHANNEL_0;
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ba2:	9006      	str	r0, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba4:	a904      	add	r1, sp, #16
 8000ba6:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_0;
 8000ba8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bac:	f000 fc96 	bl	80014dc <HAL_ADC_ConfigChannel>
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	f040 8156 	bne.w	8000e62 <main+0x34a>
	uint32_t channel;
	double oldValue;
} Potentiometer;

void PotentiometerInit(Potentiometer* potentiometer) {
	potentiometer->oldValue = -1;
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	; (8000be4 <main+0xcc>)
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <main+0xd0>)
	const uint8_t deltaThreshold = 20;
	const double newValueFactor = 0.05;

	const double newValue = PotentiometerRead(potentiometer);

	if (potentiometer->oldValue < 0) {
 8000bbc:	f04f 0a00 	mov.w	sl, #0
 8000bc0:	f04f 0b00 	mov.w	fp, #0
	potentiometer->oldValue = -1;
 8000bc4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8000bc8:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8000bcc:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
	  potentiometers[i].adc = &hadc1;
 8000bd0:	6026      	str	r6, [r4, #0]
 8000bd2:	6126      	str	r6, [r4, #16]
 8000bd4:	6226      	str	r6, [r4, #32]
 8000bd6:	e104      	b.n	8000de2 <main+0x2ca>
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	20000184 	.word	0x20000184
 8000be0:	40012400 	.word	0x40012400
 8000be4:	200001f8 	.word	0x200001f8
 8000be8:	bff00000 	.word	0xbff00000
		potentiometer->oldValue = newValue;
	}
	else {
		if (abs(newValue - potentiometer->oldValue) > deltaThreshold)
 8000bec:	4632      	mov	r2, r6
 8000bee:	463b      	mov	r3, r7
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	4649      	mov	r1, r9
 8000bf4:	f7ff fab0 	bl	8000158 <__aeabi_dsub>
 8000bf8:	f7ff ff00 	bl	80009fc <__aeabi_d2iz>
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	bfb8      	it	lt
 8000c00:	4240      	neglt	r0, r0
 8000c02:	2814      	cmp	r0, #20
 8000c04:	dd1b      	ble.n	8000c3e <main+0x126>
			potentiometer->oldValue = newValue * newValueFactor + potentiometer->oldValue * (1 - newValueFactor);
 8000c06:	a3be      	add	r3, pc, #760	; (adr r3, 8000f00 <main+0x3e8>)
 8000c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0c:	4640      	mov	r0, r8
 8000c0e:	4649      	mov	r1, r9
 8000c10:	f7ff fc5a 	bl	80004c8 <__aeabi_dmul>
 8000c14:	4602      	mov	r2, r0
 8000c16:	460b      	mov	r3, r1
 8000c18:	4630      	mov	r0, r6
 8000c1a:	4639      	mov	r1, r7
 8000c1c:	4616      	mov	r6, r2
 8000c1e:	461f      	mov	r7, r3
 8000c20:	a3b9      	add	r3, pc, #740	; (adr r3, 8000f08 <main+0x3f0>)
 8000c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c26:	f7ff fc4f 	bl	80004c8 <__aeabi_dmul>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	4630      	mov	r0, r6
 8000c30:	4639      	mov	r1, r7
 8000c32:	f7ff fa93 	bl	800015c <__adddf3>
 8000c36:	4606      	mov	r6, r0
 8000c38:	460f      	mov	r7, r1
 8000c3a:	e9c4 6702 	strd	r6, r7, [r4, #8]
	}

	// Clamping
	if (potentiometer->oldValue < min)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	4630      	mov	r0, r6
 8000c44:	4639      	mov	r1, r7
 8000c46:	f7ff feb1 	bl	80009ac <__aeabi_dcmplt>
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	f000 8154 	beq.w	8000ef8 <main+0x3e0>
		potentiometer->oldValue = min;
 8000c50:	2000      	movs	r0, #0
 8000c52:	e9c4 ab02 	strd	sl, fp, [r4, #8]
	  reportDescriptor.x = PotentiometerReadSmooth(&potentiometers[0], 0, 4096);
 8000c56:	4bae      	ldr	r3, [pc, #696]	; (8000f10 <main+0x3f8>)
	HAL_ADC_ConfigChannel(potentiometer->adc, &channelConfig);
 8000c58:	a904      	add	r1, sp, #16
 8000c5a:	8018      	strh	r0, [r3, #0]
	ADC_ChannelConfTypeDef channelConfig = {
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	9306      	str	r3, [sp, #24]
 8000c60:	6963      	ldr	r3, [r4, #20]
	HAL_ADC_ConfigChannel(potentiometer->adc, &channelConfig);
 8000c62:	6920      	ldr	r0, [r4, #16]
	ADC_ChannelConfTypeDef channelConfig = {
 8000c64:	9304      	str	r3, [sp, #16]
 8000c66:	9505      	str	r5, [sp, #20]
	HAL_ADC_ConfigChannel(potentiometer->adc, &channelConfig);
 8000c68:	f000 fc38 	bl	80014dc <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(potentiometer->adc);
 8000c6c:	6920      	ldr	r0, [r4, #16]
 8000c6e:	f000 fd13 	bl	8001698 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(potentiometer->adc, HAL_MAX_DELAY);
 8000c72:	f04f 31ff 	mov.w	r1, #4294967295
 8000c76:	6920      	ldr	r0, [r4, #16]
 8000c78:	f000 fb5e 	bl	8001338 <HAL_ADC_PollForConversion>
	uint32_t value = HAL_ADC_GetValue(potentiometer->adc);
 8000c7c:	6920      	ldr	r0, [r4, #16]
 8000c7e:	f000 fc29 	bl	80014d4 <HAL_ADC_GetValue>
 8000c82:	4606      	mov	r6, r0
	HAL_ADC_Stop(potentiometer->adc);
 8000c84:	6920      	ldr	r0, [r4, #16]
 8000c86:	f000 fb19 	bl	80012bc <HAL_ADC_Stop>
	const double newValue = PotentiometerRead(potentiometer);
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	f7ff fba2 	bl	80003d4 <__aeabi_ui2d>
	if (potentiometer->oldValue < 0) {
 8000c90:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
	const double newValue = PotentiometerRead(potentiometer);
 8000c94:	4680      	mov	r8, r0
 8000c96:	4689      	mov	r9, r1
	if (potentiometer->oldValue < 0) {
 8000c98:	4652      	mov	r2, sl
 8000c9a:	465b      	mov	r3, fp
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	4639      	mov	r1, r7
 8000ca0:	f7ff fe84 	bl	80009ac <__aeabi_dcmplt>
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	f040 80f5 	bne.w	8000e94 <main+0x37c>
		if (abs(newValue - potentiometer->oldValue) > deltaThreshold)
 8000caa:	4632      	mov	r2, r6
 8000cac:	463b      	mov	r3, r7
 8000cae:	4640      	mov	r0, r8
 8000cb0:	4649      	mov	r1, r9
 8000cb2:	f7ff fa51 	bl	8000158 <__aeabi_dsub>
 8000cb6:	f7ff fea1 	bl	80009fc <__aeabi_d2iz>
 8000cba:	2800      	cmp	r0, #0
 8000cbc:	bfb8      	it	lt
 8000cbe:	4240      	neglt	r0, r0
 8000cc0:	2814      	cmp	r0, #20
 8000cc2:	dd1b      	ble.n	8000cfc <main+0x1e4>
			potentiometer->oldValue = newValue * newValueFactor + potentiometer->oldValue * (1 - newValueFactor);
 8000cc4:	a38e      	add	r3, pc, #568	; (adr r3, 8000f00 <main+0x3e8>)
 8000cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cca:	4640      	mov	r0, r8
 8000ccc:	4649      	mov	r1, r9
 8000cce:	f7ff fbfb 	bl	80004c8 <__aeabi_dmul>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	4639      	mov	r1, r7
 8000cda:	4616      	mov	r6, r2
 8000cdc:	461f      	mov	r7, r3
 8000cde:	a38a      	add	r3, pc, #552	; (adr r3, 8000f08 <main+0x3f0>)
 8000ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce4:	f7ff fbf0 	bl	80004c8 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fa34 	bl	800015c <__adddf3>
 8000cf4:	4606      	mov	r6, r0
 8000cf6:	460f      	mov	r7, r1
 8000cf8:	e9c4 6706 	strd	r6, r7, [r4, #24]
	if (potentiometer->oldValue < min)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2300      	movs	r3, #0
 8000d00:	4630      	mov	r0, r6
 8000d02:	4639      	mov	r1, r7
 8000d04:	f7ff fe52 	bl	80009ac <__aeabi_dcmplt>
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	f000 80f2 	beq.w	8000ef2 <main+0x3da>
		potentiometer->oldValue = min;
 8000d0e:	2000      	movs	r0, #0
 8000d10:	e9c4 ab06 	strd	sl, fp, [r4, #24]
	  reportDescriptor.y = PotentiometerReadSmooth(&potentiometers[1], 0, 4096);
 8000d14:	4b7e      	ldr	r3, [pc, #504]	; (8000f10 <main+0x3f8>)
	HAL_ADC_ConfigChannel(potentiometer->adc, &channelConfig);
 8000d16:	a904      	add	r1, sp, #16
 8000d18:	8058      	strh	r0, [r3, #2]
	ADC_ChannelConfTypeDef channelConfig = {
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	9306      	str	r3, [sp, #24]
 8000d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
	HAL_ADC_ConfigChannel(potentiometer->adc, &channelConfig);
 8000d20:	6a20      	ldr	r0, [r4, #32]
	ADC_ChannelConfTypeDef channelConfig = {
 8000d22:	9304      	str	r3, [sp, #16]
 8000d24:	9505      	str	r5, [sp, #20]
	HAL_ADC_ConfigChannel(potentiometer->adc, &channelConfig);
 8000d26:	f000 fbd9 	bl	80014dc <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(potentiometer->adc);
 8000d2a:	6a20      	ldr	r0, [r4, #32]
 8000d2c:	f000 fcb4 	bl	8001698 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(potentiometer->adc, HAL_MAX_DELAY);
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	6a20      	ldr	r0, [r4, #32]
 8000d36:	f000 faff 	bl	8001338 <HAL_ADC_PollForConversion>
	uint32_t value = HAL_ADC_GetValue(potentiometer->adc);
 8000d3a:	6a20      	ldr	r0, [r4, #32]
 8000d3c:	f000 fbca 	bl	80014d4 <HAL_ADC_GetValue>
 8000d40:	4606      	mov	r6, r0
	HAL_ADC_Stop(potentiometer->adc);
 8000d42:	6a20      	ldr	r0, [r4, #32]
 8000d44:	f000 faba 	bl	80012bc <HAL_ADC_Stop>
	const double newValue = PotentiometerRead(potentiometer);
 8000d48:	4630      	mov	r0, r6
 8000d4a:	f7ff fb43 	bl	80003d4 <__aeabi_ui2d>
	if (potentiometer->oldValue < 0) {
 8000d4e:	e9d4 670a 	ldrd	r6, r7, [r4, #40]	; 0x28
	const double newValue = PotentiometerRead(potentiometer);
 8000d52:	4680      	mov	r8, r0
 8000d54:	4689      	mov	r9, r1
	if (potentiometer->oldValue < 0) {
 8000d56:	4652      	mov	r2, sl
 8000d58:	465b      	mov	r3, fp
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	4639      	mov	r1, r7
 8000d5e:	f7ff fe25 	bl	80009ac <__aeabi_dcmplt>
 8000d62:	2800      	cmp	r0, #0
 8000d64:	d17f      	bne.n	8000e66 <main+0x34e>
		if (abs(newValue - potentiometer->oldValue) > deltaThreshold)
 8000d66:	4632      	mov	r2, r6
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4640      	mov	r0, r8
 8000d6c:	4649      	mov	r1, r9
 8000d6e:	f7ff f9f3 	bl	8000158 <__aeabi_dsub>
 8000d72:	f7ff fe43 	bl	80009fc <__aeabi_d2iz>
 8000d76:	2800      	cmp	r0, #0
 8000d78:	bfb8      	it	lt
 8000d7a:	4240      	neglt	r0, r0
 8000d7c:	2814      	cmp	r0, #20
 8000d7e:	dd1b      	ble.n	8000db8 <main+0x2a0>
			potentiometer->oldValue = newValue * newValueFactor + potentiometer->oldValue * (1 - newValueFactor);
 8000d80:	a35f      	add	r3, pc, #380	; (adr r3, 8000f00 <main+0x3e8>)
 8000d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d86:	4640      	mov	r0, r8
 8000d88:	4649      	mov	r1, r9
 8000d8a:	f7ff fb9d 	bl	80004c8 <__aeabi_dmul>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	4630      	mov	r0, r6
 8000d94:	4639      	mov	r1, r7
 8000d96:	4616      	mov	r6, r2
 8000d98:	461f      	mov	r7, r3
 8000d9a:	a35b      	add	r3, pc, #364	; (adr r3, 8000f08 <main+0x3f0>)
 8000d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da0:	f7ff fb92 	bl	80004c8 <__aeabi_dmul>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	4630      	mov	r0, r6
 8000daa:	4639      	mov	r1, r7
 8000dac:	f7ff f9d6 	bl	800015c <__adddf3>
 8000db0:	4606      	mov	r6, r0
 8000db2:	460f      	mov	r7, r1
 8000db4:	e9c4 670a 	strd	r6, r7, [r4, #40]	; 0x28
	if (potentiometer->oldValue < min)
 8000db8:	2200      	movs	r2, #0
 8000dba:	2300      	movs	r3, #0
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fdf4 	bl	80009ac <__aeabi_dcmplt>
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	f000 8091 	beq.w	8000eec <main+0x3d4>
		potentiometer->oldValue = min;
 8000dca:	2000      	movs	r0, #0
 8000dcc:	e9c4 ab0a 	strd	sl, fp, [r4, #40]	; 0x28
	  reportDescriptor.z = PotentiometerReadSmooth(&potentiometers[2], 0, 4096);
 8000dd0:	4b4f      	ldr	r3, [pc, #316]	; (8000f10 <main+0x3f8>)
	  SendGovnoReport((uint8_t*) &reportDescriptor, sizeof(ReportDescriptor));
 8000dd2:	2106      	movs	r1, #6
	  reportDescriptor.z = PotentiometerReadSmooth(&potentiometers[2], 0, 4096);
 8000dd4:	8098      	strh	r0, [r3, #4]
	  SendGovnoReport((uint8_t*) &reportDescriptor, sizeof(ReportDescriptor));
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 fe66 	bl	8004aa8 <SendGovnoReport>
	  HAL_Delay(16);
 8000ddc:	2010      	movs	r0, #16
 8000dde:	f000 f99d 	bl	800111c <HAL_Delay>
	ADC_ChannelConfTypeDef channelConfig = {
 8000de2:	2303      	movs	r3, #3
 8000de4:	9306      	str	r3, [sp, #24]
 8000de6:	6863      	ldr	r3, [r4, #4]
	HAL_ADC_ConfigChannel(potentiometer->adc, &channelConfig);
 8000de8:	a904      	add	r1, sp, #16
 8000dea:	6820      	ldr	r0, [r4, #0]
	ADC_ChannelConfTypeDef channelConfig = {
 8000dec:	9304      	str	r3, [sp, #16]
 8000dee:	9505      	str	r5, [sp, #20]
	HAL_ADC_ConfigChannel(potentiometer->adc, &channelConfig);
 8000df0:	f000 fb74 	bl	80014dc <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(potentiometer->adc);
 8000df4:	6820      	ldr	r0, [r4, #0]
 8000df6:	f000 fc4f 	bl	8001698 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(potentiometer->adc, HAL_MAX_DELAY);
 8000dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfe:	6820      	ldr	r0, [r4, #0]
 8000e00:	f000 fa9a 	bl	8001338 <HAL_ADC_PollForConversion>
	uint32_t value = HAL_ADC_GetValue(potentiometer->adc);
 8000e04:	6820      	ldr	r0, [r4, #0]
 8000e06:	f000 fb65 	bl	80014d4 <HAL_ADC_GetValue>
 8000e0a:	4606      	mov	r6, r0
	HAL_ADC_Stop(potentiometer->adc);
 8000e0c:	6820      	ldr	r0, [r4, #0]
 8000e0e:	f000 fa55 	bl	80012bc <HAL_ADC_Stop>
	const double newValue = PotentiometerRead(potentiometer);
 8000e12:	4630      	mov	r0, r6
 8000e14:	f7ff fade 	bl	80003d4 <__aeabi_ui2d>
	if (potentiometer->oldValue < 0) {
 8000e18:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
	const double newValue = PotentiometerRead(potentiometer);
 8000e1c:	4680      	mov	r8, r0
 8000e1e:	4689      	mov	r9, r1
	if (potentiometer->oldValue < 0) {
 8000e20:	4652      	mov	r2, sl
 8000e22:	465b      	mov	r3, fp
 8000e24:	4630      	mov	r0, r6
 8000e26:	4639      	mov	r1, r7
 8000e28:	f7ff fdc0 	bl	80009ac <__aeabi_dcmplt>
 8000e2c:	2800      	cmp	r0, #0
 8000e2e:	f43f aedd 	beq.w	8000bec <main+0xd4>
		potentiometer->oldValue = newValue;
 8000e32:	e9c4 8902 	strd	r8, r9, [r4, #8]
	else if (potentiometer->oldValue > max)
 8000e36:	2200      	movs	r2, #0
 8000e38:	4640      	mov	r0, r8
 8000e3a:	4649      	mov	r1, r9
 8000e3c:	4b35      	ldr	r3, [pc, #212]	; (8000f14 <main+0x3fc>)
 8000e3e:	f7ff fdd3 	bl	80009e8 <__aeabi_dcmpgt>
 8000e42:	2800      	cmp	r0, #0
 8000e44:	d13d      	bne.n	8000ec2 <main+0x3aa>
		potentiometer->oldValue = max;

	double ratio = (double) (potentiometer->oldValue - min) / (double) (max - min);
 8000e46:	2200      	movs	r2, #0
 8000e48:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <main+0x400>)
 8000e4a:	4640      	mov	r0, r8
 8000e4c:	4649      	mov	r1, r9
 8000e4e:	f7ff fb3b 	bl	80004c8 <__aeabi_dmul>

	return (uint32_t) (ratio * 4096.0f);
 8000e52:	2200      	movs	r2, #0
 8000e54:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <main+0x3fc>)
 8000e56:	f7ff fb37 	bl	80004c8 <__aeabi_dmul>
 8000e5a:	f7ff fdf7 	bl	8000a4c <__aeabi_d2uiz>
	  reportDescriptor.x = PotentiometerReadSmooth(&potentiometers[0], 0, 4096);
 8000e5e:	b280      	uxth	r0, r0
 8000e60:	e6f9      	b.n	8000c56 <main+0x13e>
 8000e62:	b672      	cpsid	i
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <main+0x34c>
		potentiometer->oldValue = newValue;
 8000e66:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
	else if (potentiometer->oldValue > max)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	4649      	mov	r1, r9
 8000e70:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <main+0x3fc>)
 8000e72:	f7ff fdb9 	bl	80009e8 <__aeabi_dcmpgt>
 8000e76:	bb58      	cbnz	r0, 8000ed0 <main+0x3b8>
	double ratio = (double) (potentiometer->oldValue - min) / (double) (max - min);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <main+0x400>)
 8000e7c:	4640      	mov	r0, r8
 8000e7e:	4649      	mov	r1, r9
 8000e80:	f7ff fb22 	bl	80004c8 <__aeabi_dmul>
	return (uint32_t) (ratio * 4096.0f);
 8000e84:	2200      	movs	r2, #0
 8000e86:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <main+0x3fc>)
 8000e88:	f7ff fb1e 	bl	80004c8 <__aeabi_dmul>
 8000e8c:	f7ff fdde 	bl	8000a4c <__aeabi_d2uiz>
	  reportDescriptor.z = PotentiometerReadSmooth(&potentiometers[2], 0, 4096);
 8000e90:	b280      	uxth	r0, r0
 8000e92:	e79d      	b.n	8000dd0 <main+0x2b8>
		potentiometer->oldValue = newValue;
 8000e94:	e9c4 8906 	strd	r8, r9, [r4, #24]
	else if (potentiometer->oldValue > max)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4640      	mov	r0, r8
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <main+0x3fc>)
 8000ea0:	f7ff fda2 	bl	80009e8 <__aeabi_dcmpgt>
 8000ea4:	b9d8      	cbnz	r0, 8000ede <main+0x3c6>
	double ratio = (double) (potentiometer->oldValue - min) / (double) (max - min);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <main+0x400>)
 8000eaa:	4640      	mov	r0, r8
 8000eac:	4649      	mov	r1, r9
 8000eae:	f7ff fb0b 	bl	80004c8 <__aeabi_dmul>
	return (uint32_t) (ratio * 4096.0f);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <main+0x3fc>)
 8000eb6:	f7ff fb07 	bl	80004c8 <__aeabi_dmul>
 8000eba:	f7ff fdc7 	bl	8000a4c <__aeabi_d2uiz>
	  reportDescriptor.y = PotentiometerReadSmooth(&potentiometers[1], 0, 4096);
 8000ebe:	b280      	uxth	r0, r0
 8000ec0:	e728      	b.n	8000d14 <main+0x1fc>
		potentiometer->oldValue = max;
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <main+0x3fc>)
 8000ec6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000eca:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8000ece:	e6c2      	b.n	8000c56 <main+0x13e>
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <main+0x3fc>)
 8000ed4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ed8:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 8000edc:	e778      	b.n	8000dd0 <main+0x2b8>
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <main+0x3fc>)
 8000ee2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ee6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8000eea:	e713      	b.n	8000d14 <main+0x1fc>
	if (potentiometer->oldValue < min)
 8000eec:	46b0      	mov	r8, r6
 8000eee:	46b9      	mov	r9, r7
 8000ef0:	e7bb      	b.n	8000e6a <main+0x352>
 8000ef2:	46b0      	mov	r8, r6
 8000ef4:	46b9      	mov	r9, r7
 8000ef6:	e7cf      	b.n	8000e98 <main+0x380>
 8000ef8:	46b0      	mov	r8, r6
 8000efa:	46b9      	mov	r9, r7
 8000efc:	e79b      	b.n	8000e36 <main+0x31e>
 8000efe:	bf00      	nop
 8000f00:	9999999a 	.word	0x9999999a
 8000f04:	3fa99999 	.word	0x3fa99999
 8000f08:	66666666 	.word	0x66666666
 8000f0c:	3fee6666 	.word	0x3fee6666
 8000f10:	20000228 	.word	0x20000228
 8000f14:	40b00000 	.word	0x40b00000
 8000f18:	3f300000 	.word	0x3f300000

08000f1c <Error_Handler>:
 8000f1c:	b672      	cpsid	i
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <Error_Handler+0x2>

08000f20 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_MspInit+0x3c>)
{
 8000f22:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f24:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f26:	490e      	ldr	r1, [pc, #56]	; (8000f60 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f28:	f042 0201 	orr.w	r2, r2, #1
 8000f2c:	619a      	str	r2, [r3, #24]
 8000f2e:	699a      	ldr	r2, [r3, #24]
 8000f30:	f002 0201 	and.w	r2, r2, #1
 8000f34:	9200      	str	r2, [sp, #0]
 8000f36:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f38:	69da      	ldr	r2, [r3, #28]
 8000f3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f3e:	61da      	str	r2, [r3, #28]
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f4a:	684b      	ldr	r3, [r1, #4]
 8000f4c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f54:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	b002      	add	sp, #8
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010000 	.word	0x40010000

08000f64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f64:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8000f68:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <HAL_ADC_MspInit+0x8c>)
 8000f6a:	6802      	ldr	r2, [r0, #0]
{
 8000f6c:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 8000f6e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000f74:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hadc->Instance==ADC1)
 8000f78:	d001      	beq.n	8000f7e <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f7a:	b006      	add	sp, #24
 8000f7c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f7e:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8000f82:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f8a:	619a      	str	r2, [r3, #24]
 8000f8c:	699a      	ldr	r2, [r3, #24]
 8000f8e:	4605      	mov	r5, r0
 8000f90:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000f94:	9200      	str	r2, [sp, #0]
 8000f96:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	699a      	ldr	r2, [r3, #24]
    hdma_adc1.Instance = DMA1_Channel1;
 8000f9a:	4e16      	ldr	r6, [pc, #88]	; (8000ff4 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	f042 0204 	orr.w	r2, r2, #4
 8000fa0:	619a      	str	r2, [r3, #24]
 8000fa2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000fa4:	2207      	movs	r2, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000fac:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <HAL_ADC_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000fb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f000 fd19 	bl	80019ec <HAL_GPIO_Init>
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fba:	2380      	movs	r3, #128	; 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 8000fbc:	490f      	ldr	r1, [pc, #60]	; (8000ffc <HAL_ADC_MspInit+0x98>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fbe:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc2:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fc6:	60f3      	str	r3, [r6, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fcc:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fce:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd0:	60b4      	str	r4, [r6, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fd2:	61f4      	str	r4, [r6, #28]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fd4:	6171      	str	r1, [r6, #20]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fd6:	6132      	str	r2, [r6, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fd8:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fda:	f000 fc39 	bl	8001850 <HAL_DMA_Init>
 8000fde:	b918      	cbnz	r0, 8000fe8 <HAL_ADC_MspInit+0x84>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fe0:	622e      	str	r6, [r5, #32]
 8000fe2:	6275      	str	r5, [r6, #36]	; 0x24
}
 8000fe4:	b006      	add	sp, #24
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000fe8:	f7ff ff98 	bl	8000f1c <Error_Handler>
 8000fec:	e7f8      	b.n	8000fe0 <HAL_ADC_MspInit+0x7c>
 8000fee:	bf00      	nop
 8000ff0:	40012400 	.word	0x40012400
 8000ff4:	200001b4 	.word	0x200001b4
 8000ff8:	40010800 	.word	0x40010800
 8000ffc:	40020008 	.word	0x40020008

08001000 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <NMI_Handler>
 8001002:	bf00      	nop

08001004 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <HardFault_Handler>
 8001006:	bf00      	nop

08001008 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <MemManage_Handler>
 800100a:	bf00      	nop

0800100c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <BusFault_Handler>
 800100e:	bf00      	nop

08001010 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <UsageFault_Handler>
 8001012:	bf00      	nop

08001014 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <DebugMon_Handler>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <PendSV_Handler>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001020:	f000 b86a 	b.w	80010f8 <HAL_IncTick>

08001024 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001024:	4801      	ldr	r0, [pc, #4]	; (800102c <DMA1_Channel1_IRQHandler+0x8>)
 8001026:	f000 bc4b 	b.w	80018c0 <HAL_DMA_IRQHandler>
 800102a:	bf00      	nop
 800102c:	200001b4 	.word	0x200001b4

08001030 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001030:	4801      	ldr	r0, [pc, #4]	; (8001038 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8001032:	f000 bef3 	b.w	8001e1c <HAL_PCD_IRQHandler>
 8001036:	bf00      	nop
 8001038:	200006fc 	.word	0x200006fc

0800103c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001040:	f7ff fffc 	bl	800103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480b      	ldr	r0, [pc, #44]	; (8001074 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001046:	490c      	ldr	r1, [pc, #48]	; (8001078 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001048:	4a0c      	ldr	r2, [pc, #48]	; (800107c <LoopFillZerobss+0x16>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a09      	ldr	r2, [pc, #36]	; (8001080 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800105c:	4c09      	ldr	r4, [pc, #36]	; (8001084 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106a:	f003 ff67 	bl	8004f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800106e:	f7ff fd53 	bl	8000b18 <main>
  bx lr
 8001072:	4770      	bx	lr
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 800107c:	08005048 	.word	0x08005048
  ldr r2, =_sbss
 8001080:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001084:	20000a2c 	.word	0x20000a2c

08001088 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC1_2_IRQHandler>
	...

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <HAL_InitTick+0x3c>)
{
 8001094:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001096:	7811      	ldrb	r1, [r2, #0]
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_InitTick+0x40>)
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	6812      	ldr	r2, [r2, #0]
 80010a0:	fbb2 f0f3 	udiv	r0, r2, r3
 80010a4:	f000 fbbc 	bl	8001820 <HAL_SYSTICK_Config>
 80010a8:	b908      	cbnz	r0, 80010ae <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	2d0f      	cmp	r5, #15
 80010ac:	d901      	bls.n	80010b2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80010ae:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80010b0:	bd38      	pop	{r3, r4, r5, pc}
 80010b2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	4602      	mov	r2, r0
 80010b6:	4629      	mov	r1, r5
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 fb64 	bl	8001788 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_InitTick+0x44>)
 80010c2:	4620      	mov	r0, r4
 80010c4:	601d      	str	r5, [r3, #0]
}
 80010c6:	bd38      	pop	{r3, r4, r5, pc}
 80010c8:	20000004 	.word	0x20000004
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000008 	.word	0x20000008

080010d4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_Init+0x20>)
{
 80010d6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010da:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e2:	f000 fb3f 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	200f      	movs	r0, #15
 80010e8:	f7ff ffd0 	bl	800108c <HAL_InitTick>
  HAL_MspInit();
 80010ec:	f7ff ff18 	bl	8000f20 <HAL_MspInit>
}
 80010f0:	2000      	movs	r0, #0
 80010f2:	bd08      	pop	{r3, pc}
 80010f4:	40022000 	.word	0x40022000

080010f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010f8:	4a03      	ldr	r2, [pc, #12]	; (8001108 <HAL_IncTick+0x10>)
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <HAL_IncTick+0x14>)
 80010fc:	6811      	ldr	r1, [r2, #0]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	440b      	add	r3, r1
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000230 	.word	0x20000230
 800110c:	20000004 	.word	0x20000004

08001110 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001110:	4b01      	ldr	r3, [pc, #4]	; (8001118 <HAL_GetTick+0x8>)
 8001112:	6818      	ldr	r0, [r3, #0]
}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000230 	.word	0x20000230

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b538      	push	{r3, r4, r5, lr}
 800111e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff fff6 	bl	8001110 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001124:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001126:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001128:	d002      	beq.n	8001130 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <HAL_Delay+0x20>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	1b40      	subs	r0, r0, r5
 8001136:	42a0      	cmp	r0, r4
 8001138:	d3fa      	bcc.n	8001130 <HAL_Delay+0x14>
  {
  }
}
 800113a:	bd38      	pop	{r3, r4, r5, pc}
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001140:	2800      	cmp	r0, #0
 8001142:	f000 8089 	beq.w	8001258 <HAL_ADC_Init+0x118>
{
 8001146:	b538      	push	{r3, r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001148:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800114a:	4604      	mov	r4, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d06b      	beq.n	8001228 <HAL_ADC_Init+0xe8>
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	07d1      	lsls	r1, r2, #31
 8001156:	d440      	bmi.n	80011da <HAL_ADC_Init+0x9a>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001158:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800115a:	06d2      	lsls	r2, r2, #27
 800115c:	d45e      	bmi.n	800121c <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 800115e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001160:	6861      	ldr	r1, [r4, #4]
 8001162:	69e0      	ldr	r0, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001164:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001168:	7b25      	ldrb	r5, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800116a:	f022 0202 	bic.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800116e:	4301      	orrs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 8001170:	f042 0202 	orr.w	r2, r2, #2
 8001174:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001176:	ea41 0245 	orr.w	r2, r1, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800117a:	68a1      	ldr	r1, [r4, #8]
 800117c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001180:	d058      	beq.n	8001234 <HAL_ADC_Init+0xf4>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001182:	7d20      	ldrb	r0, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001184:	2901      	cmp	r1, #1
 8001186:	bf0c      	ite	eq
 8001188:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 800118c:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001190:	2801      	cmp	r0, #1
 8001192:	d06d      	beq.n	8001270 <HAL_ADC_Init+0x130>
      MODIFY_REG(hadc->Instance->CR1,
 8001194:	6858      	ldr	r0, [r3, #4]
 8001196:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 800119a:	ea40 000c 	orr.w	r0, r0, ip
 800119e:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80011a0:	689d      	ldr	r5, [r3, #8]
 80011a2:	4844      	ldr	r0, [pc, #272]	; (80012b4 <HAL_ADC_Init+0x174>)
 80011a4:	4028      	ands	r0, r5
 80011a6:	4310      	orrs	r0, r2
 80011a8:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011aa:	2901      	cmp	r1, #1
 80011ac:	d050      	beq.n	8001250 <HAL_ADC_Init+0x110>
  uint32_t tmp_sqr1 = 0U;
 80011ae:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 80011b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011b2:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 80011b6:	4301      	orrs	r1, r0
 80011b8:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011ba:	6899      	ldr	r1, [r3, #8]
 80011bc:	4b3e      	ldr	r3, [pc, #248]	; (80012b8 <HAL_ADC_Init+0x178>)
 80011be:	400b      	ands	r3, r1
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d04b      	beq.n	800125c <HAL_ADC_Init+0x11c>
      tmp_hal_status = HAL_ERROR;
 80011c4:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80011c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011c8:	f023 0312 	bic.w	r3, r3, #18
 80011cc:	f043 0310 	orr.w	r3, r3, #16
 80011d0:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011d4:	4303      	orrs	r3, r0
 80011d6:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80011d8:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	f022 0201 	bic.w	r2, r2, #1
 80011e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011e2:	f7ff ff95 	bl	8001110 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011e6:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80011e8:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	07d2      	lsls	r2, r2, #31
 80011ee:	d5b3      	bpl.n	8001158 <HAL_ADC_Init+0x18>
 80011f0:	e002      	b.n	80011f8 <HAL_ADC_Init+0xb8>
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	07d1      	lsls	r1, r2, #31
 80011f6:	d5af      	bpl.n	8001158 <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011f8:	f7ff ff8a 	bl	8001110 <HAL_GetTick>
 80011fc:	1b40      	subs	r0, r0, r5
 80011fe:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001200:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001202:	d9f6      	bls.n	80011f2 <HAL_ADC_Init+0xb2>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	07d0      	lsls	r0, r2, #31
 8001208:	d5f3      	bpl.n	80011f2 <HAL_ADC_Init+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800120c:	f043 0310 	orr.w	r3, r3, #16
 8001210:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001212:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800121a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 800121e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001220:	f043 0310 	orr.w	r3, r3, #16
 8001224:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001226:	bd38      	pop	{r3, r4, r5, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8001228:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800122a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800122e:	f7ff fe99 	bl	8000f64 <HAL_ADC_MspInit>
 8001232:	e78d      	b.n	8001150 <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001234:	7d20      	ldrb	r0, [r4, #20]
 8001236:	2801      	cmp	r0, #1
 8001238:	d019      	beq.n	800126e <HAL_ADC_Init+0x12e>
      MODIFY_REG(hadc->Instance->CR1,
 800123a:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800123c:	491d      	ldr	r1, [pc, #116]	; (80012b4 <HAL_ADC_Init+0x174>)
      MODIFY_REG(hadc->Instance->CR1,
 800123e:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 8001242:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001246:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001248:	6898      	ldr	r0, [r3, #8]
 800124a:	4001      	ands	r1, r0
 800124c:	4311      	orrs	r1, r2
 800124e:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001250:	6921      	ldr	r1, [r4, #16]
 8001252:	3901      	subs	r1, #1
 8001254:	0508      	lsls	r0, r1, #20
 8001256:	e7ab      	b.n	80011b0 <HAL_ADC_Init+0x70>
    return HAL_ERROR;
 8001258:	2001      	movs	r0, #1
}
 800125a:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 800125c:	2000      	movs	r0, #0
 800125e:	62e0      	str	r0, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001260:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001262:	f023 0303 	bic.w	r3, r3, #3
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800126c:	bd38      	pop	{r3, r4, r5, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800126e:	468c      	mov	ip, r1
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001270:	b1c5      	cbz	r5, 80012a4 <HAL_ADC_Init+0x164>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001272:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001274:	f040 0020 	orr.w	r0, r0, #32
 8001278:	62a0      	str	r0, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800127c:	f040 0001 	orr.w	r0, r0, #1
 8001280:	62e0      	str	r0, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8001282:	6858      	ldr	r0, [r3, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001284:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001288:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 800128c:	ea40 000c 	orr.w	r0, r0, ip
 8001290:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001292:	689d      	ldr	r5, [r3, #8]
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <HAL_ADC_Init+0x174>)
 8001296:	ea00 0005 	and.w	r0, r0, r5
 800129a:	ea40 0002 	orr.w	r0, r0, r2
 800129e:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012a0:	d183      	bne.n	80011aa <HAL_ADC_Init+0x6a>
 80012a2:	e7d5      	b.n	8001250 <HAL_ADC_Init+0x110>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012a4:	69a0      	ldr	r0, [r4, #24]
 80012a6:	3801      	subs	r0, #1
 80012a8:	ea4c 3040 	orr.w	r0, ip, r0, lsl #13
 80012ac:	f440 6c00 	orr.w	ip, r0, #2048	; 0x800
 80012b0:	e7e7      	b.n	8001282 <HAL_ADC_Init+0x142>
 80012b2:	bf00      	nop
 80012b4:	ffe1f7fd 	.word	0xffe1f7fd
 80012b8:	ff1f0efe 	.word	0xff1f0efe

080012bc <HAL_ADC_Stop>:
{
 80012bc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 80012be:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d035      	beq.n	8001332 <HAL_ADC_Stop+0x76>
 80012c6:	2201      	movs	r2, #1
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012c8:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 80012ca:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	4604      	mov	r4, r0
 80012d2:	07d0      	lsls	r0, r2, #31
 80012d4:	d40c      	bmi.n	80012f0 <HAL_ADC_Stop+0x34>
    ADC_STATE_CLR_SET(hadc->State,
 80012d6:	2000      	movs	r0, #0
 80012d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012de:	f023 0301 	bic.w	r3, r3, #1
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 80012e8:	2300      	movs	r3, #0
 80012ea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80012ee:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	f022 0201 	bic.w	r2, r2, #1
 80012f6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80012f8:	f7ff ff0a 	bl	8001110 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012fc:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80012fe:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	07d9      	lsls	r1, r3, #31
 8001304:	d5e7      	bpl.n	80012d6 <HAL_ADC_Stop+0x1a>
 8001306:	e002      	b.n	800130e <HAL_ADC_Stop+0x52>
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	07db      	lsls	r3, r3, #31
 800130c:	d5e3      	bpl.n	80012d6 <HAL_ADC_Stop+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800130e:	f7ff feff 	bl	8001110 <HAL_GetTick>
 8001312:	1b43      	subs	r3, r0, r5
 8001314:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001316:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001318:	d9f6      	bls.n	8001308 <HAL_ADC_Stop+0x4c>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	07d2      	lsls	r2, r2, #31
 800131e:	d5f3      	bpl.n	8001308 <HAL_ADC_Stop+0x4c>
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001320:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001322:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001324:	f043 0310 	orr.w	r3, r3, #16
 8001328:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800132c:	4303      	orrs	r3, r0
 800132e:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (tmp_hal_status == HAL_OK)
 8001330:	e7da      	b.n	80012e8 <HAL_ADC_Stop+0x2c>
  __HAL_LOCK(hadc);
 8001332:	2002      	movs	r0, #2
}
 8001334:	bd38      	pop	{r3, r4, r5, pc}
 8001336:	bf00      	nop

08001338 <HAL_ADC_PollForConversion>:
{
 8001338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800133c:	4605      	mov	r5, r0
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800133e:	2400      	movs	r4, #0
{
 8001340:	b082      	sub	sp, #8
 8001342:	460e      	mov	r6, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001344:	9401      	str	r4, [sp, #4]
  tickstart = HAL_GetTick();
 8001346:	f7ff fee3 	bl	8001110 <HAL_GetTick>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800134a:	682b      	ldr	r3, [r5, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	05d7      	lsls	r7, r2, #23
 8001350:	d46e      	bmi.n	8001430 <HAL_ADC_PollForConversion+0xf8>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	4607      	mov	r7, r0
 8001356:	05d1      	lsls	r1, r2, #23
 8001358:	d41a      	bmi.n	8001390 <HAL_ADC_PollForConversion+0x58>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800135a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800135c:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001360:	d116      	bne.n	8001390 <HAL_ADC_PollForConversion+0x58>
 8001362:	1c72      	adds	r2, r6, #1
 8001364:	d16e      	bne.n	8001444 <HAL_ADC_PollForConversion+0x10c>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	0794      	lsls	r4, r2, #30
 800136a:	d5fc      	bpl.n	8001366 <HAL_ADC_PollForConversion+0x2e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800136c:	f06f 0212 	mvn.w	r2, #18
 8001370:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001372:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001378:	62aa      	str	r2, [r5, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001380:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001384:	f000 808a 	beq.w	800149c <HAL_ADC_PollForConversion+0x164>
  return HAL_OK;
 8001388:	2000      	movs	r0, #0
}
 800138a:	b002      	add	sp, #8
 800138c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001390:	4b4c      	ldr	r3, [pc, #304]	; (80014c4 <HAL_ADC_PollForConversion+0x18c>)
 8001392:	2002      	movs	r0, #2
 8001394:	f8d3 8000 	ldr.w	r8, [r3]
 8001398:	f001 ff44 	bl	8003224 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800139c:	682a      	ldr	r2, [r5, #0]
 800139e:	494a      	ldr	r1, [pc, #296]	; (80014c8 <HAL_ADC_PollForConversion+0x190>)
 80013a0:	6914      	ldr	r4, [r2, #16]
 80013a2:	4613      	mov	r3, r2
 80013a4:	420c      	tst	r4, r1
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80013a6:	fbb8 f0f0 	udiv	r0, r8, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80013aa:	d110      	bne.n	80013ce <HAL_ADC_PollForConversion+0x96>
 80013ac:	68d4      	ldr	r4, [r2, #12]
 80013ae:	f101 415c 	add.w	r1, r1, #3690987520	; 0xdc000000
 80013b2:	420c      	tst	r4, r1
 80013b4:	d10b      	bne.n	80013ce <HAL_ADC_PollForConversion+0x96>
 80013b6:	6914      	ldr	r4, [r2, #16]
 80013b8:	4944      	ldr	r1, [pc, #272]	; (80014cc <HAL_ADC_PollForConversion+0x194>)
 80013ba:	420c      	tst	r4, r1
 80013bc:	d17f      	bne.n	80014be <HAL_ADC_PollForConversion+0x186>
 80013be:	68d4      	ldr	r4, [r2, #12]
 80013c0:	f101 416e 	add.w	r1, r1, #3992977408	; 0xee000000
 80013c4:	420c      	tst	r4, r1
 80013c6:	bf14      	ite	ne
 80013c8:	2429      	movne	r4, #41	; 0x29
 80013ca:	2414      	moveq	r4, #20
 80013cc:	e009      	b.n	80013e2 <HAL_ADC_PollForConversion+0xaa>
 80013ce:	6914      	ldr	r4, [r2, #16]
 80013d0:	493e      	ldr	r1, [pc, #248]	; (80014cc <HAL_ADC_PollForConversion+0x194>)
 80013d2:	420c      	tst	r4, r1
 80013d4:	d122      	bne.n	800141c <HAL_ADC_PollForConversion+0xe4>
 80013d6:	68d4      	ldr	r4, [r2, #12]
 80013d8:	f101 416e 	add.w	r1, r1, #3992977408	; 0xee000000
 80013dc:	420c      	tst	r4, r1
 80013de:	d11d      	bne.n	800141c <HAL_ADC_PollForConversion+0xe4>
 80013e0:	2454      	movs	r4, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80013e2:	fb00 f404 	mul.w	r4, r0, r4
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80013e6:	9901      	ldr	r1, [sp, #4]
 80013e8:	428c      	cmp	r4, r1
 80013ea:	d9bf      	bls.n	800136c <HAL_ADC_PollForConversion+0x34>
 80013ec:	1c71      	adds	r1, r6, #1
 80013ee:	d032      	beq.n	8001456 <HAL_ADC_PollForConversion+0x11e>
 80013f0:	b136      	cbz	r6, 8001400 <HAL_ADC_PollForConversion+0xc8>
 80013f2:	e038      	b.n	8001466 <HAL_ADC_PollForConversion+0x12e>
      Conversion_Timeout_CPU_cycles ++;
 80013f4:	9b01      	ldr	r3, [sp, #4]
 80013f6:	3301      	adds	r3, #1
 80013f8:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80013fa:	9b01      	ldr	r3, [sp, #4]
 80013fc:	42a3      	cmp	r3, r4
 80013fe:	d230      	bcs.n	8001462 <HAL_ADC_PollForConversion+0x12a>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001400:	9b01      	ldr	r3, [sp, #4]
 8001402:	42a3      	cmp	r3, r4
 8001404:	d2f6      	bcs.n	80013f4 <HAL_ADC_PollForConversion+0xbc>
            __HAL_UNLOCK(hadc);
 8001406:	2200      	movs	r2, #0
            return HAL_TIMEOUT;
 8001408:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800140a:	6aab      	ldr	r3, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 800140c:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8001416:	b002      	add	sp, #8
 8001418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800141c:	6914      	ldr	r4, [r2, #16]
 800141e:	492c      	ldr	r1, [pc, #176]	; (80014d0 <HAL_ADC_PollForConversion+0x198>)
 8001420:	420c      	tst	r4, r1
 8001422:	d131      	bne.n	8001488 <HAL_ADC_PollForConversion+0x150>
 8001424:	68d4      	ldr	r4, [r2, #12]
 8001426:	420c      	tst	r4, r1
 8001428:	bf14      	ite	ne
 800142a:	24fc      	movne	r4, #252	; 0xfc
 800142c:	2454      	moveq	r4, #84	; 0x54
 800142e:	e7d8      	b.n	80013e2 <HAL_ADC_PollForConversion+0xaa>
    return HAL_ERROR;
 8001430:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001432:	6aab      	ldr	r3, [r5, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8001434:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	62ab      	str	r3, [r5, #40]	; 0x28
}
 800143e:	b002      	add	sp, #8
 8001440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	0790      	lsls	r0, r2, #30
 8001448:	d490      	bmi.n	800136c <HAL_ADC_PollForConversion+0x34>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800144a:	b9fe      	cbnz	r6, 800148c <HAL_ADC_PollForConversion+0x154>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	f012 0202 	ands.w	r2, r2, #2
 8001452:	d186      	bne.n	8001362 <HAL_ADC_PollForConversion+0x2a>
 8001454:	e7d8      	b.n	8001408 <HAL_ADC_PollForConversion+0xd0>
      Conversion_Timeout_CPU_cycles ++;
 8001456:	9b01      	ldr	r3, [sp, #4]
 8001458:	3301      	adds	r3, #1
 800145a:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800145c:	9b01      	ldr	r3, [sp, #4]
 800145e:	429c      	cmp	r4, r3
 8001460:	d8f9      	bhi.n	8001456 <HAL_ADC_PollForConversion+0x11e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001462:	4613      	mov	r3, r2
 8001464:	e782      	b.n	800136c <HAL_ADC_PollForConversion+0x34>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001466:	f7ff fe53 	bl	8001110 <HAL_GetTick>
 800146a:	1bc3      	subs	r3, r0, r7
 800146c:	429e      	cmp	r6, r3
 800146e:	d202      	bcs.n	8001476 <HAL_ADC_PollForConversion+0x13e>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001470:	9b01      	ldr	r3, [sp, #4]
 8001472:	429c      	cmp	r4, r3
 8001474:	d8c7      	bhi.n	8001406 <HAL_ADC_PollForConversion+0xce>
      Conversion_Timeout_CPU_cycles ++;
 8001476:	9b01      	ldr	r3, [sp, #4]
 8001478:	3301      	adds	r3, #1
 800147a:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800147c:	9b01      	ldr	r3, [sp, #4]
 800147e:	429c      	cmp	r4, r3
 8001480:	d8f1      	bhi.n	8001466 <HAL_ADC_PollForConversion+0x12e>
 8001482:	682a      	ldr	r2, [r5, #0]
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001484:	4613      	mov	r3, r2
 8001486:	e771      	b.n	800136c <HAL_ADC_PollForConversion+0x34>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001488:	24fc      	movs	r4, #252	; 0xfc
 800148a:	e7aa      	b.n	80013e2 <HAL_ADC_PollForConversion+0xaa>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800148c:	f7ff fe40 	bl	8001110 <HAL_GetTick>
 8001490:	1bc3      	subs	r3, r0, r7
 8001492:	42b3      	cmp	r3, r6
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001494:	682b      	ldr	r3, [r5, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001496:	f67f af64 	bls.w	8001362 <HAL_ADC_PollForConversion+0x2a>
 800149a:	e7d7      	b.n	800144c <HAL_ADC_PollForConversion+0x114>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800149c:	7b28      	ldrb	r0, [r5, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800149e:	2800      	cmp	r0, #0
 80014a0:	f47f af72 	bne.w	8001388 <HAL_ADC_PollForConversion+0x50>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80014a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014aa:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80014ae:	04db      	lsls	r3, r3, #19
 80014b0:	f53f af6a 	bmi.w	8001388 <HAL_ADC_PollForConversion+0x50>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	62ab      	str	r3, [r5, #40]	; 0x28
 80014bc:	e765      	b.n	800138a <HAL_ADC_PollForConversion+0x52>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80014be:	2429      	movs	r4, #41	; 0x29
 80014c0:	e78f      	b.n	80013e2 <HAL_ADC_PollForConversion+0xaa>
 80014c2:	bf00      	nop
 80014c4:	20000000 	.word	0x20000000
 80014c8:	24924924 	.word	0x24924924
 80014cc:	12492492 	.word	0x12492492
 80014d0:	00249249 	.word	0x00249249

080014d4 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80014d4:	6803      	ldr	r3, [r0, #0]
 80014d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop

080014dc <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 80014dc:	2300      	movs	r3, #0
{ 
 80014de:	b530      	push	{r4, r5, lr}
 80014e0:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80014e2:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80014e4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d074      	beq.n	80015d6 <HAL_ADC_ConfigChannel+0xfa>
 80014ec:	2301      	movs	r3, #1
 80014ee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80014f2:	684b      	ldr	r3, [r1, #4]
 80014f4:	4602      	mov	r2, r0
 80014f6:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80014f8:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 80014fa:	d932      	bls.n	8001562 <HAL_ADC_ConfigChannel+0x86>
  else if (sConfig->Rank < 13U)
 80014fc:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 8001502:	d84e      	bhi.n	80015a2 <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001504:	f04f 0c1f 	mov.w	ip, #31
 8001508:	6808      	ldr	r0, [r1, #0]
 800150a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800150c:	3b23      	subs	r3, #35	; 0x23
 800150e:	fa00 fe03 	lsl.w	lr, r0, r3
 8001512:	fa0c f303 	lsl.w	r3, ip, r3
 8001516:	ea25 0303 	bic.w	r3, r5, r3
 800151a:	ea43 030e 	orr.w	r3, r3, lr
 800151e:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001520:	2809      	cmp	r0, #9
 8001522:	d930      	bls.n	8001586 <HAL_ADC_ConfigChannel+0xaa>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001524:	f04f 0c07 	mov.w	ip, #7
 8001528:	688d      	ldr	r5, [r1, #8]
 800152a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800152e:	68e3      	ldr	r3, [r4, #12]
 8001530:	391e      	subs	r1, #30
 8001532:	408d      	lsls	r5, r1
 8001534:	fa0c f101 	lsl.w	r1, ip, r1
 8001538:	ea23 0301 	bic.w	r3, r3, r1
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800153c:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001540:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001542:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001544:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001546:	d844      	bhi.n	80015d2 <HAL_ADC_ConfigChannel+0xf6>
    if (hadc->Instance == ADC1)
 8001548:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <HAL_ADC_ConfigChannel+0x128>)
 800154a:	429c      	cmp	r4, r3
 800154c:	d038      	beq.n	80015c0 <HAL_ADC_ConfigChannel+0xe4>
      tmp_hal_status = HAL_ERROR;
 800154e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001550:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001552:	f043 0320 	orr.w	r3, r3, #32
 8001556:	6293      	str	r3, [r2, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8001558:	2300      	movs	r3, #0
 800155a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 800155e:	b003      	add	sp, #12
 8001560:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001562:	f04f 0c1f 	mov.w	ip, #31
 8001566:	6808      	ldr	r0, [r1, #0]
 8001568:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800156c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800156e:	3b05      	subs	r3, #5
 8001570:	fa00 fe03 	lsl.w	lr, r0, r3
 8001574:	fa0c f303 	lsl.w	r3, ip, r3
 8001578:	ea25 0303 	bic.w	r3, r5, r3
 800157c:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001580:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001582:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001584:	d8ce      	bhi.n	8001524 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001586:	2507      	movs	r5, #7
 8001588:	6889      	ldr	r1, [r1, #8]
 800158a:	6923      	ldr	r3, [r4, #16]
 800158c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001590:	4081      	lsls	r1, r0
 8001592:	fa05 f000 	lsl.w	r0, r5, r0
 8001596:	ea23 0300 	bic.w	r3, r3, r0
 800159a:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800159c:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800159e:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015a0:	e7da      	b.n	8001558 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015a2:	f04f 0c1f 	mov.w	ip, #31
 80015a6:	6808      	ldr	r0, [r1, #0]
 80015a8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80015aa:	3b41      	subs	r3, #65	; 0x41
 80015ac:	fa00 fe03 	lsl.w	lr, r0, r3
 80015b0:	fa0c f303 	lsl.w	r3, ip, r3
 80015b4:	ea25 0303 	bic.w	r3, r5, r3
 80015b8:	ea43 030e 	orr.w	r3, r3, lr
 80015bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80015be:	e7af      	b.n	8001520 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015c0:	68a3      	ldr	r3, [r4, #8]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	d405      	bmi.n	80015d2 <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015c6:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015c8:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015ce:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015d0:	d004      	beq.n	80015dc <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d2:	2000      	movs	r0, #0
 80015d4:	e7c0      	b.n	8001558 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 80015d6:	2002      	movs	r0, #2
}
 80015d8:	b003      	add	sp, #12
 80015da:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <HAL_ADC_ConfigChannel+0x12c>)
 80015de:	490b      	ldr	r1, [pc, #44]	; (800160c <HAL_ADC_ConfigChannel+0x130>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	fba1 1303 	umull	r1, r3, r1, r3
 80015e6:	0c9b      	lsrs	r3, r3, #18
 80015e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80015f0:	9b01      	ldr	r3, [sp, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0ed      	beq.n	80015d2 <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 80015f6:	9b01      	ldr	r3, [sp, #4]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80015fc:	9b01      	ldr	r3, [sp, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f9      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x11a>
 8001602:	e7e6      	b.n	80015d2 <HAL_ADC_ConfigChannel+0xf6>
 8001604:	40012400 	.word	0x40012400
 8001608:	20000000 	.word	0x20000000
 800160c:	431bde83 	.word	0x431bde83

08001610 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001610:	2300      	movs	r3, #0
{
 8001612:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001614:	6802      	ldr	r2, [r0, #0]
{
 8001616:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001618:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800161a:	6893      	ldr	r3, [r2, #8]
 800161c:	07d9      	lsls	r1, r3, #31
 800161e:	d427      	bmi.n	8001670 <ADC_Enable+0x60>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <ADC_Enable+0x80>)
 8001622:	4604      	mov	r4, r0
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	481b      	ldr	r0, [pc, #108]	; (8001694 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 8001628:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800162a:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 800162e:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001632:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8001634:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001636:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001638:	9b01      	ldr	r3, [sp, #4]
 800163a:	b12b      	cbz	r3, 8001648 <ADC_Enable+0x38>
      wait_loop_index--;
 800163c:	9b01      	ldr	r3, [sp, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001642:	9b01      	ldr	r3, [sp, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f9      	bne.n	800163c <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8001648:	f7ff fd62 	bl	8001110 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800164c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800164e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	07da      	lsls	r2, r3, #31
 8001654:	d40c      	bmi.n	8001670 <ADC_Enable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001656:	f7ff fd5b 	bl	8001110 <HAL_GetTick>
 800165a:	1b43      	subs	r3, r0, r5
 800165c:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 800165e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001660:	d903      	bls.n	800166a <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	f012 0201 	ands.w	r2, r2, #1
 8001668:	d005      	beq.n	8001676 <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	07db      	lsls	r3, r3, #31
 800166e:	d5f2      	bpl.n	8001656 <ADC_Enable+0x46>
  return HAL_OK;
 8001670:	2000      	movs	r0, #0
}
 8001672:	b003      	add	sp, #12
 8001674:	bd30      	pop	{r4, r5, pc}
          __HAL_UNLOCK(hadc);
 8001676:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800167a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001684:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001686:	4303      	orrs	r3, r0
 8001688:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800168a:	b003      	add	sp, #12
 800168c:	bd30      	pop	{r4, r5, pc}
 800168e:	bf00      	nop
 8001690:	20000000 	.word	0x20000000
 8001694:	431bde83 	.word	0x431bde83

08001698 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8001698:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800169c:	2b01      	cmp	r3, #1
 800169e:	d038      	beq.n	8001712 <HAL_ADC_Start+0x7a>
 80016a0:	2301      	movs	r3, #1
{
 80016a2:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80016a4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80016a8:	4604      	mov	r4, r0
 80016aa:	f7ff ffb1 	bl	8001610 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80016ae:	bb60      	cbnz	r0, 800170a <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 80016b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016b2:	6822      	ldr	r2, [r4, #0]
 80016b4:	4929      	ldr	r1, [pc, #164]	; (800175c <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 80016b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016c2:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 80016c4:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016c6:	d026      	beq.n	8001716 <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016ce:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016d0:	6853      	ldr	r3, [r2, #4]
 80016d2:	0559      	lsls	r1, r3, #21
 80016d4:	d42b      	bmi.n	800172e <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80016d8:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016da:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016de:	bf18      	it	ne
 80016e0:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80016e2:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016e6:	bf18      	it	ne
 80016e8:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80016ec:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016ee:	f06f 0302 	mvn.w	r3, #2
 80016f2:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016f4:	6893      	ldr	r3, [r2, #8]
 80016f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016fe:	d01d      	beq.n	800173c <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001700:	6893      	ldr	r3, [r2, #8]
 8001702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001706:	6093      	str	r3, [r2, #8]
}
 8001708:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 800170a:	2300      	movs	r3, #0
 800170c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001710:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001712:	2002      	movs	r0, #2
}
 8001714:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_ADC_Start+0xc8>)
 8001718:	6859      	ldr	r1, [r3, #4]
 800171a:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 800171e:	d0d3      	beq.n	80016c8 <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001720:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001722:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001726:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	055b      	lsls	r3, r3, #21
 800172c:	d5d3      	bpl.n	80016d6 <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800172e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001730:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001734:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001738:	62a3      	str	r3, [r4, #40]	; 0x28
 800173a:	e7cc      	b.n	80016d6 <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <HAL_ADC_Start+0xc4>)
 800173e:	429a      	cmp	r2, r3
 8001740:	d004      	beq.n	800174c <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001742:	6893      	ldr	r3, [r2, #8]
 8001744:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001748:	6093      	str	r3, [r2, #8]
}
 800174a:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800174c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001750:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001752:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8001756:	d1d3      	bne.n	8001700 <HAL_ADC_Start+0x68>
 8001758:	e7f3      	b.n	8001742 <HAL_ADC_Start+0xaa>
 800175a:	bf00      	nop
 800175c:	40012800 	.word	0x40012800
 8001760:	40012400 	.word	0x40012400

08001764 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001764:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4906      	ldr	r1, [pc, #24]	; (8001784 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800176a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800176e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001780:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178a:	b500      	push	{lr}
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001792:	f1c3 0e07 	rsb	lr, r3, #7
 8001796:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179e:	bf28      	it	cs
 80017a0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a4:	f1bc 0f06 	cmp.w	ip, #6
 80017a8:	d91b      	bls.n	80017e2 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017aa:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	fa0c fc03 	lsl.w	ip, ip, r3
 80017b4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	f04f 3cff 	mov.w	ip, #4294967295
 80017bc:	fa0c fc0e 	lsl.w	ip, ip, lr
 80017c0:	ea21 010c 	bic.w	r1, r1, ip
 80017c4:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80017c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80017cc:	db0c      	blt.n	80017e8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	0109      	lsls	r1, r1, #4
 80017d0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80017d4:	b2c9      	uxtb	r1, r1
 80017d6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80017da:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017de:	f85d fb04 	ldr.w	pc, [sp], #4
 80017e2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e4:	4613      	mov	r3, r2
 80017e6:	e7e7      	b.n	80017b8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_NVIC_SetPriority+0x78>)
 80017ea:	f000 000f 	and.w	r0, r0, #15
 80017ee:	0109      	lsls	r1, r1, #4
 80017f0:	b2c9      	uxtb	r1, r1
 80017f2:	4403      	add	r3, r0
 80017f4:	7619      	strb	r1, [r3, #24]
 80017f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00
 8001800:	e000ecfc 	.word	0xe000ecfc

08001804 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001804:	2800      	cmp	r0, #0
 8001806:	db07      	blt.n	8001818 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001808:	2301      	movs	r3, #1
 800180a:	f000 011f 	and.w	r1, r0, #31
 800180e:	4a03      	ldr	r2, [pc, #12]	; (800181c <HAL_NVIC_EnableIRQ+0x18>)
 8001810:	0940      	lsrs	r0, r0, #5
 8001812:	408b      	lsls	r3, r1
 8001814:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100

08001820 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001820:	3801      	subs	r0, #1
 8001822:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001826:	d20f      	bcs.n	8001848 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001828:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001834:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	4c05      	ldr	r4, [pc, #20]	; (800184c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001838:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001840:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001842:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001844:	6119      	str	r1, [r3, #16]
 8001846:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001848:	2001      	movs	r0, #1
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001850:	b370      	cbz	r0, 80018b0 <HAL_DMA_Init+0x60>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001852:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001854:	2202      	movs	r2, #2
{
 8001856:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001858:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800185c:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800185e:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001860:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001864:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001866:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001868:	f422 5e7f 	bic.w	lr, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 800186c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8001870:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001872:	4910      	ldr	r1, [pc, #64]	; (80018b4 <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001874:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001876:	4d10      	ldr	r5, [pc, #64]	; (80018b8 <HAL_DMA_Init+0x68>)
 8001878:	4401      	add	r1, r0
 800187a:	fba5 5101 	umull	r5, r1, r5, r1
 800187e:	0909      	lsrs	r1, r1, #4
 8001880:	0089      	lsls	r1, r1, #2
 8001882:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001884:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001886:	f02e 0e30 	bic.w	lr, lr, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188c:	6959      	ldr	r1, [r3, #20]
 800188e:	430a      	orrs	r2, r1
 8001890:	6999      	ldr	r1, [r3, #24]
 8001892:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001894:	69d9      	ldr	r1, [r3, #28]
 8001896:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8001898:	4908      	ldr	r1, [pc, #32]	; (80018bc <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 800189a:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 800189e:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 80018a0:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a2:	639c      	str	r4, [r3, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018a4:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80018a8:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21

  return HAL_OK;
 80018ac:	4620      	mov	r0, r4
}
 80018ae:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80018b0:	2001      	movs	r0, #1
}
 80018b2:	4770      	bx	lr
 80018b4:	bffdfff8 	.word	0xbffdfff8
 80018b8:	cccccccd 	.word	0xcccccccd
 80018bc:	40020000 	.word	0x40020000

080018c0 <HAL_DMA_IRQHandler>:
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018c0:	2204      	movs	r2, #4
{
 80018c2:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018c4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018c6:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018c8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80018ca:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018cc:	408a      	lsls	r2, r1
 80018ce:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 80018d0:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018d2:	d01f      	beq.n	8001914 <HAL_DMA_IRQHandler+0x54>
 80018d4:	076a      	lsls	r2, r5, #29
 80018d6:	d51d      	bpl.n	8001914 <HAL_DMA_IRQHandler+0x54>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	0691      	lsls	r1, r2, #26
 80018dc:	d403      	bmi.n	80018e6 <HAL_DMA_IRQHandler+0x26>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	f022 0204 	bic.w	r2, r2, #4
 80018e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018e6:	4a3f      	ldr	r2, [pc, #252]	; (80019e4 <HAL_DMA_IRQHandler+0x124>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d052      	beq.n	8001992 <HAL_DMA_IRQHandler+0xd2>
 80018ec:	3214      	adds	r2, #20
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d062      	beq.n	80019b8 <HAL_DMA_IRQHandler+0xf8>
 80018f2:	3214      	adds	r2, #20
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d069      	beq.n	80019cc <HAL_DMA_IRQHandler+0x10c>
 80018f8:	3214      	adds	r2, #20
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d06c      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x118>
 80018fe:	3214      	adds	r2, #20
 8001900:	4293      	cmp	r3, r2
 8001902:	d05e      	beq.n	80019c2 <HAL_DMA_IRQHandler+0x102>
 8001904:	3214      	adds	r2, #20
 8001906:	4293      	cmp	r3, r2
 8001908:	bf0c      	ite	eq
 800190a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800190e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001912:	e03f      	b.n	8001994 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferHalfCpltCallback(hdma);
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001914:	2202      	movs	r2, #2
 8001916:	408a      	lsls	r2, r1
 8001918:	4222      	tst	r2, r4
 800191a:	d022      	beq.n	8001962 <HAL_DMA_IRQHandler+0xa2>
 800191c:	07aa      	lsls	r2, r5, #30
 800191e:	d520      	bpl.n	8001962 <HAL_DMA_IRQHandler+0xa2>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	0691      	lsls	r1, r2, #26
 8001924:	d406      	bmi.n	8001934 <HAL_DMA_IRQHandler+0x74>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001926:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	f022 020a 	bic.w	r2, r2, #10
 800192e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001930:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001934:	4a2b      	ldr	r2, [pc, #172]	; (80019e4 <HAL_DMA_IRQHandler+0x124>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d033      	beq.n	80019a2 <HAL_DMA_IRQHandler+0xe2>
 800193a:	3214      	adds	r2, #20
 800193c:	4293      	cmp	r3, r2
 800193e:	d043      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x108>
 8001940:	3214      	adds	r2, #20
 8001942:	4293      	cmp	r3, r2
 8001944:	d045      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x112>
 8001946:	3214      	adds	r2, #20
 8001948:	4293      	cmp	r3, r2
 800194a:	d037      	beq.n	80019bc <HAL_DMA_IRQHandler+0xfc>
 800194c:	3214      	adds	r2, #20
 800194e:	4293      	cmp	r3, r2
 8001950:	d045      	beq.n	80019de <HAL_DMA_IRQHandler+0x11e>
 8001952:	3214      	adds	r2, #20
 8001954:	4293      	cmp	r3, r2
 8001956:	bf0c      	ite	eq
 8001958:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800195c:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001960:	e020      	b.n	80019a4 <HAL_DMA_IRQHandler+0xe4>
      hdma->XferCpltCallback(hdma);
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001962:	2208      	movs	r2, #8
 8001964:	408a      	lsls	r2, r1
 8001966:	4222      	tst	r2, r4
 8001968:	d019      	beq.n	800199e <HAL_DMA_IRQHandler+0xde>
 800196a:	072a      	lsls	r2, r5, #28
 800196c:	d517      	bpl.n	800199e <HAL_DMA_IRQHandler+0xde>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800196e:	681a      	ldr	r2, [r3, #0]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001970:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001972:	f022 020e 	bic.w	r2, r2, #14
 8001976:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001978:	2301      	movs	r3, #1

    if (hdma->XferErrorCallback != NULL)
 800197a:	6b02      	ldr	r2, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800197c:	fa03 f101 	lsl.w	r1, r3, r1
 8001980:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001982:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001984:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 8001988:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if (hdma->XferErrorCallback != NULL)
 800198c:	b13a      	cbz	r2, 800199e <HAL_DMA_IRQHandler+0xde>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 800198e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001990:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001992:	2304      	movs	r3, #4
 8001994:	4914      	ldr	r1, [pc, #80]	; (80019e8 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 8001996:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001998:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800199a:	2a00      	cmp	r2, #0
 800199c:	d1f7      	bne.n	800198e <HAL_DMA_IRQHandler+0xce>
}
 800199e:	bc70      	pop	{r4, r5, r6}
 80019a0:	4770      	bx	lr
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019a2:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 80019a4:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019a6:	4c10      	ldr	r4, [pc, #64]	; (80019e8 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 80019a8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019aa:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 80019ac:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80019b0:	2a00      	cmp	r2, #0
 80019b2:	d0f4      	beq.n	800199e <HAL_DMA_IRQHandler+0xde>
}
 80019b4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80019b6:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019b8:	2340      	movs	r3, #64	; 0x40
 80019ba:	e7eb      	b.n	8001994 <HAL_DMA_IRQHandler+0xd4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c0:	e7f0      	b.n	80019a4 <HAL_DMA_IRQHandler+0xe4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019c6:	e7e5      	b.n	8001994 <HAL_DMA_IRQHandler+0xd4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019c8:	2320      	movs	r3, #32
 80019ca:	e7eb      	b.n	80019a4 <HAL_DMA_IRQHandler+0xe4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d0:	e7e0      	b.n	8001994 <HAL_DMA_IRQHandler+0xd4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019d6:	e7e5      	b.n	80019a4 <HAL_DMA_IRQHandler+0xe4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019dc:	e7da      	b.n	8001994 <HAL_DMA_IRQHandler+0xd4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e2:	e7df      	b.n	80019a4 <HAL_DMA_IRQHandler+0xe4>
 80019e4:	40020008 	.word	0x40020008
 80019e8:	40020000 	.word	0x40020000

080019ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f0:	680e      	ldr	r6, [r1, #0]
{
 80019f2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f4:	2e00      	cmp	r6, #0
 80019f6:	f000 80b1 	beq.w	8001b5c <HAL_GPIO_Init+0x170>
 80019fa:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019fc:	4f74      	ldr	r7, [pc, #464]	; (8001bd0 <HAL_GPIO_Init+0x1e4>)
  uint32_t config = 0x00u;
 80019fe:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8001a00:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a02:	4d74      	ldr	r5, [pc, #464]	; (8001bd4 <HAL_GPIO_Init+0x1e8>)
      switch (GPIO_Init->Mode)
 8001a04:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8001bd8 <HAL_GPIO_Init+0x1ec>
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8001a0a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0c:	fa36 f403 	lsrs.w	r4, r6, r3
 8001a10:	f102 0204 	add.w	r2, r2, #4
 8001a14:	f000 80a2 	beq.w	8001b5c <HAL_GPIO_Init+0x170>
    ioposition = (0x01uL << position);
 8001a18:	2401      	movs	r4, #1
 8001a1a:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8001a1c:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a20:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8001a24:	d1f1      	bne.n	8001a0a <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8001a26:	684e      	ldr	r6, [r1, #4]
 8001a28:	2e12      	cmp	r6, #18
 8001a2a:	f200 809a 	bhi.w	8001b62 <HAL_GPIO_Init+0x176>
 8001a2e:	2e12      	cmp	r6, #18
 8001a30:	d81a      	bhi.n	8001a68 <HAL_GPIO_Init+0x7c>
 8001a32:	e8df f006 	tbb	[pc, r6]
 8001a36:	b9a3      	.short	0xb9a3
 8001a38:	1919c3b5 	.word	0x1919c3b5
 8001a3c:	19191919 	.word	0x19191919
 8001a40:	19191919 	.word	0x19191919
 8001a44:	b1191919 	.word	0xb1191919
 8001a48:	ad          	.byte	0xad
 8001a49:	00          	.byte	0x00
 8001a4a:	f8df e190 	ldr.w	lr, [pc, #400]	; 8001bdc <HAL_GPIO_Init+0x1f0>
 8001a4e:	4576      	cmp	r6, lr
 8001a50:	f000 8094 	beq.w	8001b7c <HAL_GPIO_Init+0x190>
 8001a54:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8001a58:	4576      	cmp	r6, lr
 8001a5a:	f000 808f 	beq.w	8001b7c <HAL_GPIO_Init+0x190>
 8001a5e:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8001a62:	4576      	cmp	r6, lr
 8001a64:	f000 808a 	beq.w	8001b7c <HAL_GPIO_Init+0x190>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a68:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8001a6c:	bf9c      	itt	ls
 8001a6e:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a70:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a72:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a76:	bf84      	itt	hi
 8001a78:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a7c:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a80:	f8de 4000 	ldr.w	r4, [lr]
 8001a84:	fa0a f90b 	lsl.w	r9, sl, fp
 8001a88:	fa06 fb0b 	lsl.w	fp, r6, fp
 8001a8c:	ea24 040b 	bic.w	r4, r4, fp
 8001a90:	ea44 0409 	orr.w	r4, r4, r9
 8001a94:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a98:	684c      	ldr	r4, [r1, #4]
 8001a9a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001a9e:	d075      	beq.n	8001b8c <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa0:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aa4:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa8:	f04e 0e01 	orr.w	lr, lr, #1
 8001aac:	f8c7 e018 	str.w	lr, [r7, #24]
 8001ab0:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ab4:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ab8:	f00e 0e01 	and.w	lr, lr, #1
 8001abc:	f8cd e004 	str.w	lr, [sp, #4]
 8001ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001ac4:	f023 0e03 	bic.w	lr, r3, #3
 8001ac8:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8001acc:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001ad0:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ad4:	fa06 f609 	lsl.w	r6, r6, r9
 8001ad8:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001adc:	f8df b100 	ldr.w	fp, [pc, #256]	; 8001be0 <HAL_GPIO_Init+0x1f4>
 8001ae0:	4558      	cmp	r0, fp
 8001ae2:	d00f      	beq.n	8001b04 <HAL_GPIO_Init+0x118>
 8001ae4:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8001ae8:	4558      	cmp	r0, fp
 8001aea:	d060      	beq.n	8001bae <HAL_GPIO_Init+0x1c2>
 8001aec:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8001be4 <HAL_GPIO_Init+0x1f8>
 8001af0:	4558      	cmp	r0, fp
 8001af2:	bf0c      	ite	eq
 8001af4:	f04f 0b02 	moveq.w	fp, #2
 8001af8:	f04f 0b03 	movne.w	fp, #3
 8001afc:	fa0b f909 	lsl.w	r9, fp, r9
 8001b00:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001b04:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b08:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b0e:	bf14      	ite	ne
 8001b10:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b14:	ea26 060c 	biceq.w	r6, r6, ip
 8001b18:	60ae      	str	r6, [r5, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b1a:	68ee      	ldr	r6, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b1c:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b20:	bf14      	ite	ne
 8001b22:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b26:	ea26 060c 	biceq.w	r6, r6, ip
 8001b2a:	60ee      	str	r6, [r5, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8001b2c:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b2e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001b32:	bf14      	ite	ne
 8001b34:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b38:	ea26 060c 	biceq.w	r6, r6, ip
 8001b3c:	606e      	str	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b3e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001b42:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b44:	d01f      	beq.n	8001b86 <HAL_GPIO_Init+0x19a>
          SET_BIT(EXTI->IMR, iocurrent);
 8001b46:	ea44 040c 	orr.w	r4, r4, ip
 8001b4a:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4c:	680e      	ldr	r6, [r1, #0]
	position++;
 8001b4e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b50:	fa36 f403 	lsrs.w	r4, r6, r3
 8001b54:	f102 0204 	add.w	r2, r2, #4
 8001b58:	f47f af5e 	bne.w	8001a18 <HAL_GPIO_Init+0x2c>
  }
}
 8001b5c:	b003      	add	sp, #12
 8001b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001b62:	4546      	cmp	r6, r8
 8001b64:	d00a      	beq.n	8001b7c <HAL_GPIO_Init+0x190>
 8001b66:	f67f af70 	bls.w	8001a4a <HAL_GPIO_Init+0x5e>
 8001b6a:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8001be8 <HAL_GPIO_Init+0x1fc>
 8001b6e:	4576      	cmp	r6, lr
 8001b70:	d004      	beq.n	8001b7c <HAL_GPIO_Init+0x190>
 8001b72:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001b76:	4576      	cmp	r6, lr
 8001b78:	f47f af76 	bne.w	8001a68 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b7c:	688e      	ldr	r6, [r1, #8]
 8001b7e:	bb06      	cbnz	r6, 8001bc2 <HAL_GPIO_Init+0x1d6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b80:	f04f 0a04 	mov.w	sl, #4
 8001b84:	e770      	b.n	8001a68 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b86:	ea24 040c 	bic.w	r4, r4, ip
 8001b8a:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8c:	680e      	ldr	r6, [r1, #0]
 8001b8e:	e73c      	b.n	8001a0a <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b90:	68cc      	ldr	r4, [r1, #12]
 8001b92:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8001b96:	e767      	b.n	8001a68 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b98:	68cc      	ldr	r4, [r1, #12]
 8001b9a:	f104 0a04 	add.w	sl, r4, #4
          break;
 8001b9e:	e763      	b.n	8001a68 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ba0:	68cc      	ldr	r4, [r1, #12]
 8001ba2:	f104 0a08 	add.w	sl, r4, #8
          break;
 8001ba6:	e75f      	b.n	8001a68 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ba8:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8001bac:	e75c      	b.n	8001a68 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bae:	f04f 0b01 	mov.w	fp, #1
 8001bb2:	fa0b f909 	lsl.w	r9, fp, r9
 8001bb6:	ea46 0609 	orr.w	r6, r6, r9
 8001bba:	e7a3      	b.n	8001b04 <HAL_GPIO_Init+0x118>
      switch (GPIO_Init->Mode)
 8001bbc:	f04f 0a00 	mov.w	sl, #0
 8001bc0:	e752      	b.n	8001a68 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bc2:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bc4:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8001bc8:	bf0c      	ite	eq
 8001bca:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8001bcc:	6144      	strne	r4, [r0, #20]
 8001bce:	e74b      	b.n	8001a68 <HAL_GPIO_Init+0x7c>
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010400 	.word	0x40010400
 8001bd8:	10220000 	.word	0x10220000
 8001bdc:	10120000 	.word	0x10120000
 8001be0:	40010800 	.word	0x40010800
 8001be4:	40011000 	.word	0x40011000
 8001be8:	10310000 	.word	0x10310000

08001bec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bec:	b538      	push	{r3, r4, r5, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bee:	2800      	cmp	r0, #0
 8001bf0:	f000 80ed 	beq.w	8001dce <HAL_PCD_Init+0x1e2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bf4:	f890 3291 	ldrb.w	r3, [r0, #657]	; 0x291
 8001bf8:	4604      	mov	r4, r0
 8001bfa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 80e0 	beq.w	8001dc4 <HAL_PCD_Init+0x1d8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c04:	2203      	movs	r2, #3

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001c06:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c08:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c0a:	f884 2291 	strb.w	r2, [r4, #657]	; 0x291
  hpcd->Init.dma_enable = 0U;
 8001c0e:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8001c10:	6820      	ldr	r0, [r4, #0]
 8001c12:	f001 fb81 	bl	8003318 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c16:	f855 0b04 	ldr.w	r0, [r5], #4
 8001c1a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001c1e:	f001 fb69 	bl	80032f4 <USB_CoreInit>
 8001c22:	b128      	cbz	r0, 8001c30 <HAL_PCD_Init+0x44>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c24:	2302      	movs	r3, #2
    return HAL_ERROR;
 8001c26:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c28:	f884 3291 	strb.w	r3, [r4, #657]	; 0x291
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	bd38      	pop	{r3, r4, r5, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c30:	4601      	mov	r1, r0
 8001c32:	6820      	ldr	r0, [r4, #0]
 8001c34:	f001 fb7a 	bl	800332c <USB_SetCurrentMode>
 8001c38:	2800      	cmp	r0, #0
 8001c3a:	d1f3      	bne.n	8001c24 <HAL_PCD_Init+0x38>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c3c:	7922      	ldrb	r2, [r4, #4]
 8001c3e:	2a00      	cmp	r2, #0
 8001c40:	f000 80ae 	beq.w	8001da0 <HAL_PCD_Init+0x1b4>
    hpcd->IN_ep[i].num = i;
 8001c44:	f44f 7380 	mov.w	r3, #256	; 0x100
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c48:	2a01      	cmp	r2, #1
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c4a:	e9c4 0008 	strd	r0, r0, [r4, #32]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c4e:	74e0      	strb	r0, [r4, #19]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c50:	62a0      	str	r0, [r4, #40]	; 0x28
    hpcd->IN_ep[i].num = i;
 8001c52:	8223      	strh	r3, [r4, #16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c54:	f000 80be 	beq.w	8001dd4 <HAL_PCD_Init+0x1e8>
    hpcd->IN_ep[i].num = i;
 8001c58:	f240 1301 	movw	r3, #257	; 0x101
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5c:	2a02      	cmp	r2, #2
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c5e:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c62:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c66:	6520      	str	r0, [r4, #80]	; 0x50
    hpcd->IN_ep[i].num = i;
 8001c68:	8723      	strh	r3, [r4, #56]	; 0x38
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c6a:	d045      	beq.n	8001cf8 <HAL_PCD_Init+0x10c>
    hpcd->IN_ep[i].num = i;
 8001c6c:	f44f 7381 	mov.w	r3, #258	; 0x102
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c70:	2a03      	cmp	r2, #3
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c72:	e9c4 001c 	strd	r0, r0, [r4, #112]	; 0x70
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c76:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c7a:	67a0      	str	r0, [r4, #120]	; 0x78
    hpcd->IN_ep[i].num = i;
 8001c7c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c80:	d03a      	beq.n	8001cf8 <HAL_PCD_Init+0x10c>
    hpcd->IN_ep[i].num = i;
 8001c82:	f240 1303 	movw	r3, #259	; 0x103
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c86:	2a04      	cmp	r2, #4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c88:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c8c:	f884 008b 	strb.w	r0, [r4, #139]	; 0x8b
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c90:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    hpcd->IN_ep[i].num = i;
 8001c94:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c98:	d02e      	beq.n	8001cf8 <HAL_PCD_Init+0x10c>
    hpcd->IN_ep[i].num = i;
 8001c9a:	f44f 7382 	mov.w	r3, #260	; 0x104
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9e:	2a05      	cmp	r2, #5
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ca0:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ca4:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ca8:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    hpcd->IN_ep[i].num = i;
 8001cac:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb0:	d022      	beq.n	8001cf8 <HAL_PCD_Init+0x10c>
    hpcd->IN_ep[i].num = i;
 8001cb2:	f240 1305 	movw	r3, #261	; 0x105
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb6:	2a06      	cmp	r2, #6
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cb8:	e9c4 003a 	strd	r0, r0, [r4, #232]	; 0xe8
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cbc:	f884 00db 	strb.w	r0, [r4, #219]	; 0xdb
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cc0:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
    hpcd->IN_ep[i].num = i;
 8001cc4:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc8:	d016      	beq.n	8001cf8 <HAL_PCD_Init+0x10c>
    hpcd->IN_ep[i].num = i;
 8001cca:	f44f 7383 	mov.w	r3, #262	; 0x106
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cce:	2a07      	cmp	r2, #7
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cd0:	e9c4 0044 	strd	r0, r0, [r4, #272]	; 0x110
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cd4:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cd8:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
    hpcd->IN_ep[i].num = i;
 8001cdc:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce0:	d00a      	beq.n	8001cf8 <HAL_PCD_Init+0x10c>
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ce2:	2300      	movs	r3, #0
    hpcd->IN_ep[i].num = i;
 8001ce4:	f240 1107 	movw	r1, #263	; 0x107
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ce8:	e9c4 334e 	strd	r3, r3, [r4, #312]	; 0x138
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cec:	f884 312b 	strb.w	r3, [r4, #299]	; 0x12b
    hpcd->IN_ep[i].num = i;
 8001cf0:	f8a4 1128 	strh.w	r1, [r4, #296]	; 0x128
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cf4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    hpcd->OUT_ep[i].num = i;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	2101      	movs	r1, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfc:	2a02      	cmp	r2, #2
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cfe:	e9c4 3358 	strd	r3, r3, [r4, #352]	; 0x160
 8001d02:	e9c4 3362 	strd	r3, r3, [r4, #392]	; 0x188
    hpcd->OUT_ep[i].num = i;
 8001d06:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d0a:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d0e:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
    hpcd->OUT_ep[i].num = i;
 8001d12:	f8a4 1178 	strh.w	r1, [r4, #376]	; 0x178
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d16:	f884 317b 	strb.w	r3, [r4, #379]	; 0x17b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d1a:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1e:	d03f      	beq.n	8001da0 <HAL_PCD_Init+0x1b4>
    hpcd->OUT_ep[i].num = i;
 8001d20:	2102      	movs	r1, #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d22:	2a03      	cmp	r2, #3
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d24:	e9c4 336c 	strd	r3, r3, [r4, #432]	; 0x1b0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d28:	f884 31a3 	strb.w	r3, [r4, #419]	; 0x1a3
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d2c:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
    hpcd->OUT_ep[i].num = i;
 8001d30:	f8a4 11a0 	strh.w	r1, [r4, #416]	; 0x1a0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d34:	d034      	beq.n	8001da0 <HAL_PCD_Init+0x1b4>
    hpcd->OUT_ep[i].num = i;
 8001d36:	2103      	movs	r1, #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d38:	2a04      	cmp	r2, #4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d3a:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d3e:	f884 31cb 	strb.w	r3, [r4, #459]	; 0x1cb
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d42:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
    hpcd->OUT_ep[i].num = i;
 8001d46:	f8a4 11c8 	strh.w	r1, [r4, #456]	; 0x1c8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d4a:	d029      	beq.n	8001da0 <HAL_PCD_Init+0x1b4>
    hpcd->OUT_ep[i].num = i;
 8001d4c:	2104      	movs	r1, #4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d4e:	2a05      	cmp	r2, #5
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d50:	e9c4 3380 	strd	r3, r3, [r4, #512]	; 0x200
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d54:	f884 31f3 	strb.w	r3, [r4, #499]	; 0x1f3
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d58:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    hpcd->OUT_ep[i].num = i;
 8001d5c:	f8a4 11f0 	strh.w	r1, [r4, #496]	; 0x1f0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d60:	d01e      	beq.n	8001da0 <HAL_PCD_Init+0x1b4>
    hpcd->OUT_ep[i].num = i;
 8001d62:	2105      	movs	r1, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d64:	2a06      	cmp	r2, #6
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d66:	e9c4 338a 	strd	r3, r3, [r4, #552]	; 0x228
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d6a:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d6e:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
    hpcd->OUT_ep[i].num = i;
 8001d72:	f8a4 1218 	strh.w	r1, [r4, #536]	; 0x218
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d76:	d013      	beq.n	8001da0 <HAL_PCD_Init+0x1b4>
    hpcd->OUT_ep[i].num = i;
 8001d78:	2106      	movs	r1, #6
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d7a:	2a07      	cmp	r2, #7
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d7c:	e9c4 3394 	strd	r3, r3, [r4, #592]	; 0x250
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d80:	f884 3243 	strb.w	r3, [r4, #579]	; 0x243
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d84:	f8c4 3258 	str.w	r3, [r4, #600]	; 0x258
    hpcd->OUT_ep[i].num = i;
 8001d88:	f8a4 1240 	strh.w	r1, [r4, #576]	; 0x240
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8c:	d008      	beq.n	8001da0 <HAL_PCD_Init+0x1b4>
    hpcd->OUT_ep[i].num = i;
 8001d8e:	2207      	movs	r2, #7
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d90:	e9c4 339e 	strd	r3, r3, [r4, #632]	; 0x278
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d94:	f884 326b 	strb.w	r3, [r4, #619]	; 0x26b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d98:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    hpcd->OUT_ep[i].num = i;
 8001d9c:	f8a4 2268 	strh.w	r2, [r4, #616]	; 0x268
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001da0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001da4:	6820      	ldr	r0, [r4, #0]
 8001da6:	f001 fac3 	bl	8003330 <USB_DevInit>
 8001daa:	4605      	mov	r5, r0
 8001dac:	2800      	cmp	r0, #0
 8001dae:	f47f af39 	bne.w	8001c24 <HAL_PCD_Init+0x38>
  hpcd->State = HAL_PCD_STATE_READY;
 8001db2:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001db4:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 8001db6:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8001db8:	f884 3291 	strb.w	r3, [r4, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001dbc:	f002 f8d0 	bl	8003f60 <USB_DevDisconnect>
}
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	bd38      	pop	{r3, r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001dc4:	f880 2290 	strb.w	r2, [r0, #656]	; 0x290
    HAL_PCD_MspInit(hpcd);
 8001dc8:	f002 ff8a 	bl	8004ce0 <HAL_PCD_MspInit>
 8001dcc:	e71a      	b.n	8001c04 <HAL_PCD_Init+0x18>
    return HAL_ERROR;
 8001dce:	2501      	movs	r5, #1
}
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	bd38      	pop	{r3, r4, r5, pc}
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dd4:	e9c4 0058 	strd	r0, r0, [r4, #352]	; 0x160
    hpcd->OUT_ep[i].num = i;
 8001dd8:	f8a4 0150 	strh.w	r0, [r4, #336]	; 0x150
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ddc:	f884 0153 	strb.w	r0, [r4, #339]	; 0x153
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001de0:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de4:	e7dc      	b.n	8001da0 <HAL_PCD_Init+0x1b4>
 8001de6:	bf00      	nop

08001de8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001de8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8001dea:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d012      	beq.n	8001e18 <HAL_PCD_Start+0x30>
 8001df2:	4604      	mov	r4, r0
 8001df4:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 8001df6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8001df8:	f884 5290 	strb.w	r5, [r4, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001dfc:	f001 fa82 	bl	8003304 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001e00:	4629      	mov	r1, r5
 8001e02:	4620      	mov	r0, r4
 8001e04:	f003 f898 	bl	8004f38 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001e08:	6820      	ldr	r0, [r4, #0]
 8001e0a:	f002 f8a7 	bl	8003f5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290

  return HAL_OK;
 8001e14:	4618      	mov	r0, r3
}
 8001e16:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001e18:	2002      	movs	r0, #2
}
 8001e1a:	bd38      	pop	{r3, r4, r5, pc}

08001e1c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e20:	4605      	mov	r5, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001e22:	6800      	ldr	r0, [r0, #0]
 8001e24:	f002 f89e 	bl	8003f64 <USB_ReadInterrupts>
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001e28:	f410 4400 	ands.w	r4, r0, #32768	; 0x8000
 8001e2c:	d126      	bne.n	8001e7c <HAL_PCD_IRQHandler+0x60>
    (void)PCD_EP_ISR_Handler(hpcd);

    return;
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e2e:	0542      	lsls	r2, r0, #21
 8001e30:	f100 81b2 	bmi.w	8002198 <HAL_PCD_IRQHandler+0x37c>
    (void)HAL_PCD_SetAddress(hpcd, 0U);

    return;
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e34:	0443      	lsls	r3, r0, #17
 8001e36:	d416      	bmi.n	8001e66 <HAL_PCD_IRQHandler+0x4a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);

    return;
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e38:	0487      	lsls	r7, r0, #18
 8001e3a:	f100 8229 	bmi.w	8002290 <HAL_PCD_IRQHandler+0x474>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);

    return;
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e3e:	04c6      	lsls	r6, r0, #19
 8001e40:	f100 82ec 	bmi.w	800241c <HAL_PCD_IRQHandler+0x600>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);

    return;
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001e44:	0504      	lsls	r4, r0, #20
 8001e46:	d47e      	bmi.n	8001f46 <HAL_PCD_IRQHandler+0x12a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001e48:	0582      	lsls	r2, r0, #22
 8001e4a:	f100 838f 	bmi.w	800256c <HAL_PCD_IRQHandler+0x750>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001e4e:	05c3      	lsls	r3, r0, #23
 8001e50:	d512      	bpl.n	8001e78 <HAL_PCD_IRQHandler+0x5c>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e52:	682a      	ldr	r2, [r5, #0]
 8001e54:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c1b      	lsrs	r3, r3, #16
 8001e60:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44

    return;
 8001e64:	e008      	b.n	8001e78 <HAL_PCD_IRQHandler+0x5c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e66:	682a      	ldr	r2, [r5, #0]
 8001e68:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e70:	041b      	lsls	r3, r3, #16
 8001e72:	0c1b      	lsrs	r3, r3, #16
 8001e74:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8001e78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e7c:	6828      	ldr	r0, [r5, #0]
 8001e7e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001e82:	041a      	lsls	r2, r3, #16
 8001e84:	d5f8      	bpl.n	8001e78 <HAL_PCD_IRQHandler+0x5c>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e86:	f8df 9304 	ldr.w	r9, [pc, #772]	; 800218c <HAL_PCD_IRQHandler+0x370>
 8001e8a:	f8df b304 	ldr.w	fp, [pc, #772]	; 8002190 <HAL_PCD_IRQHandler+0x374>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001e8e:	f8df a304 	ldr.w	sl, [pc, #772]	; 8002194 <HAL_PCD_IRQHandler+0x378>
 8001e92:	e010      	b.n	8001eb6 <HAL_PCD_IRQHandler+0x9a>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e94:	f011 0110 	ands.w	r1, r1, #16
 8001e98:	f000 80f5 	beq.w	8002086 <HAL_PCD_IRQHandler+0x26a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e9c:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e9e:	f411 6400 	ands.w	r4, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ea2:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ea4:	f040 811b 	bne.w	80020de <HAL_PCD_IRQHandler+0x2c2>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ea8:	041b      	lsls	r3, r3, #16
 8001eaa:	f100 8192 	bmi.w	80021d2 <HAL_PCD_IRQHandler+0x3b6>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001eae:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001eb2:	0419      	lsls	r1, r3, #16
 8001eb4:	d5e0      	bpl.n	8001e78 <HAL_PCD_IRQHandler+0x5c>
    wIstr = hpcd->Instance->ISTR;
 8001eb6:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 8001eba:	b2a1      	uxth	r1, r4
    if (epindex == 0U)
 8001ebc:	f014 040f 	ands.w	r4, r4, #15
 8001ec0:	d0e8      	beq.n	8001e94 <HAL_PCD_IRQHandler+0x78>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ec2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001ec6:	ea4f 0884 	mov.w	r8, r4, lsl #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001eca:	041f      	lsls	r7, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ecc:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ece:	f100 8094 	bmi.w	8001ffa <HAL_PCD_IRQHandler+0x1de>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ed2:	0633      	lsls	r3, r6, #24
 8001ed4:	d5eb      	bpl.n	8001eae <HAL_PCD_IRQHandler+0x92>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ed6:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	ea03 0309 	and.w	r3, r3, r9
 8001ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8001ee8:	eb08 0304 	add.w	r3, r8, r4
 8001eec:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8001ef0:	7cd1      	ldrb	r1, [r2, #19]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	2901      	cmp	r1, #1
 8001ef6:	f000 81d6 	beq.w	80022a6 <HAL_PCD_IRQHandler+0x48a>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001efa:	f416 7780 	ands.w	r7, r6, #256	; 0x100
 8001efe:	f040 81fc 	bne.w	80022fa <HAL_PCD_IRQHandler+0x4de>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f02:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8001f06:	7c11      	ldrb	r1, [r2, #16]
 8001f08:	b2a4      	uxth	r4, r4
 8001f0a:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
 8001f0e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8001f12:	f8b4 4404 	ldrh.w	r4, [r4, #1028]	; 0x404
            if (ep->xfer_len > TxPctSize)
 8001f16:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8001f18:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8001f1c:	42a6      	cmp	r6, r4
 8001f1e:	f240 80d8 	bls.w	80020d2 <HAL_PCD_IRQHandler+0x2b6>
              ep->xfer_len -= TxPctSize;
 8001f22:	1b36      	subs	r6, r6, r4
 8001f24:	6296      	str	r6, [r2, #40]	; 0x28
            if (ep->xfer_len == 0U)
 8001f26:	2e00      	cmp	r6, #0
 8001f28:	f000 80d4 	beq.w	80020d4 <HAL_PCD_IRQHandler+0x2b8>
        ep = &hpcd->IN_ep[epindex];
 8001f2c:	f103 0110 	add.w	r1, r3, #16
              ep->xfer_buff += TxPctSize;
 8001f30:	6a53      	ldr	r3, [r2, #36]	; 0x24
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f32:	4429      	add	r1, r5
              ep->xfer_buff += TxPctSize;
 8001f34:	4423      	add	r3, r4
 8001f36:	6253      	str	r3, [r2, #36]	; 0x24
              ep->xfer_count += TxPctSize;
 8001f38:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f3a:	4423      	add	r3, r4
 8001f3c:	62d3      	str	r3, [r2, #44]	; 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f3e:	f001 fcb7 	bl	80038b0 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f42:	6828      	ldr	r0, [r5, #0]
 8001f44:	e7b3      	b.n	8001eae <HAL_PCD_IRQHandler+0x92>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001f46:	682b      	ldr	r3, [r5, #0]
 8001f48:	f8b3 9000 	ldrh.w	r9, [r3]
 8001f4c:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001f50:	f8b3 e008 	ldrh.w	lr, [r3, #8]
 8001f54:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8001f58:	8a1f      	ldrh	r7, [r3, #16]
 8001f5a:	8a9e      	ldrh	r6, [r3, #20]
 8001f5c:	8b1c      	ldrh	r4, [r3, #24]
 8001f5e:	8b99      	ldrh	r1, [r3, #28]
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001f60:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001f64:	fa1f f989 	uxth.w	r9, r9
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001f68:	b292      	uxth	r2, r2
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001f72:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001f76:	fa1f f888 	uxth.w	r8, r8
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	0412      	lsls	r2, r2, #16
 8001f80:	0c12      	lsrs	r2, r2, #16
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001f82:	fa1f fe8e 	uxth.w	lr, lr
 8001f86:	fa1f fc8c 	uxth.w	ip, ip
 8001f8a:	b2bf      	uxth	r7, r7
 8001f8c:	b2b6      	uxth	r6, r6
 8001f8e:	b2a4      	uxth	r4, r4
 8001f90:	b289      	uxth	r1, r1
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001f92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001f96:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001f9a:	0550      	lsls	r0, r2, #21
 8001f9c:	d5fb      	bpl.n	8001f96 <HAL_PCD_IRQHandler+0x17a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f9e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8001fa2:	4628      	mov	r0, r5
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa8:	0412      	lsls	r2, r2, #16
 8001faa:	0c12      	lsrs	r2, r2, #16
 8001fac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001fb0:	f8a3 9000 	strh.w	r9, [r3]
 8001fb4:	f8a3 8004 	strh.w	r8, [r3, #4]
 8001fb8:	f8a3 e008 	strh.w	lr, [r3, #8]
 8001fbc:	f8a3 c00c 	strh.w	ip, [r3, #12]
 8001fc0:	821f      	strh	r7, [r3, #16]
 8001fc2:	829e      	strh	r6, [r3, #20]
 8001fc4:	831c      	strh	r4, [r3, #24]
 8001fc6:	8399      	strh	r1, [r3, #28]
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fc8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001fcc:	b292      	uxth	r2, r2
 8001fce:	f042 0208 	orr.w	r2, r2, #8
 8001fd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001fd6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fde:	0412      	lsls	r2, r2, #16
 8001fe0:	0c12      	lsrs	r2, r2, #16
 8001fe2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001fe6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001fea:	b292      	uxth	r2, r2
 8001fec:	f042 0204 	orr.w	r2, r2, #4
 8001ff0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001ff4:	f002 fec6 	bl	8004d84 <HAL_PCD_SuspendCallback>
    return;
 8001ff8:	e73e      	b.n	8001e78 <HAL_PCD_IRQHandler+0x5c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ffa:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ffe:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 8002002:	eb08 0104 	add.w	r1, r8, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002006:	4013      	ands	r3, r2
 8002008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800200c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 8002010:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002014:	f891 315c 	ldrb.w	r3, [r1, #348]	; 0x15c
 8002018:	2b00      	cmp	r3, #0
 800201a:	f040 8082 	bne.w	8002122 <HAL_PCD_IRQHandler+0x306>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800201e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002022:	f891 2150 	ldrb.w	r2, [r1, #336]	; 0x150
 8002026:	b29b      	uxth	r3, r3
 8002028:	3306      	adds	r3, #6
 800202a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800202e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002032:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002036:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 800203a:	461f      	mov	r7, r3
          if (count != 0U)
 800203c:	2b00      	cmp	r3, #0
 800203e:	f040 820b 	bne.w	8002458 <HAL_PCD_IRQHandler+0x63c>
        ep->xfer_count += count;
 8002042:	eb08 0104 	add.w	r1, r8, r4
 8002046:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
 800204a:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800204e:	00c9      	lsls	r1, r1, #3
 8002050:	443a      	add	r2, r7
 8002052:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        ep->xfer_buff += count;
 8002056:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 800205a:	443a      	add	r2, r7
 800205c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002060:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8002064:	b122      	cbz	r2, 8002070 <HAL_PCD_IRQHandler+0x254>
 8002066:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800206a:	42bb      	cmp	r3, r7
 800206c:	f240 81ba 	bls.w	80023e4 <HAL_PCD_IRQHandler+0x5c8>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002070:	eb08 0304 	add.w	r3, r8, r4
 8002074:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002078:	4628      	mov	r0, r5
 800207a:	f893 1150 	ldrb.w	r1, [r3, #336]	; 0x150
 800207e:	f002 fe57 	bl	8004d30 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002082:	6828      	ldr	r0, [r5, #0]
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002084:	e725      	b.n	8001ed2 <HAL_PCD_IRQHandler+0xb6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002086:	8803      	ldrh	r3, [r0, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	ea03 0309 	and.w	r3, r3, r9
 800208e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002092:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002094:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002098:	7c2a      	ldrb	r2, [r5, #16]
 800209a:	b29b      	uxth	r3, r3
 800209c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80020a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80020a4:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80020a8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ae:	62eb      	str	r3, [r5, #44]	; 0x2c
        ep->xfer_buff += ep->xfer_count;
 80020b0:	4413      	add	r3, r2
 80020b2:	626b      	str	r3, [r5, #36]	; 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80020b4:	4628      	mov	r0, r5
 80020b6:	f002 fe45 	bl	8004d44 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80020ba:	7b6b      	ldrb	r3, [r5, #13]
 80020bc:	b16b      	cbz	r3, 80020da <HAL_PCD_IRQHandler+0x2be>
 80020be:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80020c0:	b95b      	cbnz	r3, 80020da <HAL_PCD_IRQHandler+0x2be>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80020c2:	7b6a      	ldrb	r2, [r5, #13]
 80020c4:	6828      	ldr	r0, [r5, #0]
 80020c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020ca:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80020ce:	736b      	strb	r3, [r5, #13]
 80020d0:	e6ed      	b.n	8001eae <HAL_PCD_IRQHandler+0x92>
 80020d2:	6297      	str	r7, [r2, #40]	; 0x28
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020d4:	4628      	mov	r0, r5
 80020d6:	f002 fe35 	bl	8004d44 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020da:	6828      	ldr	r0, [r5, #0]
 80020dc:	e6e7      	b.n	8001eae <HAL_PCD_IRQHandler+0x92>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020de:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80020e2:	f895 2150 	ldrb.w	r2, [r5, #336]	; 0x150
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80020ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80020f0:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020f4:	f8b5 2156 	ldrh.w	r2, [r5, #342]	; 0x156
 80020f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020fc:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002100:	f505 7126 	add.w	r1, r5, #664	; 0x298
 8002104:	f001 ff44 	bl	8003f90 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002108:	f640 738f 	movw	r3, #3983	; 0xf8f
 800210c:	682a      	ldr	r2, [r5, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800210e:	4628      	mov	r0, r5
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002110:	8811      	ldrh	r1, [r2, #0]
 8002112:	400b      	ands	r3, r1
 8002114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002118:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800211a:	f002 fe01 	bl	8004d20 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800211e:	6828      	ldr	r0, [r5, #0]
 8002120:	e6c5      	b.n	8001eae <HAL_PCD_IRQHandler+0x92>
          if (ep->type == EP_TYPE_BULK)
 8002122:	f891 3153 	ldrb.w	r3, [r1, #339]	; 0x153
 8002126:	2b02      	cmp	r3, #2
 8002128:	f000 81e2 	beq.w	80024f0 <HAL_PCD_IRQHandler+0x6d4>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800212c:	f891 2150 	ldrb.w	r2, [r1, #336]	; 0x150
 8002130:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	0c1b      	lsrs	r3, r3, #16
 8002140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002144:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002148:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800214c:	f891 2150 	ldrb.w	r2, [r1, #336]	; 0x150
 8002150:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002154:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002158:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800215c:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800215e:	f000 8149 	beq.w	80023f4 <HAL_PCD_IRQHandler+0x5d8>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002162:	3302      	adds	r3, #2
 8002164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002168:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800216c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002170:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8002174:	461f      	mov	r7, r3
              if (count != 0U)
 8002176:	2b00      	cmp	r3, #0
 8002178:	f43f af63 	beq.w	8002042 <HAL_PCD_IRQHandler+0x226>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800217c:	f8b1 2158 	ldrh.w	r2, [r1, #344]	; 0x158
 8002180:	f8d1 1164 	ldr.w	r1, [r1, #356]	; 0x164
 8002184:	f001 ff04 	bl	8003f90 <USB_ReadPMA>
 8002188:	e75b      	b.n	8002042 <HAL_PCD_IRQHandler+0x226>
 800218a:	bf00      	nop
 800218c:	ffff8f0f 	.word	0xffff8f0f
 8002190:	ffff8000 	.word	0xffff8000
 8002194:	ffff8fbf 	.word	0xffff8fbf
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002198:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_ResetCallback(hpcd);
 800219a:	4628      	mov	r0, r5
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800219c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80021a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021a4:	041b      	lsls	r3, r3, #16
 80021a6:	0c1b      	lsrs	r3, r3, #16
 80021a8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80021ac:	f002 fdd8 	bl	8004d60 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 80021b0:	f895 3290 	ldrb.w	r3, [r5, #656]	; 0x290
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	f43f ae5f 	beq.w	8001e78 <HAL_PCD_IRQHandler+0x5c>
 80021ba:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021bc:	4621      	mov	r1, r4
 80021be:	6828      	ldr	r0, [r5, #0]
  hpcd->USB_Address = address;
 80021c0:	736c      	strb	r4, [r5, #13]
  __HAL_LOCK(hpcd);
 80021c2:	f885 3290 	strb.w	r3, [r5, #656]	; 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021c6:	f001 fec3 	bl	8003f50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021ca:	f885 4290 	strb.w	r4, [r5, #656]	; 0x290
}
 80021ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021d6:	8802      	ldrh	r2, [r0, #0]
 80021d8:	4013      	ands	r3, r2
 80021da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021de:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021e0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80021e4:	f895 2150 	ldrb.w	r2, [r5, #336]	; 0x150
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80021ee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80021f2:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80021f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021fa:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80021fe:	b193      	cbz	r3, 8002226 <HAL_PCD_IRQHandler+0x40a>
 8002200:	f8d5 1164 	ldr.w	r1, [r5, #356]	; 0x164
 8002204:	b179      	cbz	r1, 8002226 <HAL_PCD_IRQHandler+0x40a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002206:	f8b5 2156 	ldrh.w	r2, [r5, #342]	; 0x156
 800220a:	f001 fec1 	bl	8003f90 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800220e:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
 8002212:	f8d5 216c 	ldr.w	r2, [r5, #364]	; 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002216:	4628      	mov	r0, r5
            ep->xfer_buff += ep->xfer_count;
 8002218:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800221a:	4621      	mov	r1, r4
            ep->xfer_buff += ep->xfer_count;
 800221c:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002220:	f002 fd86 	bl	8004d30 <HAL_PCD_DataOutStageCallback>
 8002224:	6828      	ldr	r0, [r5, #0]
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002226:	8803      	ldrh	r3, [r0, #0]
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002228:	051f      	lsls	r7, r3, #20
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800222a:	b29a      	uxth	r2, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800222c:	f53f ae3f 	bmi.w	8001eae <HAL_PCD_IRQHandler+0x92>
 8002230:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002234:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002238:	f43f ae39 	beq.w	8001eae <HAL_PCD_IRQHandler+0x92>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800223c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002240:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8002244:	b29b      	uxth	r3, r3
 8002246:	5ad1      	ldrh	r1, [r2, r3]
 8002248:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800224c:	52d1      	strh	r1, [r2, r3]
 800224e:	f8d5 1160 	ldr.w	r1, [r5, #352]	; 0x160
 8002252:	293e      	cmp	r1, #62	; 0x3e
 8002254:	f240 8197 	bls.w	8002586 <HAL_PCD_IRQHandler+0x76a>
 8002258:	094c      	lsrs	r4, r1, #5
 800225a:	06ce      	lsls	r6, r1, #27
 800225c:	5ad1      	ldrh	r1, [r2, r3]
 800225e:	bf08      	it	eq
 8002260:	f104 34ff 	addeq.w	r4, r4, #4294967295
 8002264:	b289      	uxth	r1, r1
 8002266:	ea41 2184 	orr.w	r1, r1, r4, lsl #10
 800226a:	ea41 010b 	orr.w	r1, r1, fp
 800226e:	b289      	uxth	r1, r1
 8002270:	52d1      	strh	r1, [r2, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002272:	8803      	ldrh	r3, [r0, #0]
 8002274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227c:	041b      	lsls	r3, r3, #16
 800227e:	0c1b      	lsrs	r3, r3, #16
 8002280:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228c:	8003      	strh	r3, [r0, #0]
 800228e:	e60e      	b.n	8001eae <HAL_PCD_IRQHandler+0x92>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002290:	682a      	ldr	r2, [r5, #0]
 8002292:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800229a:	041b      	lsls	r3, r3, #16
 800229c:	0c1b      	lsrs	r3, r3, #16
 800229e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80022a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ep->xfer_len = 0U;
 80022a6:	2100      	movs	r1, #0
 80022a8:	1c63      	adds	r3, r4, #1
 80022aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022ae:	f845 1033 	str.w	r1, [r5, r3, lsl #3]
          if (ep->doublebuffer != 0U)
 80022b2:	7f13      	ldrb	r3, [r2, #28]
 80022b4:	b1c3      	cbz	r3, 80022e8 <HAL_PCD_IRQHandler+0x4cc>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022b6:	f016 0640 	ands.w	r6, r6, #64	; 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022ba:	7c53      	ldrb	r3, [r2, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022bc:	f040 810d 	bne.w	80024da <HAL_PCD_IRQHandler+0x6be>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f040 81e5 	bne.w	8002690 <HAL_PCD_IRQHandler+0x874>
 80022c6:	7c13      	ldrb	r3, [r2, #16]
 80022c8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80022cc:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 80022d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022d4:	b292      	uxth	r2, r2
 80022d6:	5a99      	ldrh	r1, [r3, r2]
 80022d8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80022dc:	5299      	strh	r1, [r3, r2]
 80022de:	5a99      	ldrh	r1, [r3, r2]
 80022e0:	b289      	uxth	r1, r1
 80022e2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80022e6:	5299      	strh	r1, [r3, r2]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022e8:	4444      	add	r4, r8
 80022ea:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 80022ee:	4628      	mov	r0, r5
 80022f0:	7c21      	ldrb	r1, [r4, #16]
 80022f2:	f002 fd27 	bl	8004d44 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022f6:	6828      	ldr	r0, [r5, #0]
 80022f8:	e5d9      	b.n	8001eae <HAL_PCD_IRQHandler+0x92>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022fa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80022fe:	7c11      	ldrb	r1, [r2, #16]
 8002300:	b29b      	uxth	r3, r3
 8002302:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002306:	f016 0740 	ands.w	r7, r6, #64	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800230a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800230e:	f000 80aa 	beq.w	8002466 <HAL_PCD_IRQHandler+0x64a>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002312:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
    if (ep->xfer_len > TxPctSize)
 8002316:	6a97      	ldr	r7, [r2, #40]	; 0x28
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002318:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxPctSize)
 800231c:	429f      	cmp	r7, r3
 800231e:	f240 813b 	bls.w	8002598 <HAL_PCD_IRQHandler+0x77c>
      ep->xfer_len -= TxPctSize;
 8002322:	1aff      	subs	r7, r7, r3
 8002324:	6297      	str	r7, [r2, #40]	; 0x28
    if (ep->xfer_len == 0U)
 8002326:	2f00      	cmp	r7, #0
 8002328:	f000 8138 	beq.w	800259c <HAL_PCD_IRQHandler+0x780>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800232c:	0476      	lsls	r6, r6, #17
 800232e:	d50d      	bpl.n	800234c <HAL_PCD_IRQHandler+0x530>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002330:	f830 6021 	ldrh.w	r6, [r0, r1, lsl #2]
 8002334:	f426 46e0 	bic.w	r6, r6, #28672	; 0x7000
 8002338:	f026 0670 	bic.w	r6, r6, #112	; 0x70
 800233c:	0436      	lsls	r6, r6, #16
 800233e:	0c36      	lsrs	r6, r6, #16
 8002340:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 8002344:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8002348:	f820 6021 	strh.w	r6, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800234c:	eb08 0c04 	add.w	ip, r8, r4
 8002350:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8002354:	f89c 6034 	ldrb.w	r6, [ip, #52]	; 0x34
 8002358:	2e01      	cmp	r6, #1
 800235a:	f040 80ac 	bne.w	80024b6 <HAL_PCD_IRQHandler+0x69a>
        ep->xfer_buff += TxPctSize;
 800235e:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24
 8002362:	441e      	add	r6, r3
 8002364:	f8cc 6024 	str.w	r6, [ip, #36]	; 0x24
        ep->xfer_count += TxPctSize;
 8002368:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
 800236a:	441f      	add	r7, r3
 800236c:	62d7      	str	r7, [r2, #44]	; 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 800236e:	f8dc 7030 	ldr.w	r7, [ip, #48]	; 0x30
 8002372:	f8dc 2020 	ldr.w	r2, [ip, #32]
 8002376:	4297      	cmp	r7, r2
 8002378:	f0c0 827f 	bcc.w	800287a <HAL_PCD_IRQHandler+0xa5e>
          ep->xfer_len_db -= len;
 800237c:	1abf      	subs	r7, r7, r2
 800237e:	f8cc 7030 	str.w	r7, [ip, #48]	; 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002382:	b293      	uxth	r3, r2
 8002384:	eb08 0704 	add.w	r7, r8, r4
 8002388:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 800238c:	7c7f      	ldrb	r7, [r7, #17]
 800238e:	2f00      	cmp	r7, #0
 8002390:	f040 8267 	bne.w	8002862 <HAL_PCD_IRQHandler+0xa46>
 8002394:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002398:	f201 4704 	addw	r7, r1, #1028	; 0x404
 800239c:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80023a0:	2a3e      	cmp	r2, #62	; 0x3e
 80023a2:	b289      	uxth	r1, r1
 80023a4:	f837 c001 	ldrh.w	ip, [r7, r1]
 80023a8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80023ac:	f827 c001 	strh.w	ip, [r7, r1]
 80023b0:	f240 828a 	bls.w	80028c8 <HAL_PCD_IRQHandler+0xaac>
 80023b4:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 80023b8:	06d2      	lsls	r2, r2, #27
 80023ba:	5a7a      	ldrh	r2, [r7, r1]
 80023bc:	bf08      	it	eq
 80023be:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80023c2:	b292      	uxth	r2, r2
 80023c4:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 80023c8:	ea42 020b 	orr.w	r2, r2, fp
 80023cc:	b292      	uxth	r2, r2
 80023ce:	527a      	strh	r2, [r7, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023d0:	eb08 0204 	add.w	r2, r8, r4
 80023d4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80023d8:	4631      	mov	r1, r6
 80023da:	8b12      	ldrh	r2, [r2, #24]
 80023dc:	f001 fdc8 	bl	8003f70 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80023e0:	6828      	ldr	r0, [r5, #0]
 80023e2:	e068      	b.n	80024b6 <HAL_PCD_IRQHandler+0x69a>
        ep = &hpcd->OUT_ep[epindex];
 80023e4:	f501 71a8 	add.w	r1, r1, #336	; 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023e8:	6828      	ldr	r0, [r5, #0]
 80023ea:	4429      	add	r1, r5
 80023ec:	f001 fa60 	bl	80038b0 <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023f0:	6828      	ldr	r0, [r5, #0]
 80023f2:	e56e      	b.n	8001ed2 <HAL_PCD_IRQHandler+0xb6>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023f4:	3306      	adds	r3, #6
 80023f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80023fa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80023fe:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002402:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8002406:	461f      	mov	r7, r3
              if (count != 0U)
 8002408:	2b00      	cmp	r3, #0
 800240a:	f43f ae1a 	beq.w	8002042 <HAL_PCD_IRQHandler+0x226>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800240e:	f8b1 215a 	ldrh.w	r2, [r1, #346]	; 0x15a
 8002412:	f8d1 1164 	ldr.w	r1, [r1, #356]	; 0x164
 8002416:	f001 fdbb 	bl	8003f90 <USB_ReadPMA>
 800241a:	e612      	b.n	8002042 <HAL_PCD_IRQHandler+0x226>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800241c:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_ResumeCallback(hpcd);
 800241e:	4628      	mov	r0, r5
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002420:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	041b      	lsls	r3, r3, #16
 800242a:	0c1b      	lsrs	r3, r3, #16
 800242c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002430:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002434:	f023 0308 	bic.w	r3, r3, #8
 8002438:	041b      	lsls	r3, r3, #16
 800243a:	0c1b      	lsrs	r3, r3, #16
 800243c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8002440:	f002 fcb0 	bl	8004da4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002444:	682a      	ldr	r2, [r5, #0]
 8002446:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800244a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800244e:	041b      	lsls	r3, r3, #16
 8002450:	0c1b      	lsrs	r3, r3, #16
 8002452:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8002456:	e50f      	b.n	8001e78 <HAL_PCD_IRQHandler+0x5c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002458:	f8b1 2156 	ldrh.w	r2, [r1, #342]	; 0x156
 800245c:	f8d1 1164 	ldr.w	r1, [r1, #356]	; 0x164
 8002460:	f001 fd96 	bl	8003f90 <USB_ReadPMA>
 8002464:	e5ed      	b.n	8002042 <HAL_PCD_IRQHandler+0x226>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002466:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxPctSize)
 800246a:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800246e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8002472:	459c      	cmp	ip, r3
 8002474:	f0c0 80d8 	bcc.w	8002628 <HAL_PCD_IRQHandler+0x80c>
      ep->xfer_len -= TxPctSize;
 8002478:	ebac 0703 	sub.w	r7, ip, r3
 800247c:	6297      	str	r7, [r2, #40]	; 0x28
    if (ep->xfer_len == 0U)
 800247e:	2f00      	cmp	r7, #0
 8002480:	f000 80d3 	beq.w	800262a <HAL_PCD_IRQHandler+0x80e>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002484:	0476      	lsls	r6, r6, #17
 8002486:	d40d      	bmi.n	80024a4 <HAL_PCD_IRQHandler+0x688>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002488:	f830 6021 	ldrh.w	r6, [r0, r1, lsl #2]
 800248c:	f426 46e0 	bic.w	r6, r6, #28672	; 0x7000
 8002490:	f026 0670 	bic.w	r6, r6, #112	; 0x70
 8002494:	0436      	lsls	r6, r6, #16
 8002496:	0c36      	lsrs	r6, r6, #16
 8002498:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 800249c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 80024a0:	f820 6021 	strh.w	r6, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80024a4:	eb08 0c04 	add.w	ip, r8, r4
 80024a8:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 80024ac:	f89c 6034 	ldrb.w	r6, [ip, #52]	; 0x34
 80024b0:	2e01      	cmp	r6, #1
 80024b2:	f000 8198 	beq.w	80027e6 <HAL_PCD_IRQHandler+0x9ca>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80024b6:	4444      	add	r4, r8
 80024b8:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 80024bc:	7c22      	ldrb	r2, [r4, #16]
 80024be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	ea03 030a 	and.w	r3, r3, sl
 80024c8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80024cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  return HAL_OK;
 80024d8:	e4e9      	b.n	8001eae <HAL_PCD_IRQHandler+0x92>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 80e5 	bne.w	80026aa <HAL_PCD_IRQHandler+0x88e>
 80024e0:	7c13      	ldrb	r3, [r2, #16]
 80024e2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80024e6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 80024ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024ee:	e6f1      	b.n	80022d4 <HAL_PCD_IRQHandler+0x4b8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024f0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024f4:	f416 4c80 	ands.w	ip, r6, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024f8:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024fa:	f000 80e3 	beq.w	80026c4 <HAL_PCD_IRQHandler+0x8a8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024fe:	f891 2150 	ldrb.w	r2, [r1, #336]	; 0x150
 8002502:	3302      	adds	r3, #2
 8002504:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002508:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800250c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8002510:	f8d1 c168 	ldr.w	ip, [r1, #360]	; 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002514:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8002518:	459c      	cmp	ip, r3
 800251a:	461f      	mov	r7, r3
 800251c:	f0c0 814e 	bcc.w	80027bc <HAL_PCD_IRQHandler+0x9a0>
      ep->xfer_len -= count;
 8002520:	ebac 0c03 	sub.w	ip, ip, r3
 8002524:	f8c1 c168 	str.w	ip, [r1, #360]	; 0x168
    if (ep->xfer_len == 0U)
 8002528:	f1bc 0f00 	cmp.w	ip, #0
 800252c:	f000 814a 	beq.w	80027c4 <HAL_PCD_IRQHandler+0x9a8>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002530:	0671      	lsls	r1, r6, #25
 8002532:	d50d      	bpl.n	8002550 <HAL_PCD_IRQHandler+0x734>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002534:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8002538:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800253c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002540:	0409      	lsls	r1, r1, #16
 8002542:	0c09      	lsrs	r1, r1, #16
 8002544:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002548:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800254c:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8002550:	b90b      	cbnz	r3, 8002556 <HAL_PCD_IRQHandler+0x73a>
 8002552:	461f      	mov	r7, r3
 8002554:	e575      	b.n	8002042 <HAL_PCD_IRQHandler+0x226>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002556:	eb08 0104 	add.w	r1, r8, r4
 800255a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800255e:	f8b1 2158 	ldrh.w	r2, [r1, #344]	; 0x158
 8002562:	f8d1 1164 	ldr.w	r1, [r1, #356]	; 0x164
 8002566:	f001 fd13 	bl	8003f90 <USB_ReadPMA>
 800256a:	e56a      	b.n	8002042 <HAL_PCD_IRQHandler+0x226>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800256c:	682a      	ldr	r2, [r5, #0]
    HAL_PCD_SOFCallback(hpcd);
 800256e:	4628      	mov	r0, r5
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002570:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	0c1b      	lsrs	r3, r3, #16
 800257c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002580:	f002 fbea 	bl	8004d58 <HAL_PCD_SOFCallback>
    return;
 8002584:	e478      	b.n	8001e78 <HAL_PCD_IRQHandler+0x5c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002586:	2900      	cmp	r1, #0
 8002588:	f040 80d1 	bne.w	800272e <HAL_PCD_IRQHandler+0x912>
 800258c:	5ad1      	ldrh	r1, [r2, r3]
 800258e:	b289      	uxth	r1, r1
 8002590:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002594:	52d1      	strh	r1, [r2, r3]
 8002596:	e66c      	b.n	8002272 <HAL_PCD_IRQHandler+0x456>
 8002598:	2300      	movs	r3, #0
 800259a:	6293      	str	r3, [r2, #40]	; 0x28
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800259c:	eb08 0304 	add.w	r3, r8, r4
 80025a0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80025a4:	7c5b      	ldrb	r3, [r3, #17]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f040 80e0 	bne.w	800276c <HAL_PCD_IRQHandler+0x950>
 80025ac:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80025b0:	010b      	lsls	r3, r1, #4
 80025b2:	f203 4704 	addw	r7, r3, #1028	; 0x404
 80025b6:	b292      	uxth	r2, r2
 80025b8:	4407      	add	r7, r0
 80025ba:	f837 c002 	ldrh.w	ip, [r7, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025c2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80025c6:	f827 c002 	strh.w	ip, [r7, r2]
 80025ca:	f837 c002 	ldrh.w	ip, [r7, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025ce:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025d0:	fa1f fc8c 	uxth.w	ip, ip
 80025d4:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
 80025d8:	f827 c002 	strh.w	ip, [r7, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025dc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80025e0:	b292      	uxth	r2, r2
 80025e2:	5a98      	ldrh	r0, [r3, r2]
 80025e4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80025e8:	5298      	strh	r0, [r3, r2]
 80025ea:	5a98      	ldrh	r0, [r3, r2]
 80025ec:	b280      	uxth	r0, r0
 80025ee:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80025f2:	5298      	strh	r0, [r3, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025f4:	4628      	mov	r0, r5
 80025f6:	f002 fba5 	bl	8004d44 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025fa:	0477      	lsls	r7, r6, #17
 80025fc:	d546      	bpl.n	800268c <HAL_PCD_IRQHandler+0x870>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025fe:	eb08 0304 	add.w	r3, r8, r4
 8002602:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002606:	7c1a      	ldrb	r2, [r3, #16]
 8002608:	6828      	ldr	r0, [r5, #0]
 800260a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800260e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002616:	041b      	lsls	r3, r3, #16
 8002618:	0c1b      	lsrs	r3, r3, #16
 800261a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800261e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002622:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002626:	e746      	b.n	80024b6 <HAL_PCD_IRQHandler+0x69a>
 8002628:	6297      	str	r7, [r2, #40]	; 0x28
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800262a:	eb08 0304 	add.w	r3, r8, r4
 800262e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002632:	7c5b      	ldrb	r3, [r3, #17]
 8002634:	2b00      	cmp	r3, #0
 8002636:	f040 8085 	bne.w	8002744 <HAL_PCD_IRQHandler+0x928>
 800263a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800263e:	010b      	lsls	r3, r1, #4
 8002640:	f203 4704 	addw	r7, r3, #1028	; 0x404
 8002644:	b292      	uxth	r2, r2
 8002646:	4407      	add	r7, r0
 8002648:	f837 c002 	ldrh.w	ip, [r7, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800264c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002650:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002654:	f827 c002 	strh.w	ip, [r7, r2]
 8002658:	f837 c002 	ldrh.w	ip, [r7, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800265c:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800265e:	fa1f fc8c 	uxth.w	ip, ip
 8002662:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
 8002666:	f827 c002 	strh.w	ip, [r7, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800266a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800266e:	b292      	uxth	r2, r2
 8002670:	5a98      	ldrh	r0, [r3, r2]
 8002672:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002676:	5298      	strh	r0, [r3, r2]
 8002678:	5a98      	ldrh	r0, [r3, r2]
 800267a:	b280      	uxth	r0, r0
 800267c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8002680:	5298      	strh	r0, [r3, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002682:	4628      	mov	r0, r5
 8002684:	f002 fb5e 	bl	8004d44 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002688:	0477      	lsls	r7, r6, #17
 800268a:	d5b8      	bpl.n	80025fe <HAL_PCD_IRQHandler+0x7e2>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800268c:	6828      	ldr	r0, [r5, #0]
 800268e:	e712      	b.n	80024b6 <HAL_PCD_IRQHandler+0x69a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002690:	2b01      	cmp	r3, #1
 8002692:	f47f ae29 	bne.w	80022e8 <HAL_PCD_IRQHandler+0x4cc>
 8002696:	7c13      	ldrb	r3, [r2, #16]
 8002698:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800269c:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 80026a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026a4:	b292      	uxth	r2, r2
 80026a6:	529e      	strh	r6, [r3, r2]
 80026a8:	e61e      	b.n	80022e8 <HAL_PCD_IRQHandler+0x4cc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	f47f ae1c 	bne.w	80022e8 <HAL_PCD_IRQHandler+0x4cc>
 80026b0:	7c13      	ldrb	r3, [r2, #16]
 80026b2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80026b6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 80026ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026be:	b292      	uxth	r2, r2
 80026c0:	5299      	strh	r1, [r3, r2]
 80026c2:	e611      	b.n	80022e8 <HAL_PCD_IRQHandler+0x4cc>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026c4:	f891 2150 	ldrb.w	r2, [r1, #336]	; 0x150
 80026c8:	3306      	adds	r3, #6
 80026ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80026ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80026d2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 80026d6:	f8d1 e168 	ldr.w	lr, [r1, #360]	; 0x168
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026da:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 80026de:	459e      	cmp	lr, r3
 80026e0:	461f      	mov	r7, r3
 80026e2:	d358      	bcc.n	8002796 <HAL_PCD_IRQHandler+0x97a>
      ep->xfer_len -= count;
 80026e4:	ebae 0e03 	sub.w	lr, lr, r3
 80026e8:	f8c1 e168 	str.w	lr, [r1, #360]	; 0x168
    if (ep->xfer_len == 0U)
 80026ec:	f1be 0f00 	cmp.w	lr, #0
 80026f0:	d053      	beq.n	800279a <HAL_PCD_IRQHandler+0x97e>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80026f2:	0671      	lsls	r1, r6, #25
 80026f4:	d40d      	bmi.n	8002712 <HAL_PCD_IRQHandler+0x8f6>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026f6:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80026fa:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80026fe:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002702:	0409      	lsls	r1, r1, #16
 8002704:	0c09      	lsrs	r1, r1, #16
 8002706:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800270a:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800270e:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8002712:	2b00      	cmp	r3, #0
 8002714:	f43f af1d 	beq.w	8002552 <HAL_PCD_IRQHandler+0x736>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002718:	eb08 0104 	add.w	r1, r8, r4
 800271c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002720:	f8b1 215a 	ldrh.w	r2, [r1, #346]	; 0x15a
 8002724:	f8d1 1164 	ldr.w	r1, [r1, #356]	; 0x164
 8002728:	f001 fc32 	bl	8003f90 <USB_ReadPMA>
 800272c:	e489      	b.n	8002042 <HAL_PCD_IRQHandler+0x226>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800272e:	084c      	lsrs	r4, r1, #1
 8002730:	07c9      	lsls	r1, r1, #31
 8002732:	5ad1      	ldrh	r1, [r2, r3]
 8002734:	bf48      	it	mi
 8002736:	3401      	addmi	r4, #1
 8002738:	b289      	uxth	r1, r1
 800273a:	ea41 2184 	orr.w	r1, r1, r4, lsl #10
 800273e:	b289      	uxth	r1, r1
 8002740:	52d1      	strh	r1, [r2, r3]
 8002742:	e596      	b.n	8002272 <HAL_PCD_IRQHandler+0x456>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002744:	2b01      	cmp	r3, #1
 8002746:	d19c      	bne.n	8002682 <HAL_PCD_IRQHandler+0x866>
 8002748:	2700      	movs	r7, #0
 800274a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800274e:	010b      	lsls	r3, r1, #4
 8002750:	f203 4c04 	addw	ip, r3, #1028	; 0x404
 8002754:	b292      	uxth	r2, r2
 8002756:	4484      	add	ip, r0
 8002758:	f82c 7002 	strh.w	r7, [ip, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800275c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002760:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002764:	4403      	add	r3, r0
 8002766:	b292      	uxth	r2, r2
 8002768:	529f      	strh	r7, [r3, r2]
 800276a:	e78a      	b.n	8002682 <HAL_PCD_IRQHandler+0x866>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800276c:	2b01      	cmp	r3, #1
 800276e:	f47f af41 	bne.w	80025f4 <HAL_PCD_IRQHandler+0x7d8>
 8002772:	2700      	movs	r7, #0
 8002774:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002778:	010b      	lsls	r3, r1, #4
 800277a:	f203 4c04 	addw	ip, r3, #1028	; 0x404
 800277e:	b292      	uxth	r2, r2
 8002780:	4484      	add	ip, r0
 8002782:	f82c 7002 	strh.w	r7, [ip, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002786:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800278a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800278e:	4403      	add	r3, r0
 8002790:	b292      	uxth	r2, r2
 8002792:	529f      	strh	r7, [r3, r2]
 8002794:	e72e      	b.n	80025f4 <HAL_PCD_IRQHandler+0x7d8>
 8002796:	f8c1 c168 	str.w	ip, [r1, #360]	; 0x168
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800279a:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800279e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80027a2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80027a6:	0409      	lsls	r1, r1, #16
 80027a8:	0c09      	lsrs	r1, r1, #16
 80027aa:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80027ae:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80027b2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80027b6:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 80027ba:	e79a      	b.n	80026f2 <HAL_PCD_IRQHandler+0x8d6>
 80027bc:	f04f 0c00 	mov.w	ip, #0
 80027c0:	f8c1 c168 	str.w	ip, [r1, #360]	; 0x168
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027c4:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80027c8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80027cc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80027d0:	0409      	lsls	r1, r1, #16
 80027d2:	0c09      	lsrs	r1, r1, #16
 80027d4:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80027d8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80027dc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80027e0:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 80027e4:	e6a4      	b.n	8002530 <HAL_PCD_IRQHandler+0x714>
        ep->xfer_buff += TxPctSize;
 80027e6:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24
 80027ea:	441e      	add	r6, r3
 80027ec:	f8cc 6024 	str.w	r6, [ip, #36]	; 0x24
        ep->xfer_count += TxPctSize;
 80027f0:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
 80027f2:	441f      	add	r7, r3
 80027f4:	62d7      	str	r7, [r2, #44]	; 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80027f6:	f8dc 7030 	ldr.w	r7, [ip, #48]	; 0x30
 80027fa:	f8dc 2020 	ldr.w	r2, [ip, #32]
 80027fe:	4297      	cmp	r7, r2
 8002800:	d34b      	bcc.n	800289a <HAL_PCD_IRQHandler+0xa7e>
          ep->xfer_len_db -= len;
 8002802:	1abf      	subs	r7, r7, r2
 8002804:	f8cc 7030 	str.w	r7, [ip, #48]	; 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002808:	b293      	uxth	r3, r2
 800280a:	eb08 0704 	add.w	r7, r8, r4
 800280e:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
 8002812:	7c7f      	ldrb	r7, [r7, #17]
 8002814:	bbb7      	cbnz	r7, 8002884 <HAL_PCD_IRQHandler+0xa68>
 8002816:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800281a:	f201 470c 	addw	r7, r1, #1036	; 0x40c
 800281e:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8002822:	2a3e      	cmp	r2, #62	; 0x3e
 8002824:	b289      	uxth	r1, r1
 8002826:	f837 c001 	ldrh.w	ip, [r7, r1]
 800282a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800282e:	f827 c001 	strh.w	ip, [r7, r1]
 8002832:	d950      	bls.n	80028d6 <HAL_PCD_IRQHandler+0xaba>
 8002834:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8002838:	06d2      	lsls	r2, r2, #27
 800283a:	5a7a      	ldrh	r2, [r7, r1]
 800283c:	bf08      	it	eq
 800283e:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002842:	b292      	uxth	r2, r2
 8002844:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8002848:	ea42 020b 	orr.w	r2, r2, fp
 800284c:	b292      	uxth	r2, r2
 800284e:	527a      	strh	r2, [r7, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002850:	eb08 0204 	add.w	r2, r8, r4
 8002854:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002858:	4631      	mov	r1, r6
 800285a:	8b52      	ldrh	r2, [r2, #26]
 800285c:	f001 fb88 	bl	8003f70 <USB_WritePMA>
 8002860:	e714      	b.n	800268c <HAL_PCD_IRQHandler+0x870>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002862:	2f01      	cmp	r7, #1
 8002864:	f47f adb4 	bne.w	80023d0 <HAL_PCD_IRQHandler+0x5b4>
 8002868:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800286c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002870:	f201 4104 	addw	r1, r1, #1028	; 0x404
 8002874:	b292      	uxth	r2, r2
 8002876:	528b      	strh	r3, [r1, r2]
 8002878:	e5aa      	b.n	80023d0 <HAL_PCD_IRQHandler+0x5b4>
        else if (ep->xfer_len_db == 0U)
 800287a:	b99f      	cbnz	r7, 80028a4 <HAL_PCD_IRQHandler+0xa88>
          ep->xfer_fill_db = 0U;
 800287c:	461a      	mov	r2, r3
 800287e:	f88c 7034 	strb.w	r7, [ip, #52]	; 0x34
 8002882:	e57f      	b.n	8002384 <HAL_PCD_IRQHandler+0x568>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002884:	2f01      	cmp	r7, #1
 8002886:	d1e3      	bne.n	8002850 <HAL_PCD_IRQHandler+0xa34>
 8002888:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800288c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002890:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8002894:	b292      	uxth	r2, r2
 8002896:	528b      	strh	r3, [r1, r2]
 8002898:	e7da      	b.n	8002850 <HAL_PCD_IRQHandler+0xa34>
        else if (ep->xfer_len_db == 0U)
 800289a:	b967      	cbnz	r7, 80028b6 <HAL_PCD_IRQHandler+0xa9a>
          ep->xfer_fill_db = 0U;
 800289c:	461a      	mov	r2, r3
 800289e:	f88c 7034 	strb.w	r7, [ip, #52]	; 0x34
 80028a2:	e7b2      	b.n	800280a <HAL_PCD_IRQHandler+0x9ee>
          ep->xfer_fill_db = 0U;
 80028a4:	f04f 0e00 	mov.w	lr, #0
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028a8:	463a      	mov	r2, r7
 80028aa:	b2bb      	uxth	r3, r7
          ep->xfer_fill_db = 0U;
 80028ac:	f88c e034 	strb.w	lr, [ip, #52]	; 0x34
          ep->xfer_len_db = 0U;
 80028b0:	f8cc e030 	str.w	lr, [ip, #48]	; 0x30
 80028b4:	e566      	b.n	8002384 <HAL_PCD_IRQHandler+0x568>
          ep->xfer_len_db = 0U;
 80028b6:	f04f 0e00 	mov.w	lr, #0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028ba:	463a      	mov	r2, r7
 80028bc:	b2bb      	uxth	r3, r7
          ep->xfer_len_db = 0U;
 80028be:	f8cc e030 	str.w	lr, [ip, #48]	; 0x30
          ep->xfer_fill_db = 0;
 80028c2:	f88c e034 	strb.w	lr, [ip, #52]	; 0x34
 80028c6:	e7a0      	b.n	800280a <HAL_PCD_IRQHandler+0x9ee>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028c8:	b962      	cbnz	r2, 80028e4 <HAL_PCD_IRQHandler+0xac8>
 80028ca:	5a7a      	ldrh	r2, [r7, r1]
 80028cc:	b292      	uxth	r2, r2
 80028ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028d2:	527a      	strh	r2, [r7, r1]
 80028d4:	e57c      	b.n	80023d0 <HAL_PCD_IRQHandler+0x5b4>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028d6:	b992      	cbnz	r2, 80028fe <HAL_PCD_IRQHandler+0xae2>
 80028d8:	5a7a      	ldrh	r2, [r7, r1]
 80028da:	b292      	uxth	r2, r2
 80028dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028e0:	527a      	strh	r2, [r7, r1]
 80028e2:	e7b5      	b.n	8002850 <HAL_PCD_IRQHandler+0xa34>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028e4:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 80028e8:	07d2      	lsls	r2, r2, #31
 80028ea:	5a7a      	ldrh	r2, [r7, r1]
 80028ec:	bf48      	it	mi
 80028ee:	f10c 0c01 	addmi.w	ip, ip, #1
 80028f2:	b292      	uxth	r2, r2
 80028f4:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 80028f8:	b292      	uxth	r2, r2
 80028fa:	527a      	strh	r2, [r7, r1]
 80028fc:	e568      	b.n	80023d0 <HAL_PCD_IRQHandler+0x5b4>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028fe:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8002902:	07d2      	lsls	r2, r2, #31
 8002904:	5a7a      	ldrh	r2, [r7, r1]
 8002906:	bf48      	it	mi
 8002908:	f10c 0c01 	addmi.w	ip, ip, #1
 800290c:	b292      	uxth	r2, r2
 800290e:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 8002912:	b292      	uxth	r2, r2
 8002914:	527a      	strh	r2, [r7, r1]
 8002916:	e79b      	b.n	8002850 <HAL_PCD_IRQHandler+0xa34>

08002918 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002918:	f890 2290 	ldrb.w	r2, [r0, #656]	; 0x290
 800291c:	2a01      	cmp	r2, #1
 800291e:	d00d      	beq.n	800293c <HAL_PCD_SetAddress+0x24>
{
 8002920:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8002922:	2201      	movs	r2, #1
 8002924:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002926:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8002928:	7361      	strb	r1, [r4, #13]
  __HAL_LOCK(hpcd);
 800292a:	f884 2290 	strb.w	r2, [r4, #656]	; 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800292e:	f001 fb0f 	bl	8003f50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002932:	2300      	movs	r3, #0
 8002934:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  return HAL_OK;
 8002938:	4618      	mov	r0, r3
}
 800293a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800293c:	2002      	movs	r0, #2
}
 800293e:	4770      	bx	lr

08002940 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002940:	f001 0c07 	and.w	ip, r1, #7
{
 8002944:	b510      	push	{r4, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8002946:	0609      	lsls	r1, r1, #24
{
 8002948:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294a:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 800294e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8002952:	d41f      	bmi.n	8002994 <HAL_PCD_EP_Open+0x54>
    ep->is_in = 0U;
 8002954:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002958:	f500 71a8 	add.w	r1, r0, #336	; 0x150
    ep->is_in = 0U;
 800295c:	4420      	add	r0, r4
 800295e:	f880 e151 	strb.w	lr, [r0, #337]	; 0x151
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002962:	4421      	add	r1, r4
  if (ep_type == EP_TYPE_BULK)
 8002964:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8002966:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8002968:	bf08      	it	eq
 800296a:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800296c:	f881 c000 	strb.w	ip, [r1]
    ep->data_pid_start = 0U;
 8002970:	bf08      	it	eq
 8002972:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 8002974:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8002976:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
 800297a:	2b01      	cmp	r3, #1
 800297c:	d013      	beq.n	80029a6 <HAL_PCD_EP_Open+0x66>
 800297e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002980:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002982:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002986:	f000 fce9 	bl	800335c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800298a:	2300      	movs	r3, #0
 800298c:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  return ret;
 8002990:	4618      	mov	r0, r3
}
 8002992:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8002994:	f04f 0e01 	mov.w	lr, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002998:	f100 0110 	add.w	r1, r0, #16
    ep->is_in = 1U;
 800299c:	4420      	add	r0, r4
 800299e:	f880 e011 	strb.w	lr, [r0, #17]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029a2:	4421      	add	r1, r4
    ep->is_in = 1U;
 80029a4:	e7de      	b.n	8002964 <HAL_PCD_EP_Open+0x24>
  __HAL_LOCK(hpcd);
 80029a6:	2002      	movs	r0, #2
}
 80029a8:	bd10      	pop	{r4, pc}
 80029aa:	bf00      	nop

080029ac <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80029ac:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 80029b4:	0609      	lsls	r1, r1, #24
{
 80029b6:	b510      	push	{r4, lr}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
{
 80029bc:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80029be:	d416      	bmi.n	80029ee <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029c0:	f502 71a8 	add.w	r1, r2, #336	; 0x150
 80029c4:	4401      	add	r1, r0
    ep->is_in = 0U;
 80029c6:	4402      	add	r2, r0
 80029c8:	2000      	movs	r0, #0
 80029ca:	f882 0151 	strb.w	r0, [r2, #337]	; 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ce:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80029d0:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d015      	beq.n	8002a04 <HAL_PCD_EP_Close+0x58>
 80029d8:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029da:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80029dc:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029e0:	f000 fe86 	bl	80036f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029e4:	2300      	movs	r3, #0
 80029e6:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  return HAL_OK;
 80029ea:	4618      	mov	r0, r3
}
 80029ec:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ee:	f102 0110 	add.w	r1, r2, #16
 80029f2:	4401      	add	r1, r0
    ep->is_in = 1U;
 80029f4:	4402      	add	r2, r0
 80029f6:	2001      	movs	r0, #1
 80029f8:	7450      	strb	r0, [r2, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029fa:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80029fc:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d1e9      	bne.n	80029d8 <HAL_PCD_EP_Close+0x2c>
 8002a04:	2002      	movs	r0, #2
}
 8002a06:	bd10      	pop	{r4, pc}

08002a08 <HAL_PCD_EP_Receive>:
{
 8002a08:	b510      	push	{r4, lr}
  ep->xfer_count = 0U;
 8002a0a:	2400      	movs	r4, #0
 8002a0c:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8002a10:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 8002a14:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep->xfer_len = len;
 8002a18:	e9cc 2359 	strd	r2, r3, [ip, #356]	; 0x164
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a1c:	6800      	ldr	r0, [r0, #0]
 8002a1e:	f50c 71a8 	add.w	r1, ip, #336	; 0x150
  ep->xfer_count = 0U;
 8002a22:	f8cc 416c 	str.w	r4, [ip, #364]	; 0x16c
  ep->is_in = 0U;
 8002a26:	f88c 4151 	strb.w	r4, [ip, #337]	; 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a2a:	f88c e150 	strb.w	lr, [ip, #336]	; 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a2e:	f000 ff3f 	bl	80038b0 <USB_EPStartXfer>
}
 8002a32:	4620      	mov	r0, r4
 8002a34:	bd10      	pop	{r4, pc}
 8002a36:	bf00      	nop

08002a38 <HAL_PCD_EP_Transmit>:
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a38:	f001 0107 	and.w	r1, r1, #7
{
 8002a3c:	b538      	push	{r3, r4, r5, lr}
  ep->xfer_buff = pBuf;
 8002a3e:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 8002a42:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
  ep->xfer_fill_db = 1U;
 8002a46:	2501      	movs	r5, #1
  ep->xfer_count = 0U;
 8002a48:	2400      	movs	r4, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a4a:	f88c 1010 	strb.w	r1, [ip, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a4e:	4661      	mov	r1, ip
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a50:	6800      	ldr	r0, [r0, #0]
  ep->xfer_buff = pBuf;
 8002a52:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
  ep->xfer_len = len;
 8002a56:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  ep->xfer_len_db = len;
 8002a5a:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  ep->xfer_fill_db = 1U;
 8002a5e:	f88c 5034 	strb.w	r5, [ip, #52]	; 0x34
  ep->xfer_count = 0U;
 8002a62:	f8cc 402c 	str.w	r4, [ip, #44]	; 0x2c
  ep->is_in = 1U;
 8002a66:	f88c 5011 	strb.w	r5, [ip, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a6a:	3110      	adds	r1, #16
 8002a6c:	f000 ff20 	bl	80038b0 <USB_EPStartXfer>
}
 8002a70:	4620      	mov	r0, r4
 8002a72:	bd38      	pop	{r3, r4, r5, pc}

08002a74 <HAL_PCD_EP_SetStall>:
{
 8002a74:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a76:	7903      	ldrb	r3, [r0, #4]
 8002a78:	f001 0507 	and.w	r5, r1, #7
 8002a7c:	42ab      	cmp	r3, r5
 8002a7e:	d330      	bcc.n	8002ae2 <HAL_PCD_EP_SetStall+0x6e>
  if ((0x80U & ep_addr) == 0x80U)
 8002a80:	060b      	lsls	r3, r1, #24
 8002a82:	4604      	mov	r4, r0
 8002a84:	d41b      	bmi.n	8002abe <HAL_PCD_EP_SetStall+0x4a>
    ep = &hpcd->OUT_ep[ep_addr];
 8002a86:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002a8a:	00c9      	lsls	r1, r1, #3
 8002a8c:	f501 72a8 	add.w	r2, r1, #336	; 0x150
    ep->is_in = 0U;
 8002a90:	1843      	adds	r3, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 8002a92:	1881      	adds	r1, r0, r2
    ep->is_in = 0U;
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
  ep->is_stall = 1U;
 8002a9a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a9c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8002a9e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002aa0:	f894 2290 	ldrb.w	r2, [r4, #656]	; 0x290
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d01a      	beq.n	8002ade <HAL_PCD_EP_SetStall+0x6a>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002aa8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002aaa:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002aae:	f001 f9d7 	bl	8003e60 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ab2:	b1c5      	cbz	r5, 8002ae6 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  return HAL_OK;
 8002aba:	4618      	mov	r0, r3
}
 8002abc:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8002abe:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ac0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 8002aca:	4403      	add	r3, r0
 8002acc:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 8002ace:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad0:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad2:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8002ad4:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002ad6:	f894 2290 	ldrb.w	r2, [r4, #656]	; 0x290
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d1e4      	bne.n	8002aa8 <HAL_PCD_EP_SetStall+0x34>
 8002ade:	2002      	movs	r0, #2
}
 8002ae0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002ae2:	2001      	movs	r0, #1
}
 8002ae4:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ae6:	6820      	ldr	r0, [r4, #0]
 8002ae8:	f504 7126 	add.w	r1, r4, #664	; 0x298
 8002aec:	f001 fa3e 	bl	8003f6c <USB_EP0_OutStart>
 8002af0:	e7e0      	b.n	8002ab4 <HAL_PCD_EP_SetStall+0x40>
 8002af2:	bf00      	nop

08002af4 <HAL_PCD_EP_ClrStall>:
{
 8002af4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002af6:	7902      	ldrb	r2, [r0, #4]
 8002af8:	f001 030f 	and.w	r3, r1, #15
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d32f      	bcc.n	8002b60 <HAL_PCD_EP_ClrStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8002b00:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b04:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  if ((0x80U & ep_addr) == 0x80U)
 8002b08:	0609      	lsls	r1, r1, #24
 8002b0a:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b0c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8002b10:	d417      	bmi.n	8002b42 <HAL_PCD_EP_ClrStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b12:	f502 71a8 	add.w	r1, r2, #336	; 0x150
 8002b16:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002b18:	4402      	add	r2, r0
  ep->is_stall = 0U;
 8002b1a:	2500      	movs	r5, #0
    ep->is_in = 0U;
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f882 0151 	strb.w	r0, [r2, #337]	; 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b22:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8002b24:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8002b26:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d016      	beq.n	8002b5c <HAL_PCD_EP_ClrStall+0x68>
 8002b2e:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b30:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002b32:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b36:	f001 f9bb 	bl	8003eb0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b3a:	f884 5290 	strb.w	r5, [r4, #656]	; 0x290
  return HAL_OK;
 8002b3e:	4628      	mov	r0, r5
}
 8002b40:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b42:	f102 0110 	add.w	r1, r2, #16
 8002b46:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002b48:	4402      	add	r2, r0
  ep->is_stall = 0U;
 8002b4a:	2500      	movs	r5, #0
    ep->is_in = 1U;
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	7450      	strb	r0, [r2, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b50:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8002b52:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8002b54:	f894 3290 	ldrb.w	r3, [r4, #656]	; 0x290
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d1e8      	bne.n	8002b2e <HAL_PCD_EP_ClrStall+0x3a>
 8002b5c:	2002      	movs	r0, #2
}
 8002b5e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002b60:	2001      	movs	r0, #1
}
 8002b62:	bd38      	pop	{r3, r4, r5, pc}

08002b64 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b64:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002b68:	d00b      	beq.n	8002b82 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b6a:	f001 0107 	and.w	r1, r1, #7
 8002b6e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002b72:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8002b76:	3010      	adds	r0, #16
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b78:	b95a      	cbnz	r2, 8002b92 <HAL_PCDEx_PMAConfig+0x2e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b7a:	80c3      	strh	r3, [r0, #6]
 8002b7c:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8002b7e:	2000      	movs	r0, #0
 8002b80:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8002b82:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002b86:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8002b8a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
  if (ep_kind == PCD_SNG_BUF)
 8002b8e:	2a00      	cmp	r2, #0
 8002b90:	d0f3      	beq.n	8002b7a <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 8002b92:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b94:	6083      	str	r3, [r0, #8]
 8002b96:	7302      	strb	r2, [r0, #12]
}
 8002b98:	2000      	movs	r0, #0
 8002b9a:	4770      	bx	lr

08002b9c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	f000 81b6 	beq.w	8002f0e <HAL_RCC_OscConfig+0x372>
{
 8002ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba6:	6803      	ldr	r3, [r0, #0]
 8002ba8:	4604      	mov	r4, r0
 8002baa:	07dd      	lsls	r5, r3, #31
{
 8002bac:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bae:	d535      	bpl.n	8002c1c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb0:	499a      	ldr	r1, [pc, #616]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002bb2:	684a      	ldr	r2, [r1, #4]
 8002bb4:	f002 020c 	and.w	r2, r2, #12
 8002bb8:	2a04      	cmp	r2, #4
 8002bba:	f000 80ef 	beq.w	8002d9c <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bbe:	684a      	ldr	r2, [r1, #4]
 8002bc0:	f002 020c 	and.w	r2, r2, #12
 8002bc4:	2a08      	cmp	r2, #8
 8002bc6:	f000 80e5 	beq.w	8002d94 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bca:	6863      	ldr	r3, [r4, #4]
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd0:	d010      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x58>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 810c 	beq.w	8002df0 <HAL_RCC_OscConfig+0x254>
 8002bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bdc:	f000 8182 	beq.w	8002ee4 <HAL_RCC_OscConfig+0x348>
 8002be0:	4b8e      	ldr	r3, [pc, #568]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	e004      	b.n	8002bfe <HAL_RCC_OscConfig+0x62>
 8002bf4:	4a89      	ldr	r2, [pc, #548]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002bf6:	6813      	ldr	r3, [r2, #0]
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7fe fa87 	bl	8001110 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4e86      	ldr	r6, [pc, #536]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8002c04:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	e005      	b.n	8002c14 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c08:	f7fe fa82 	bl	8001110 <HAL_GetTick>
 8002c0c:	1b40      	subs	r0, r0, r5
 8002c0e:	2864      	cmp	r0, #100	; 0x64
 8002c10:	f200 80ea 	bhi.w	8002de8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c14:	6833      	ldr	r3, [r6, #0]
 8002c16:	039a      	lsls	r2, r3, #14
 8002c18:	d5f6      	bpl.n	8002c08 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	079f      	lsls	r7, r3, #30
 8002c1e:	d528      	bpl.n	8002c72 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c20:	4a7e      	ldr	r2, [pc, #504]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c22:	6851      	ldr	r1, [r2, #4]
 8002c24:	f011 0f0c 	tst.w	r1, #12
 8002c28:	f000 808d 	beq.w	8002d46 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c2c:	6851      	ldr	r1, [r2, #4]
 8002c2e:	f001 010c 	and.w	r1, r1, #12
 8002c32:	2908      	cmp	r1, #8
 8002c34:	f000 8083 	beq.w	8002d3e <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c38:	6923      	ldr	r3, [r4, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8118 	beq.w	8002e70 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c40:	2201      	movs	r2, #1
 8002c42:	4b77      	ldr	r3, [pc, #476]	; (8002e20 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c44:	4e75      	ldr	r6, [pc, #468]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8002c46:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c48:	f7fe fa62 	bl	8001110 <HAL_GetTick>
 8002c4c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4e:	e005      	b.n	8002c5c <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c50:	f7fe fa5e 	bl	8001110 <HAL_GetTick>
 8002c54:	1b40      	subs	r0, r0, r5
 8002c56:	2802      	cmp	r0, #2
 8002c58:	f200 80c6 	bhi.w	8002de8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5c:	6833      	ldr	r3, [r6, #0]
 8002c5e:	0798      	lsls	r0, r3, #30
 8002c60:	d5f6      	bpl.n	8002c50 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	6833      	ldr	r3, [r6, #0]
 8002c64:	6962      	ldr	r2, [r4, #20]
 8002c66:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002c6a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002c6e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	071a      	lsls	r2, r3, #28
 8002c74:	d41f      	bmi.n	8002cb6 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c76:	075d      	lsls	r5, r3, #29
 8002c78:	d542      	bpl.n	8002d00 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7a:	4b68      	ldr	r3, [pc, #416]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c7c:	69da      	ldr	r2, [r3, #28]
 8002c7e:	00d0      	lsls	r0, r2, #3
 8002c80:	d57d      	bpl.n	8002d7e <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8002c82:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4e67      	ldr	r6, [pc, #412]	; (8002e24 <HAL_RCC_OscConfig+0x288>)
 8002c86:	6833      	ldr	r3, [r6, #0]
 8002c88:	05d9      	lsls	r1, r3, #23
 8002c8a:	f140 809d 	bpl.w	8002dc8 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8e:	68e3      	ldr	r3, [r4, #12]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	f000 80fe 	beq.w	8002e92 <HAL_RCC_OscConfig+0x2f6>
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80ca 	beq.w	8002e30 <HAL_RCC_OscConfig+0x294>
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	4b5f      	ldr	r3, [pc, #380]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002ca0:	6a1a      	ldr	r2, [r3, #32]
 8002ca2:	f000 812c 	beq.w	8002efe <HAL_RCC_OscConfig+0x362>
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	621a      	str	r2, [r3, #32]
 8002cac:	6a1a      	ldr	r2, [r3, #32]
 8002cae:	f022 0204 	bic.w	r2, r2, #4
 8002cb2:	621a      	str	r2, [r3, #32]
 8002cb4:	e0f2      	b.n	8002e9c <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cb6:	69a3      	ldr	r3, [r4, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d04f      	beq.n	8002d5c <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	4b58      	ldr	r3, [pc, #352]	; (8002e20 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc0:	4e56      	ldr	r6, [pc, #344]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8002cc2:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fa23 	bl	8001110 <HAL_GetTick>
 8002cca:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ccc:	e005      	b.n	8002cda <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cce:	f7fe fa1f 	bl	8001110 <HAL_GetTick>
 8002cd2:	1b40      	subs	r0, r0, r5
 8002cd4:	2802      	cmp	r0, #2
 8002cd6:	f200 8087 	bhi.w	8002de8 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cda:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002cdc:	079b      	lsls	r3, r3, #30
 8002cde:	d5f6      	bpl.n	8002cce <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ce0:	4b51      	ldr	r3, [pc, #324]	; (8002e28 <HAL_RCC_OscConfig+0x28c>)
 8002ce2:	4a52      	ldr	r2, [pc, #328]	; (8002e2c <HAL_RCC_OscConfig+0x290>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	0a5b      	lsrs	r3, r3, #9
 8002cec:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002cee:	bf00      	nop
  }
  while (Delay --);
 8002cf0:	9b01      	ldr	r3, [sp, #4]
 8002cf2:	1e5a      	subs	r2, r3, #1
 8002cf4:	9201      	str	r2, [sp, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f9      	bne.n	8002cee <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	075d      	lsls	r5, r3, #29
 8002cfe:	d4bc      	bmi.n	8002c7a <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d00:	69e0      	ldr	r0, [r4, #28]
 8002d02:	b1c0      	cbz	r0, 8002d36 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d04:	4d45      	ldr	r5, [pc, #276]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d06:	686b      	ldr	r3, [r5, #4]
 8002d08:	f003 030c 	and.w	r3, r3, #12
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	f000 80d8 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8002d12:	2200      	movs	r2, #0
 8002d14:	4b42      	ldr	r3, [pc, #264]	; (8002e20 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d16:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002d18:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1a:	f000 80fa 	beq.w	8002f12 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8002d1e:	f7fe f9f7 	bl	8001110 <HAL_GetTick>
 8002d22:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d24:	e004      	b.n	8002d30 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d26:	f7fe f9f3 	bl	8001110 <HAL_GetTick>
 8002d2a:	1b00      	subs	r0, r0, r4
 8002d2c:	2802      	cmp	r0, #2
 8002d2e:	d85b      	bhi.n	8002de8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	019b      	lsls	r3, r3, #6
 8002d34:	d4f7      	bmi.n	8002d26 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8002d36:	2000      	movs	r0, #0
}
 8002d38:	b002      	add	sp, #8
 8002d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d3e:	6852      	ldr	r2, [r2, #4]
 8002d40:	03d6      	lsls	r6, r2, #15
 8002d42:	f53f af79 	bmi.w	8002c38 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	4a35      	ldr	r2, [pc, #212]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	0795      	lsls	r5, r2, #30
 8002d4c:	d530      	bpl.n	8002db0 <HAL_RCC_OscConfig+0x214>
 8002d4e:	6922      	ldr	r2, [r4, #16]
 8002d50:	2a01      	cmp	r2, #1
 8002d52:	d02d      	beq.n	8002db0 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8002d54:	2001      	movs	r0, #1
}
 8002d56:	b002      	add	sp, #8
 8002d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002d5c:	4a30      	ldr	r2, [pc, #192]	; (8002e20 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5e:	4e2f      	ldr	r6, [pc, #188]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8002d60:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002d64:	f7fe f9d4 	bl	8001110 <HAL_GetTick>
 8002d68:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6a:	e004      	b.n	8002d76 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d6c:	f7fe f9d0 	bl	8001110 <HAL_GetTick>
 8002d70:	1b40      	subs	r0, r0, r5
 8002d72:	2802      	cmp	r0, #2
 8002d74:	d838      	bhi.n	8002de8 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d76:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002d78:	079f      	lsls	r7, r3, #30
 8002d7a:	d4f7      	bmi.n	8002d6c <HAL_RCC_OscConfig+0x1d0>
 8002d7c:	e7bd      	b.n	8002cfa <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8002d80:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d86:	61da      	str	r2, [r3, #28]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8002d92:	e777      	b.n	8002c84 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d94:	684a      	ldr	r2, [r1, #4]
 8002d96:	03d0      	lsls	r0, r2, #15
 8002d98:	f57f af17 	bpl.w	8002bca <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	0391      	lsls	r1, r2, #14
 8002da2:	f57f af3b 	bpl.w	8002c1c <HAL_RCC_OscConfig+0x80>
 8002da6:	6862      	ldr	r2, [r4, #4]
 8002da8:	2a00      	cmp	r2, #0
 8002daa:	f47f af37 	bne.w	8002c1c <HAL_RCC_OscConfig+0x80>
 8002dae:	e7d1      	b.n	8002d54 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db0:	491a      	ldr	r1, [pc, #104]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002db2:	6960      	ldr	r0, [r4, #20]
 8002db4:	680a      	ldr	r2, [r1, #0]
 8002db6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002dba:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002dbe:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc0:	071a      	lsls	r2, r3, #28
 8002dc2:	f57f af58 	bpl.w	8002c76 <HAL_RCC_OscConfig+0xda>
 8002dc6:	e776      	b.n	8002cb6 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dc8:	6833      	ldr	r3, [r6, #0]
 8002dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dce:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002dd0:	f7fe f99e 	bl	8001110 <HAL_GetTick>
 8002dd4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	6833      	ldr	r3, [r6, #0]
 8002dd8:	05da      	lsls	r2, r3, #23
 8002dda:	f53f af58 	bmi.w	8002c8e <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dde:	f7fe f997 	bl	8001110 <HAL_GetTick>
 8002de2:	1bc0      	subs	r0, r0, r7
 8002de4:	2864      	cmp	r0, #100	; 0x64
 8002de6:	d9f6      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8002de8:	2003      	movs	r0, #3
}
 8002dea:	b002      	add	sp, #8
 8002dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df0:	4d0a      	ldr	r5, [pc, #40]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002df2:	682b      	ldr	r3, [r5, #0]
 8002df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df8:	602b      	str	r3, [r5, #0]
 8002dfa:	682b      	ldr	r3, [r5, #0]
 8002dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e02:	f7fe f985 	bl	8001110 <HAL_GetTick>
 8002e06:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e08:	e004      	b.n	8002e14 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0a:	f7fe f981 	bl	8001110 <HAL_GetTick>
 8002e0e:	1b80      	subs	r0, r0, r6
 8002e10:	2864      	cmp	r0, #100	; 0x64
 8002e12:	d8e9      	bhi.n	8002de8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e14:	682b      	ldr	r3, [r5, #0]
 8002e16:	039b      	lsls	r3, r3, #14
 8002e18:	d4f7      	bmi.n	8002e0a <HAL_RCC_OscConfig+0x26e>
 8002e1a:	e6fe      	b.n	8002c1a <HAL_RCC_OscConfig+0x7e>
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	42420000 	.word	0x42420000
 8002e24:	40007000 	.word	0x40007000
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e30:	4e50      	ldr	r6, [pc, #320]	; (8002f74 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e36:	6a33      	ldr	r3, [r6, #32]
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6233      	str	r3, [r6, #32]
 8002e3e:	6a33      	ldr	r3, [r6, #32]
 8002e40:	f023 0304 	bic.w	r3, r3, #4
 8002e44:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8002e46:	f7fe f963 	bl	8001110 <HAL_GetTick>
 8002e4a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4c:	e004      	b.n	8002e58 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fe f95f 	bl	8001110 <HAL_GetTick>
 8002e52:	1bc0      	subs	r0, r0, r7
 8002e54:	4540      	cmp	r0, r8
 8002e56:	d8c7      	bhi.n	8002de8 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e58:	6a33      	ldr	r3, [r6, #32]
 8002e5a:	0798      	lsls	r0, r3, #30
 8002e5c:	d4f7      	bmi.n	8002e4e <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8002e5e:	2d00      	cmp	r5, #0
 8002e60:	f43f af4e 	beq.w	8002d00 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e64:	4a43      	ldr	r2, [pc, #268]	; (8002f74 <HAL_RCC_OscConfig+0x3d8>)
 8002e66:	69d3      	ldr	r3, [r2, #28]
 8002e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	61d3      	str	r3, [r2, #28]
 8002e6e:	e747      	b.n	8002d00 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8002e70:	4a41      	ldr	r2, [pc, #260]	; (8002f78 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	4e40      	ldr	r6, [pc, #256]	; (8002f74 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8002e74:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002e76:	f7fe f94b 	bl	8001110 <HAL_GetTick>
 8002e7a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7c:	e004      	b.n	8002e88 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7fe f947 	bl	8001110 <HAL_GetTick>
 8002e82:	1b40      	subs	r0, r0, r5
 8002e84:	2802      	cmp	r0, #2
 8002e86:	d8af      	bhi.n	8002de8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e88:	6833      	ldr	r3, [r6, #0]
 8002e8a:	0799      	lsls	r1, r3, #30
 8002e8c:	d4f7      	bmi.n	8002e7e <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	e6ef      	b.n	8002c72 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e92:	4a38      	ldr	r2, [pc, #224]	; (8002f74 <HAL_RCC_OscConfig+0x3d8>)
 8002e94:	6a13      	ldr	r3, [r2, #32]
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8002e9c:	f7fe f938 	bl	8001110 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002ea4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea6:	4f33      	ldr	r7, [pc, #204]	; (8002f74 <HAL_RCC_OscConfig+0x3d8>)
 8002ea8:	e004      	b.n	8002eb4 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eaa:	f7fe f931 	bl	8001110 <HAL_GetTick>
 8002eae:	1b80      	subs	r0, r0, r6
 8002eb0:	4540      	cmp	r0, r8
 8002eb2:	d899      	bhi.n	8002de8 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	079b      	lsls	r3, r3, #30
 8002eb8:	d5f7      	bpl.n	8002eaa <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8002eba:	2d00      	cmp	r5, #0
 8002ebc:	f43f af20 	beq.w	8002d00 <HAL_RCC_OscConfig+0x164>
 8002ec0:	e7d0      	b.n	8002e64 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec2:	2801      	cmp	r0, #1
 8002ec4:	f43f af38 	beq.w	8002d38 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8002ec8:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	6a22      	ldr	r2, [r4, #32]
 8002ecc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002ed0:	4291      	cmp	r1, r2
 8002ed2:	f47f af3f 	bne.w	8002d54 <HAL_RCC_OscConfig+0x1b8>
 8002ed6:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ed8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8002edc:	1a18      	subs	r0, r3, r0
 8002ede:	bf18      	it	ne
 8002ee0:	2001      	movne	r0, #1
 8002ee2:	e729      	b.n	8002d38 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ee8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e67f      	b.n	8002bfe <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efe:	f042 0204 	orr.w	r2, r2, #4
 8002f02:	621a      	str	r2, [r3, #32]
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	621a      	str	r2, [r3, #32]
 8002f0c:	e7c6      	b.n	8002e9c <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8002f0e:	2001      	movs	r0, #1
}
 8002f10:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8002f12:	f7fe f8fd 	bl	8001110 <HAL_GetTick>
 8002f16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f18:	e005      	b.n	8002f26 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1a:	f7fe f8f9 	bl	8001110 <HAL_GetTick>
 8002f1e:	1b80      	subs	r0, r0, r6
 8002f20:	2802      	cmp	r0, #2
 8002f22:	f63f af61 	bhi.w	8002de8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f26:	682b      	ldr	r3, [r5, #0]
 8002f28:	0199      	lsls	r1, r3, #6
 8002f2a:	d4f6      	bmi.n	8002f1a <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f2c:	6a23      	ldr	r3, [r4, #32]
 8002f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f32:	d105      	bne.n	8002f40 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f34:	686a      	ldr	r2, [r5, #4]
 8002f36:	68a1      	ldr	r1, [r4, #8]
 8002f38:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f40:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f42:	4d0c      	ldr	r5, [pc, #48]	; (8002f74 <HAL_RCC_OscConfig+0x3d8>)
 8002f44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002f46:	686a      	ldr	r2, [r5, #4]
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8002f4e:	490a      	ldr	r1, [pc, #40]	; (8002f78 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f50:	4313      	orrs	r3, r2
 8002f52:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f54:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002f56:	f7fe f8db 	bl	8001110 <HAL_GetTick>
 8002f5a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f5c:	e005      	b.n	8002f6a <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5e:	f7fe f8d7 	bl	8001110 <HAL_GetTick>
 8002f62:	1b00      	subs	r0, r0, r4
 8002f64:	2802      	cmp	r0, #2
 8002f66:	f63f af3f 	bhi.w	8002de8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f6a:	682b      	ldr	r3, [r5, #0]
 8002f6c:	019a      	lsls	r2, r3, #6
 8002f6e:	d5f6      	bpl.n	8002f5e <HAL_RCC_OscConfig+0x3c2>
 8002f70:	e6e1      	b.n	8002d36 <HAL_RCC_OscConfig+0x19a>
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	42420000 	.word	0x42420000

08002f7c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	f000 80a1 	beq.w	80030c4 <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f82:	4a56      	ldr	r2, [pc, #344]	; (80030dc <HAL_RCC_ClockConfig+0x160>)
{
 8002f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	6813      	ldr	r3, [r2, #0]
 8002f8a:	4604      	mov	r4, r0
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	428b      	cmp	r3, r1
 8002f92:	460d      	mov	r5, r1
 8002f94:	d20c      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	6813      	ldr	r3, [r2, #0]
 8002f98:	f023 0307 	bic.w	r3, r3, #7
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa0:	6813      	ldr	r3, [r2, #0]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	428b      	cmp	r3, r1
 8002fa8:	d002      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002faa:	2001      	movs	r0, #1
}
 8002fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	079e      	lsls	r6, r3, #30
 8002fb4:	d514      	bpl.n	8002fe0 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb6:	0758      	lsls	r0, r3, #29
 8002fb8:	d504      	bpl.n	8002fc4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fba:	4949      	ldr	r1, [pc, #292]	; (80030e0 <HAL_RCC_ClockConfig+0x164>)
 8002fbc:	684a      	ldr	r2, [r1, #4]
 8002fbe:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002fc2:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc4:	0719      	lsls	r1, r3, #28
 8002fc6:	d504      	bpl.n	8002fd2 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc8:	4945      	ldr	r1, [pc, #276]	; (80030e0 <HAL_RCC_ClockConfig+0x164>)
 8002fca:	684a      	ldr	r2, [r1, #4]
 8002fcc:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8002fd0:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd2:	4943      	ldr	r1, [pc, #268]	; (80030e0 <HAL_RCC_ClockConfig+0x164>)
 8002fd4:	68a0      	ldr	r0, [r4, #8]
 8002fd6:	684a      	ldr	r2, [r1, #4]
 8002fd8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002fdc:	4302      	orrs	r2, r0
 8002fde:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe0:	07da      	lsls	r2, r3, #31
 8002fe2:	d520      	bpl.n	8003026 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe4:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b3e      	ldr	r3, [pc, #248]	; (80030e0 <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe8:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fec:	d06c      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fee:	2a02      	cmp	r2, #2
 8002ff0:	d065      	beq.n	80030be <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	079e      	lsls	r6, r3, #30
 8002ff4:	d5d9      	bpl.n	8002faa <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff6:	4e3a      	ldr	r6, [pc, #232]	; (80030e0 <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ffc:	6873      	ldr	r3, [r6, #4]
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	4313      	orrs	r3, r2
 8003004:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003006:	f7fe f883 	bl	8001110 <HAL_GetTick>
 800300a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300c:	e004      	b.n	8003018 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300e:	f7fe f87f 	bl	8001110 <HAL_GetTick>
 8003012:	1bc0      	subs	r0, r0, r7
 8003014:	4540      	cmp	r0, r8
 8003016:	d85a      	bhi.n	80030ce <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003018:	6873      	ldr	r3, [r6, #4]
 800301a:	6862      	ldr	r2, [r4, #4]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003024:	d1f3      	bne.n	800300e <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003026:	4a2d      	ldr	r2, [pc, #180]	; (80030dc <HAL_RCC_ClockConfig+0x160>)
 8003028:	6813      	ldr	r3, [r2, #0]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	42ab      	cmp	r3, r5
 8003030:	d909      	bls.n	8003046 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	6813      	ldr	r3, [r2, #0]
 8003034:	f023 0307 	bic.w	r3, r3, #7
 8003038:	432b      	orrs	r3, r5
 800303a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800303c:	6813      	ldr	r3, [r2, #0]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	42ab      	cmp	r3, r5
 8003044:	d1b1      	bne.n	8002faa <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	0758      	lsls	r0, r3, #29
 800304a:	d506      	bpl.n	800305a <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800304c:	4924      	ldr	r1, [pc, #144]	; (80030e0 <HAL_RCC_ClockConfig+0x164>)
 800304e:	68e0      	ldr	r0, [r4, #12]
 8003050:	684a      	ldr	r2, [r1, #4]
 8003052:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003056:	4302      	orrs	r2, r0
 8003058:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305a:	0719      	lsls	r1, r3, #28
 800305c:	d507      	bpl.n	800306e <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800305e:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <HAL_RCC_ClockConfig+0x164>)
 8003060:	6921      	ldr	r1, [r4, #16]
 8003062:	6853      	ldr	r3, [r2, #4]
 8003064:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003068:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800306c:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 800306e:	491c      	ldr	r1, [pc, #112]	; (80030e0 <HAL_RCC_ClockConfig+0x164>)
 8003070:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003072:	f002 030c 	and.w	r3, r2, #12
 8003076:	2b08      	cmp	r3, #8
 8003078:	d010      	beq.n	800309c <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800307c:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <HAL_RCC_ClockConfig+0x164>)
 800307e:	481a      	ldr	r0, [pc, #104]	; (80030e8 <HAL_RCC_ClockConfig+0x16c>)
 8003080:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8003082:	491a      	ldr	r1, [pc, #104]	; (80030ec <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003084:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003088:	5c80      	ldrb	r0, [r0, r2]
 800308a:	4a19      	ldr	r2, [pc, #100]	; (80030f0 <HAL_RCC_ClockConfig+0x174>)
 800308c:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 800308e:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003090:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8003092:	f7fd fffb 	bl	800108c <HAL_InitTick>
  return HAL_OK;
 8003096:	2000      	movs	r0, #0
}
 8003098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800309c:	4815      	ldr	r0, [pc, #84]	; (80030f4 <HAL_RCC_ClockConfig+0x178>)
 800309e:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030a2:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030a4:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030a6:	d514      	bpl.n	80030d2 <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030a8:	480e      	ldr	r0, [pc, #56]	; (80030e4 <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030aa:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030ac:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030b0:	4911      	ldr	r1, [pc, #68]	; (80030f8 <HAL_RCC_ClockConfig+0x17c>)
 80030b2:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80030b6:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80030bc:	e7de      	b.n	800307c <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030be:	019f      	lsls	r7, r3, #6
 80030c0:	d499      	bmi.n	8002ff6 <HAL_RCC_ClockConfig+0x7a>
 80030c2:	e772      	b.n	8002faa <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80030c4:	2001      	movs	r0, #1
}
 80030c6:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c8:	039b      	lsls	r3, r3, #14
 80030ca:	d494      	bmi.n	8002ff6 <HAL_RCC_ClockConfig+0x7a>
 80030cc:	e76d      	b.n	8002faa <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80030ce:	2003      	movs	r0, #3
 80030d0:	e76c      	b.n	8002fac <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030d2:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <HAL_RCC_ClockConfig+0x180>)
 80030d4:	fb02 f303 	mul.w	r3, r2, r3
 80030d8:	e7d0      	b.n	800307c <HAL_RCC_ClockConfig+0x100>
 80030da:	bf00      	nop
 80030dc:	40022000 	.word	0x40022000
 80030e0:	40021000 	.word	0x40021000
 80030e4:	007a1200 	.word	0x007a1200
 80030e8:	08004f9c 	.word	0x08004f9c
 80030ec:	20000008 	.word	0x20000008
 80030f0:	20000000 	.word	0x20000000
 80030f4:	08004fb4 	.word	0x08004fb4
 80030f8:	08004fc4 	.word	0x08004fc4
 80030fc:	003d0900 	.word	0x003d0900

08003100 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003102:	4a05      	ldr	r2, [pc, #20]	; (8003118 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4905      	ldr	r1, [pc, #20]	; (800311c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003108:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800310c:	5ccb      	ldrb	r3, [r1, r3]
 800310e:	6810      	ldr	r0, [r2, #0]
}
 8003110:	40d8      	lsrs	r0, r3
 8003112:	4770      	bx	lr
 8003114:	40021000 	.word	0x40021000
 8003118:	20000000 	.word	0x20000000
 800311c:	08004fac 	.word	0x08004fac

08003120 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003124:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003126:	6800      	ldr	r0, [r0, #0]
{
 8003128:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800312a:	07c1      	lsls	r1, r0, #31
 800312c:	d52c      	bpl.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312e:	4b3a      	ldr	r3, [pc, #232]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	00d2      	lsls	r2, r2, #3
 8003134:	d53f      	bpl.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003136:	4d39      	ldr	r5, [pc, #228]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 8003138:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313a:	682b      	ldr	r3, [r5, #0]
 800313c:	05df      	lsls	r7, r3, #23
 800313e:	d548      	bpl.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003140:	4d35      	ldr	r5, [pc, #212]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003142:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003144:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003148:	d011      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800314a:	6861      	ldr	r1, [r4, #4]
 800314c:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8003150:	429a      	cmp	r2, r3
 8003152:	d00d      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003154:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003156:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003158:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800315a:	4a31      	ldr	r2, [pc, #196]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800315c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003160:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003164:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003168:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800316a:	07d9      	lsls	r1, r3, #31
 800316c:	d444      	bmi.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316e:	6861      	ldr	r1, [r4, #4]
 8003170:	4a29      	ldr	r2, [pc, #164]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003172:	6a13      	ldr	r3, [r2, #32]
 8003174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003178:	430b      	orrs	r3, r1
 800317a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800317c:	b11e      	cbz	r6, 8003186 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317e:	69d3      	ldr	r3, [r2, #28]
 8003180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003184:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003186:	6820      	ldr	r0, [r4, #0]
 8003188:	0783      	lsls	r3, r0, #30
 800318a:	d506      	bpl.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800318c:	4922      	ldr	r1, [pc, #136]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800318e:	68a3      	ldr	r3, [r4, #8]
 8003190:	684a      	ldr	r2, [r1, #4]
 8003192:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003196:	431a      	orrs	r2, r3
 8003198:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800319a:	f010 0010 	ands.w	r0, r0, #16
 800319e:	d007      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031a0:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031a2:	4a1d      	ldr	r2, [pc, #116]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80031a4:	68e1      	ldr	r1, [r4, #12]
 80031a6:	6853      	ldr	r3, [r2, #4]
 80031a8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6053      	str	r3, [r2, #4]
}
 80031b0:	b002      	add	sp, #8
 80031b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b6:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b8:	4d18      	ldr	r5, [pc, #96]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031be:	61da      	str	r2, [r3, #28]
 80031c0:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 80031c2:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	682b      	ldr	r3, [r5, #0]
 80031ce:	05df      	lsls	r7, r3, #23
 80031d0:	d4b6      	bmi.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031d2:	682b      	ldr	r3, [r5, #0]
 80031d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80031da:	f7fd ff99 	bl	8001110 <HAL_GetTick>
 80031de:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	682b      	ldr	r3, [r5, #0]
 80031e2:	05d8      	lsls	r0, r3, #23
 80031e4:	d4ac      	bmi.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e6:	f7fd ff93 	bl	8001110 <HAL_GetTick>
 80031ea:	1bc3      	subs	r3, r0, r7
 80031ec:	2b64      	cmp	r3, #100	; 0x64
 80031ee:	d9f7      	bls.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80031f0:	2003      	movs	r0, #3
}
 80031f2:	b002      	add	sp, #8
 80031f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 80031f8:	f7fd ff8a 	bl	8001110 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003200:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003202:	e004      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003204:	f7fd ff84 	bl	8001110 <HAL_GetTick>
 8003208:	1bc0      	subs	r0, r0, r7
 800320a:	4540      	cmp	r0, r8
 800320c:	d8f0      	bhi.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320e:	6a2b      	ldr	r3, [r5, #32]
 8003210:	079a      	lsls	r2, r3, #30
 8003212:	d5f7      	bpl.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8003214:	e7ab      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	40007000 	.word	0x40007000
 8003220:	42420000 	.word	0x42420000

08003224 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003224:	2802      	cmp	r0, #2
{
 8003226:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8003228:	d005      	beq.n	8003236 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 800322a:	2810      	cmp	r0, #16
 800322c:	d026      	beq.n	800327c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800322e:	2801      	cmp	r0, #1
 8003230:	d00c      	beq.n	800324c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
  uint32_t temp_reg = 0U, frequency = 0U;
 8003232:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8003234:	bd08      	pop	{r3, pc}
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003236:	f7ff ff63 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 800323a:	4b28      	ldr	r3, [pc, #160]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003242:	3301      	adds	r3, #1
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800324a:	bd08      	pop	{r3, pc}
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800324c:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 8003250:	4922      	ldr	r1, [pc, #136]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003252:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003254:	401a      	ands	r2, r3
 8003256:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800325a:	d02f      	beq.n	80032bc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800325c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003264:	d02d      	beq.n	80032c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800326a:	d1e2      	bne.n	8003232 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
        frequency = HSE_VALUE / 128U;
 800326c:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003270:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8003272:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003276:	bf18      	it	ne
 8003278:	4618      	movne	r0, r3
}
 800327a:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 800327c:	4b17      	ldr	r3, [pc, #92]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800327e:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003286:	d0d5      	beq.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003288:	4815      	ldr	r0, [pc, #84]	; (80032e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800328a:	f3c2 4183 	ubfx	r1, r2, #18, #4
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800328e:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003290:	5c40      	ldrb	r0, [r0, r1]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003292:	d51e      	bpl.n	80032d2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003298:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800329c:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 80032a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80032a4:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	025b      	lsls	r3, r3, #9
 80032ae:	d4c1      	bmi.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 80032b0:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 80032b2:	0040      	lsls	r0, r0, #1
 80032b4:	fba3 3000 	umull	r3, r0, r3, r0
 80032b8:	0840      	lsrs	r0, r0, #1
}
 80032ba:	bd08      	pop	{r3, pc}
        frequency = LSE_VALUE;
 80032bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
 80032c0:	bd08      	pop	{r3, pc}
        frequency = LSI_VALUE;
 80032c2:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80032c6:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 80032c8:	f010 0002 	ands.w	r0, r0, #2
 80032cc:	bf18      	it	ne
 80032ce:	4618      	movne	r0, r3
}
 80032d0:	bd08      	pop	{r3, pc}
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032d2:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 80032d4:	fb03 f000 	mul.w	r0, r3, r0
 80032d8:	e7e6      	b.n	80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000
 80032e0:	08004fc8 	.word	0x08004fc8
 80032e4:	08004fd8 	.word	0x08004fd8
 80032e8:	007a1200 	.word	0x007a1200
 80032ec:	aaaaaaab 	.word	0xaaaaaaab
 80032f0:	003d0900 	.word	0x003d0900

080032f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80032f4:	b084      	sub	sp, #16
 80032f6:	a804      	add	r0, sp, #16
 80032f8:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80032fc:	2000      	movs	r0, #0
 80032fe:	b004      	add	sp, #16
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop

08003304 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003304:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003306:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003308:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800330c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
}
 8003310:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)winterruptmask;
 8003312:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 8003316:	4770      	bx	lr

08003318 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003318:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800331a:	f244 02ff 	movw	r2, #16639	; 0x40ff
 800331e:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40

  return HAL_OK;
}
 8003322:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003324:	400a      	ands	r2, r1
 8003326:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 800332a:	4770      	bx	lr

0800332c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800332c:	2000      	movs	r0, #0
 800332e:	4770      	bx	lr

08003330 <USB_DevInit>:
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003330:	f04f 0c00 	mov.w	ip, #0
{
 8003334:	b510      	push	{r4, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	ac04      	add	r4, sp, #16
 800333a:	e904 000e 	stmdb	r4, {r1, r2, r3}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800333e:	f04f 0e01 	mov.w	lr, #1
{
 8003342:	4603      	mov	r3, r0

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8003344:	4660      	mov	r0, ip
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003346:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
  USBx->CNTR = 0U;
 800334a:	f8a3 c040 	strh.w	ip, [r3, #64]	; 0x40
  USBx->ISTR = 0U;
 800334e:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8003352:	f8a3 c050 	strh.w	ip, [r3, #80]	; 0x50
}
 8003356:	b004      	add	sp, #16
 8003358:	bd10      	pop	{r4, pc}
 800335a:	bf00      	nop

0800335c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800335c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800335e:	780a      	ldrb	r2, [r1, #0]
{
 8003360:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003362:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8003366:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800336a:	f420 40ec 	bic.w	r0, r0, #30208	; 0x7600
 800336e:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8003372:	0400      	lsls	r0, r0, #16
 8003374:	0c00      	lsrs	r0, r0, #16
  switch (ep->type)
 8003376:	f1be 0f03 	cmp.w	lr, #3
 800337a:	f200 819f 	bhi.w	80036bc <USB_ActivateEndpoint+0x360>
 800337e:	e8df f00e 	tbb	[pc, lr]
 8003382:	cecb      	.short	0xcecb
 8003384:	0283      	.short	0x0283
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003386:	f440 60c0 	orr.w	r0, r0, #1536	; 0x600
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800338a:	f248 0c80 	movw	ip, #32896	; 0x8080
 800338e:	ea40 000c 	orr.w	r0, r0, ip
 8003392:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003396:	f833 0022 	ldrh.w	r0, [r3, r2, lsl #2]
 800339a:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 800339e:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 80033a2:	0400      	lsls	r0, r0, #16
 80033a4:	0c00      	lsrs	r0, r0, #16
 80033a6:	4310      	orrs	r0, r2
 80033a8:	ea4c 0000 	orr.w	r0, ip, r0
 80033ac:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 80033b0:	7b08      	ldrb	r0, [r1, #12]
 80033b2:	2800      	cmp	r0, #0
 80033b4:	d07a      	beq.n	80034ac <USB_ActivateEndpoint+0x150>
 80033b6:	2000      	movs	r0, #0
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80033b8:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 80033bc:	f42c 4ce2 	bic.w	ip, ip, #28928	; 0x7100
 80033c0:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 80033c4:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 80033c8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80033cc:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
 80033d0:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 80033d4:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80033d8:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80033dc:	890d      	ldrh	r5, [r1, #8]
 80033de:	eb03 1602 	add.w	r6, r3, r2, lsl #4
 80033e2:	b2a4      	uxth	r4, r4
 80033e4:	086d      	lsrs	r5, r5, #1
 80033e6:	4434      	add	r4, r6
 80033e8:	006d      	lsls	r5, r5, #1
 80033ea:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
 80033ee:	894c      	ldrh	r4, [r1, #10]
 80033f0:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 80033f4:	0864      	lsrs	r4, r4, #1
 80033f6:	fa1f fc8c 	uxth.w	ip, ip
 80033fa:	44b4      	add	ip, r6
 80033fc:	0064      	lsls	r4, r4, #1
 80033fe:	f8ac 4408 	strh.w	r4, [ip, #1032]	; 0x408

    if (ep->is_in == 0U)
 8003402:	7849      	ldrb	r1, [r1, #1]
 8003404:	2900      	cmp	r1, #0
 8003406:	f040 80e5 	bne.w	80035d4 <USB_ActivateEndpoint+0x278>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800340a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800340e:	044e      	lsls	r6, r1, #17
 8003410:	d50d      	bpl.n	800342e <USB_ActivateEndpoint+0xd2>
 8003412:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003416:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800341a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800341e:	0409      	lsls	r1, r1, #16
 8003420:	0c09      	lsrs	r1, r1, #16
 8003422:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8003426:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800342a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800342e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003432:	064d      	lsls	r5, r1, #25
 8003434:	d50d      	bpl.n	8003452 <USB_ActivateEndpoint+0xf6>
 8003436:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800343a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800343e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003442:	0409      	lsls	r1, r1, #16
 8003444:	0c09      	lsrs	r1, r1, #16
 8003446:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800344a:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800344e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003452:	f248 0480 	movw	r4, #32896	; 0x8080
 8003456:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800345a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800345e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003462:	0409      	lsls	r1, r1, #16
 8003464:	0c09      	lsrs	r1, r1, #16
 8003466:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800346a:	4321      	orrs	r1, r4
 800346c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003470:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003474:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003478:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800347c:	0409      	lsls	r1, r1, #16
 800347e:	0c09      	lsrs	r1, r1, #16
 8003480:	4321      	orrs	r1, r4
 8003482:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8003486:	bd70      	pop	{r4, r5, r6, pc}
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003488:	f248 0680 	movw	r6, #32896	; 0x8080
 800348c:	4330      	orrs	r0, r6
 800348e:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003492:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003496:	4d95      	ldr	r5, [pc, #596]	; (80036ec <USB_ActivateEndpoint+0x390>)
 8003498:	b2a4      	uxth	r4, r4
 800349a:	402c      	ands	r4, r5
 800349c:	4314      	orrs	r4, r2
 800349e:	4334      	orrs	r4, r6
 80034a0:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 80034a4:	7b08      	ldrb	r0, [r1, #12]
 80034a6:	2800      	cmp	r0, #0
 80034a8:	f040 80ee 	bne.w	8003688 <USB_ActivateEndpoint+0x32c>
    if (ep->is_in != 0U)
 80034ac:	784c      	ldrb	r4, [r1, #1]
 80034ae:	2c00      	cmp	r4, #0
 80034b0:	d049      	beq.n	8003546 <USB_ActivateEndpoint+0x1ea>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80034b2:	88c9      	ldrh	r1, [r1, #6]
 80034b4:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80034b8:	0849      	lsrs	r1, r1, #1
 80034ba:	eb03 1502 	add.w	r5, r3, r2, lsl #4
 80034be:	0049      	lsls	r1, r1, #1
 80034c0:	b2a4      	uxth	r4, r4
 80034c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034c6:	5329      	strh	r1, [r5, r4]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034c8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80034cc:	0649      	lsls	r1, r1, #25
 80034ce:	d50d      	bpl.n	80034ec <USB_ActivateEndpoint+0x190>
 80034d0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80034d4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80034d8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80034dc:	0409      	lsls	r1, r1, #16
 80034de:	0c09      	lsrs	r1, r1, #16
 80034e0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80034e4:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80034e8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80034ec:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80034f0:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80034f4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80034f8:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80034fc:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8003500:	ea4f 4111 	mov.w	r1, r1, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 8003504:	d018      	beq.n	8003538 <USB_ActivateEndpoint+0x1dc>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003506:	f081 0120 	eor.w	r1, r1, #32
 800350a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800350e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003512:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8003516:	bd70      	pop	{r4, r5, r6, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8003518:	f440 7000 	orr.w	r0, r0, #512	; 0x200
      break;
 800351c:	e735      	b.n	800338a <USB_ActivateEndpoint+0x2e>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800351e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
      break;
 8003522:	e732      	b.n	800338a <USB_ActivateEndpoint+0x2e>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003524:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003528:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800352c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003530:	0409      	lsls	r1, r1, #16
 8003532:	0c09      	lsrs	r1, r1, #16
 8003534:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8003538:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800353c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003540:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8003544:	bd70      	pop	{r4, r5, r6, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003546:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800354a:	88cd      	ldrh	r5, [r1, #6]
 800354c:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8003550:	b2a4      	uxth	r4, r4
 8003552:	086d      	lsrs	r5, r5, #1
 8003554:	4464      	add	r4, ip
 8003556:	006d      	lsls	r5, r5, #1
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003558:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800355a:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800355e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003562:	2e3e      	cmp	r6, #62	; 0x3e
 8003564:	b289      	uxth	r1, r1
 8003566:	4461      	add	r1, ip
 8003568:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800356c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003570:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 8003574:	d876      	bhi.n	8003664 <USB_ActivateEndpoint+0x308>
 8003576:	2e00      	cmp	r6, #0
 8003578:	f040 8092 	bne.w	80036a0 <USB_ActivateEndpoint+0x344>
 800357c:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 8003580:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8003584:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003588:	b2a4      	uxth	r4, r4
 800358a:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800358e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003592:	0449      	lsls	r1, r1, #17
 8003594:	d50d      	bpl.n	80035b2 <USB_ActivateEndpoint+0x256>
 8003596:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800359a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800359e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80035a2:	0409      	lsls	r1, r1, #16
 80035a4:	0c09      	lsrs	r1, r1, #16
 80035a6:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80035aa:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80035ae:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 80035b2:	2a00      	cmp	r2, #0
 80035b4:	d1b6      	bne.n	8003524 <USB_ActivateEndpoint+0x1c8>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80035b6:	881a      	ldrh	r2, [r3, #0]
 80035b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035c0:	0412      	lsls	r2, r2, #16
 80035c2:	0c12      	lsrs	r2, r2, #16
 80035c4:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80035c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035d0:	801a      	strh	r2, [r3, #0]
}
 80035d2:	bd70      	pop	{r4, r5, r6, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035d4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80035d8:	044c      	lsls	r4, r1, #17
 80035da:	d50d      	bpl.n	80035f8 <USB_ActivateEndpoint+0x29c>
 80035dc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80035e0:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80035e4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80035e8:	0409      	lsls	r1, r1, #16
 80035ea:	0c09      	lsrs	r1, r1, #16
 80035ec:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80035f0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80035f4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035f8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80035fc:	0649      	lsls	r1, r1, #25
 80035fe:	d50d      	bpl.n	800361c <USB_ActivateEndpoint+0x2c0>
 8003600:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8003604:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003608:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800360c:	0409      	lsls	r1, r1, #16
 800360e:	0c09      	lsrs	r1, r1, #16
 8003610:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003614:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8003618:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800361c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8003620:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003624:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8003628:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800362c:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8003630:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8003634:	bf18      	it	ne
 8003636:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800363a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800363e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003642:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003646:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800364a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800364e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003652:	0409      	lsls	r1, r1, #16
 8003654:	0c09      	lsrs	r1, r1, #16
 8003656:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800365a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800365e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8003662:	bd70      	pop	{r4, r5, r6, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003664:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 8003668:	0975      	lsrs	r5, r6, #5
 800366a:	06f6      	lsls	r6, r6, #27
 800366c:	bf08      	it	eq
 800366e:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8003672:	b2a4      	uxth	r4, r4
 8003674:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8003678:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800367c:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003680:	b2a4      	uxth	r4, r4
 8003682:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 8003686:	e782      	b.n	800358e <USB_ActivateEndpoint+0x232>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003688:	f833 0022 	ldrh.w	r0, [r3, r2, lsl #2]
 800368c:	b280      	uxth	r0, r0
 800368e:	4028      	ands	r0, r5
 8003690:	f440 4001 	orr.w	r0, r0, #33024	; 0x8100
 8003694:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003698:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]
 800369c:	2000      	movs	r0, #0
 800369e:	e69b      	b.n	80033d8 <USB_ActivateEndpoint+0x7c>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80036a0:	07f4      	lsls	r4, r6, #31
 80036a2:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 80036a6:	ea4f 0556 	mov.w	r5, r6, lsr #1
 80036aa:	bf48      	it	mi
 80036ac:	3501      	addmi	r5, #1
 80036ae:	b2a4      	uxth	r4, r4
 80036b0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 80036b4:	b2a4      	uxth	r4, r4
 80036b6:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 80036ba:	e768      	b.n	800358e <USB_ActivateEndpoint+0x232>
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80036bc:	f248 0480 	movw	r4, #32896	; 0x8080
 80036c0:	4320      	orrs	r0, r4
 80036c2:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80036c6:	f833 0022 	ldrh.w	r0, [r3, r2, lsl #2]
 80036ca:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 80036ce:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 80036d2:	0400      	lsls	r0, r0, #16
 80036d4:	0c00      	lsrs	r0, r0, #16
 80036d6:	4310      	orrs	r0, r2
 80036d8:	4320      	orrs	r0, r4
 80036da:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 80036de:	7b08      	ldrb	r0, [r1, #12]
 80036e0:	b908      	cbnz	r0, 80036e6 <USB_ActivateEndpoint+0x38a>
 80036e2:	2001      	movs	r0, #1
 80036e4:	e6e2      	b.n	80034ac <USB_ActivateEndpoint+0x150>
 80036e6:	2001      	movs	r0, #1
 80036e8:	e666      	b.n	80033b8 <USB_ActivateEndpoint+0x5c>
 80036ea:	bf00      	nop
 80036ec:	ffff8f8f 	.word	0xffff8f8f

080036f0 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80036f0:	7b0b      	ldrb	r3, [r1, #12]
 80036f2:	b9cb      	cbnz	r3, 8003728 <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 80036f4:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036f6:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80b1 	beq.w	8003860 <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003702:	0659      	lsls	r1, r3, #25
 8003704:	f100 80c5 	bmi.w	8003892 <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003708:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800370c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003714:	041b      	lsls	r3, r3, #16
 8003716:	0c1b      	lsrs	r3, r3, #16
 8003718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003720:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003724:	2000      	movs	r0, #0
 8003726:	4770      	bx	lr
    if (ep->is_in == 0U)
 8003728:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800372a:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 800372c:	2b00      	cmp	r3, #0
 800372e:	d14b      	bne.n	80037c8 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003730:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003734:	0459      	lsls	r1, r3, #17
 8003736:	d50d      	bpl.n	8003754 <USB_DeactivateEndpoint+0x64>
 8003738:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800373c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	0c1b      	lsrs	r3, r3, #16
 8003748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800374c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003750:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003754:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003758:	065b      	lsls	r3, r3, #25
 800375a:	d50d      	bpl.n	8003778 <USB_DeactivateEndpoint+0x88>
 800375c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003768:	041b      	lsls	r3, r3, #16
 800376a:	0c1b      	lsrs	r3, r3, #16
 800376c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003770:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003774:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003778:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 800377c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003780:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003788:	041b      	lsls	r3, r3, #16
 800378a:	0c1b      	lsrs	r3, r3, #16
 800378c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003790:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003794:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003798:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800379c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a4:	041b      	lsls	r3, r3, #16
 80037a6:	0c1b      	lsrs	r3, r3, #16
 80037a8:	430b      	orrs	r3, r1
 80037aa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ba:	041b      	lsls	r3, r3, #16
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	430b      	orrs	r3, r1
 80037c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80037c4:	2000      	movs	r0, #0
 80037c6:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037cc:	0459      	lsls	r1, r3, #17
 80037ce:	d50d      	bpl.n	80037ec <USB_DeactivateEndpoint+0xfc>
 80037d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	0c1b      	lsrs	r3, r3, #16
 80037e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037f0:	065b      	lsls	r3, r3, #25
 80037f2:	d50d      	bpl.n	8003810 <USB_DeactivateEndpoint+0x120>
 80037f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003800:	041b      	lsls	r3, r3, #16
 8003802:	0c1b      	lsrs	r3, r3, #16
 8003804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003808:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800380c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003810:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8003814:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003820:	041b      	lsls	r3, r3, #16
 8003822:	0c1b      	lsrs	r3, r3, #16
 8003824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003830:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800383c:	041b      	lsls	r3, r3, #16
 800383e:	0c1b      	lsrs	r3, r3, #16
 8003840:	430b      	orrs	r3, r1
 8003842:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003846:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800384a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800384e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003852:	041b      	lsls	r3, r3, #16
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	430b      	orrs	r3, r1
 8003858:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800385c:	2000      	movs	r0, #0
 800385e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003860:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003864:	045b      	lsls	r3, r3, #17
 8003866:	d50d      	bpl.n	8003884 <USB_DeactivateEndpoint+0x194>
 8003868:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800386c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003874:	041b      	lsls	r3, r3, #16
 8003876:	0c1b      	lsrs	r3, r3, #16
 8003878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800387c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003880:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003884:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003888:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800388c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003890:	e740      	b.n	8003714 <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003892:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800389a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389e:	041b      	lsls	r3, r3, #16
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038aa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80038ae:	e72b      	b.n	8003708 <USB_DeactivateEndpoint+0x18>

080038b0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80038b4:	784b      	ldrb	r3, [r1, #1]
{
 80038b6:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	f000 808b 	beq.w	80039d4 <USB_EPStartXfer+0x124>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80038be:	7b08      	ldrb	r0, [r1, #12]
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d04c      	beq.n	800395e <USB_EPStartXfer+0xae>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80038c4:	78c8      	ldrb	r0, [r1, #3]
 80038c6:	2802      	cmp	r0, #2
 80038c8:	f000 811a 	beq.w	8003b00 <USB_EPStartXfer+0x250>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80038cc:	2801      	cmp	r0, #1
 80038ce:	f040 80f2 	bne.w	8003ab6 <USB_EPStartXfer+0x206>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80038d2:	6988      	ldr	r0, [r1, #24]
 80038d4:	690c      	ldr	r4, [r1, #16]
 80038d6:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 80038d8:	bf94      	ite	ls
 80038da:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 80038dc:	1b05      	subhi	r5, r0, r4
 80038de:	618d      	str	r5, [r1, #24]
 80038e0:	bf88      	it	hi
 80038e2:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f040 8108 	bne.w	8003afa <USB_EPStartXfer+0x24a>
 80038ea:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 80038ee:	780b      	ldrb	r3, [r1, #0]
 80038f0:	f202 4504 	addw	r5, r2, #1028	; 0x404
 80038f4:	b2a4      	uxth	r4, r4
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	442c      	add	r4, r5
 80038fa:	5ae5      	ldrh	r5, [r4, r3]
 80038fc:	283e      	cmp	r0, #62	; 0x3e
 80038fe:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003902:	52e5      	strh	r5, [r4, r3]
 8003904:	f240 8225 	bls.w	8003d52 <USB_EPStartXfer+0x4a2>
 8003908:	0946      	lsrs	r6, r0, #5
 800390a:	4637      	mov	r7, r6
 800390c:	5ae5      	ldrh	r5, [r4, r3]
 800390e:	f010 001f 	ands.w	r0, r0, #31
 8003912:	bf08      	it	eq
 8003914:	f106 37ff 	addeq.w	r7, r6, #4294967295
 8003918:	b2ad      	uxth	r5, r5
 800391a:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800391e:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8003922:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8003926:	b2ad      	uxth	r5, r5
 8003928:	52e5      	strh	r5, [r4, r3]
 800392a:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800392e:	f202 4c0c 	addw	ip, r2, #1036	; 0x40c
 8003932:	b2a5      	uxth	r5, r4
 8003934:	4664      	mov	r4, ip
 8003936:	442c      	add	r4, r5
 8003938:	5ae5      	ldrh	r5, [r4, r3]
 800393a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800393e:	52e5      	strh	r5, [r4, r3]
 8003940:	b900      	cbnz	r0, 8003944 <USB_EPStartXfer+0x94>
 8003942:	3e01      	subs	r6, #1
 8003944:	5ae0      	ldrh	r0, [r4, r3]
 8003946:	b280      	uxth	r0, r0
 8003948:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800394c:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8003950:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8003954:	b280      	uxth	r0, r0
 8003956:	52e0      	strh	r0, [r4, r3]
 8003958:	f891 c000 	ldrb.w	ip, [r1]
 800395c:	e027      	b.n	80039ae <USB_EPStartXfer+0xfe>
      if (ep->xfer_len > ep->maxpacket)
 800395e:	698c      	ldr	r4, [r1, #24]
 8003960:	690b      	ldr	r3, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003962:	f891 c000 	ldrb.w	ip, [r1]
      if (ep->xfer_len > ep->maxpacket)
 8003966:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 8003968:	bf84      	itt	hi
 800396a:	1ae0      	subhi	r0, r4, r3
 800396c:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800396e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003972:	6188      	str	r0, [r1, #24]
 8003974:	b29b      	uxth	r3, r3
 8003976:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800397a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800397e:	4418      	add	r0, r3
 8003980:	f83c 3000 	ldrh.w	r3, [ip, r0]
 8003984:	2c3e      	cmp	r4, #62	; 0x3e
 8003986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800398a:	f82c 3000 	strh.w	r3, [ip, r0]
 800398e:	f200 8086 	bhi.w	8003a9e <USB_EPStartXfer+0x1ee>
 8003992:	2c00      	cmp	r4, #0
 8003994:	f040 810f 	bne.w	8003bb6 <USB_EPStartXfer+0x306>
 8003998:	f83c 3000 	ldrh.w	r3, [ip, r0]
 800399c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	f82c 3000 	strh.w	r3, [ip, r0]
 80039aa:	f891 c000 	ldrb.w	ip, [r1]
        return HAL_ERROR;
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039ae:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
  }

  return HAL_OK;
 80039b2:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	0c1b      	lsrs	r3, r3, #16
 80039c0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80039c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039cc:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
}
 80039d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 80039d4:	690c      	ldr	r4, [r1, #16]
 80039d6:	698b      	ldr	r3, [r1, #24]
    if (ep->doublebuffer == 0U)
 80039d8:	7b08      	ldrb	r0, [r1, #12]
 80039da:	42a3      	cmp	r3, r4
 80039dc:	bf28      	it	cs
 80039de:	4623      	movcs	r3, r4
 80039e0:	b348      	cbz	r0, 8003a36 <USB_EPStartXfer+0x186>
      if (ep->type == EP_TYPE_BULK)
 80039e2:	78c8      	ldrb	r0, [r1, #3]
 80039e4:	2802      	cmp	r0, #2
 80039e6:	f000 80f6 	beq.w	8003bd6 <USB_EPStartXfer+0x326>
        ep->xfer_len_db -= len;
 80039ea:	6a0c      	ldr	r4, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80039ec:	7808      	ldrb	r0, [r1, #0]
        ep->xfer_len_db -= len;
 80039ee:	1ae4      	subs	r4, r4, r3
 80039f0:	620c      	str	r4, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80039f2:	f832 4020 	ldrh.w	r4, [r2, r0, lsl #2]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80039f6:	0100      	lsls	r0, r0, #4
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80039f8:	f014 0f40 	tst.w	r4, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80039fc:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8003a00:	b2a5      	uxth	r5, r4
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a02:	f000 8145 	beq.w	8003c90 <USB_EPStartXfer+0x3e0>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a06:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 8003a0a:	442c      	add	r4, r5
 8003a0c:	b29d      	uxth	r5, r3
 8003a0e:	5225      	strh	r5, [r4, r0]
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003a10:	b29b      	uxth	r3, r3
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a12:	894d      	ldrh	r5, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003a14:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a16:	f502 6080 	add.w	r0, r2, #1024	; 0x400

  for (count = n; count != 0U; count--)
 8003a1a:	085b      	lsrs	r3, r3, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a1c:	694c      	ldr	r4, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a1e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  for (count = n; count != 0U; count--)
 8003a22:	d028      	beq.n	8003a76 <USB_EPStartXfer+0x1c6>
 8003a24:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 8003a28:	f834 3b02 	ldrh.w	r3, [r4], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8003a2c:	f820 3b04 	strh.w	r3, [r0], #4
  for (count = n; count != 0U; count--)
 8003a30:	4584      	cmp	ip, r0
 8003a32:	d1f9      	bne.n	8003a28 <USB_EPStartXfer+0x178>
 8003a34:	e01f      	b.n	8003a76 <USB_EPStartXfer+0x1c6>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003a36:	b29c      	uxth	r4, r3
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a38:	f8b1 c006 	ldrh.w	ip, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003a3c:	f104 0e01 	add.w	lr, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a40:	f502 6380 	add.w	r3, r2, #1024	; 0x400
 8003a44:	eb03 034c 	add.w	r3, r3, ip, lsl #1
  for (count = n; count != 0U; count--)
 8003a48:	ea5f 0e5e 	movs.w	lr, lr, lsr #1
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003a4c:	6948      	ldr	r0, [r1, #20]
  for (count = n; count != 0U; count--)
 8003a4e:	bf18      	it	ne
 8003a50:	eb03 0e8e 	addne.w	lr, r3, lr, lsl #2
 8003a54:	d005      	beq.n	8003a62 <USB_EPStartXfer+0x1b2>
    WrVal |= (uint16_t)pBuf[1] << 8;
 8003a56:	f830 cb02 	ldrh.w	ip, [r0], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8003a5a:	f823 cb04 	strh.w	ip, [r3], #4
  for (count = n; count != 0U; count--)
 8003a5e:	4573      	cmp	r3, lr
 8003a60:	d1f9      	bne.n	8003a56 <USB_EPStartXfer+0x1a6>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003a62:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003a66:	7808      	ldrb	r0, [r1, #0]
 8003a68:	fa1f fc83 	uxth.w	ip, r3
 8003a6c:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8003a70:	0100      	lsls	r0, r0, #4
 8003a72:	4463      	add	r3, ip
 8003a74:	52c4      	strh	r4, [r0, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003a76:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 8003a78:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003a7a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	0c1b      	lsrs	r3, r3, #16
 8003a8a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a96:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 8003a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003a9e:	f83c 3000 	ldrh.w	r3, [ip, r0]
 8003aa2:	ea4f 1e54 	mov.w	lr, r4, lsr #5
 8003aa6:	06e4      	lsls	r4, r4, #27
 8003aa8:	bf08      	it	eq
 8003aaa:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 8003ab4:	e772      	b.n	800399c <USB_EPStartXfer+0xec>
        return HAL_ERROR;
 8003ab6:	2001      	movs	r0, #1
}
 8003ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003abc:	0846      	lsrs	r6, r0, #1
 8003abe:	46b4      	mov	ip, r6
 8003ac0:	5ae5      	ldrh	r5, [r4, r3]
 8003ac2:	f010 0701 	ands.w	r7, r0, #1
 8003ac6:	bf18      	it	ne
 8003ac8:	f106 0c01 	addne.w	ip, r6, #1
 8003acc:	b2ad      	uxth	r5, r5
 8003ace:	ea45 258c 	orr.w	r5, r5, ip, lsl #10
 8003ad2:	b2ad      	uxth	r5, r5
 8003ad4:	52e5      	strh	r5, [r4, r3]
 8003ad6:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8003ada:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 8003ade:	b280      	uxth	r0, r0
 8003ae0:	4404      	add	r4, r0
 8003ae2:	5ae5      	ldrh	r5, [r4, r3]
 8003ae4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003ae8:	52e5      	strh	r5, [r4, r3]
 8003aea:	b107      	cbz	r7, 8003aee <USB_EPStartXfer+0x23e>
 8003aec:	3601      	adds	r6, #1
 8003aee:	5ae0      	ldrh	r0, [r4, r3]
 8003af0:	b280      	uxth	r0, r0
 8003af2:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8003af6:	b280      	uxth	r0, r0
 8003af8:	52e0      	strh	r0, [r4, r3]
 8003afa:	f891 c000 	ldrb.w	ip, [r1]
 8003afe:	e756      	b.n	80039ae <USB_EPStartXfer+0xfe>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d137      	bne.n	8003b74 <USB_EPStartXfer+0x2c4>
 8003b04:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8003b08:	780b      	ldrb	r3, [r1, #0]
 8003b0a:	b284      	uxth	r4, r0
 8003b0c:	f202 4004 	addw	r0, r2, #1028	; 0x404
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	4420      	add	r0, r4
 8003b14:	5ac4      	ldrh	r4, [r0, r3]
 8003b16:	690d      	ldr	r5, [r1, #16]
 8003b18:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003b1c:	2d3e      	cmp	r5, #62	; 0x3e
 8003b1e:	52c4      	strh	r4, [r0, r3]
 8003b20:	f240 80fb 	bls.w	8003d1a <USB_EPStartXfer+0x46a>
 8003b24:	096e      	lsrs	r6, r5, #5
 8003b26:	4637      	mov	r7, r6
 8003b28:	5ac4      	ldrh	r4, [r0, r3]
 8003b2a:	f015 051f 	ands.w	r5, r5, #31
 8003b2e:	bf08      	it	eq
 8003b30:	f106 37ff 	addeq.w	r7, r6, #4294967295
 8003b34:	b2a4      	uxth	r4, r4
 8003b36:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 8003b3a:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8003b3e:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003b42:	b2a4      	uxth	r4, r4
 8003b44:	52c4      	strh	r4, [r0, r3]
 8003b46:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8003b4a:	f202 4c0c 	addw	ip, r2, #1036	; 0x40c
 8003b4e:	b2a0      	uxth	r0, r4
 8003b50:	4664      	mov	r4, ip
 8003b52:	4404      	add	r4, r0
 8003b54:	5ae0      	ldrh	r0, [r4, r3]
 8003b56:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003b5a:	52e0      	strh	r0, [r4, r3]
 8003b5c:	b905      	cbnz	r5, 8003b60 <USB_EPStartXfer+0x2b0>
 8003b5e:	3e01      	subs	r6, #1
 8003b60:	5ae0      	ldrh	r0, [r4, r3]
 8003b62:	b280      	uxth	r0, r0
 8003b64:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8003b68:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8003b6c:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8003b70:	b280      	uxth	r0, r0
 8003b72:	52e0      	strh	r0, [r4, r3]
        if (ep->xfer_count != 0U)
 8003b74:	69cb      	ldr	r3, [r1, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0bf      	beq.n	8003afa <USB_EPStartXfer+0x24a>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003b7a:	f244 0340 	movw	r3, #16448	; 0x4040
 8003b7e:	f891 c000 	ldrb.w	ip, [r1]
 8003b82:	f832 002c 	ldrh.w	r0, [r2, ip, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003b86:	ea03 0400 	and.w	r4, r3, r0
 8003b8a:	4383      	bics	r3, r0
 8003b8c:	d002      	beq.n	8003b94 <USB_EPStartXfer+0x2e4>
 8003b8e:	2c00      	cmp	r4, #0
 8003b90:	f47f af0d 	bne.w	80039ae <USB_EPStartXfer+0xfe>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8003b94:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8003b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba0:	041b      	lsls	r3, r3, #16
 8003ba2:	0c1b      	lsrs	r3, r3, #16
 8003ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bac:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
 8003bb0:	f891 c000 	ldrb.w	ip, [r1]
 8003bb4:	e6fb      	b.n	80039ae <USB_EPStartXfer+0xfe>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003bb6:	07e3      	lsls	r3, r4, #31
 8003bb8:	f83c 3000 	ldrh.w	r3, [ip, r0]
 8003bbc:	ea4f 0554 	mov.w	r5, r4, lsr #1
 8003bc0:	bf48      	it	mi
 8003bc2:	3501      	addmi	r5, #1
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	f82c 3000 	strh.w	r3, [ip, r0]
 8003bd0:	f891 c000 	ldrb.w	ip, [r1]
 8003bd4:	e6eb      	b.n	80039ae <USB_EPStartXfer+0xfe>
        if (ep->xfer_len_db > ep->maxpacket)
 8003bd6:	6a08      	ldr	r0, [r1, #32]
 8003bd8:	4284      	cmp	r4, r0
 8003bda:	d272      	bcs.n	8003cc2 <USB_EPStartXfer+0x412>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003bdc:	780d      	ldrb	r5, [r1, #0]
          ep->xfer_len_db -= len;
 8003bde:	1ac0      	subs	r0, r0, r3
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003be0:	f832 c025 	ldrh.w	ip, [r2, r5, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003be4:	ea4f 1905 	mov.w	r9, r5, lsl #4
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003be8:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8003bec:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8003bf0:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8003bf4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8003bf8:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 8003bfc:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8003c00:	f822 c025 	strh.w	ip, [r2, r5, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003c04:	f832 6025 	ldrh.w	r6, [r2, r5, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c08:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003c0c:	f016 0f40 	tst.w	r6, #64	; 0x40
          ep->xfer_len_db -= len;
 8003c10:	6208      	str	r0, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c12:	b2ae      	uxth	r6, r5
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003c14:	f000 80bb 	beq.w	8003d8e <USB_EPStartXfer+0x4de>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c18:	f202 450c 	addw	r5, r2, #1036	; 0x40c
 8003c1c:	4435      	add	r5, r6
 8003c1e:	fa1f fa83 	uxth.w	sl, r3
 8003c22:	f825 a009 	strh.w	sl, [r5, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003c26:	894d      	ldrh	r5, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003c28:	f10a 0801 	add.w	r8, sl, #1
 8003c2c:	f502 6680 	add.w	r6, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8003c30:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c34:	f8d1 c014 	ldr.w	ip, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003c38:	eb06 0545 	add.w	r5, r6, r5, lsl #1
  for (count = n; count != 0U; count--)
 8003c3c:	d008      	beq.n	8003c50 <USB_EPStartXfer+0x3a0>
  uint8_t *pBuf = pbUsrBuf;
 8003c3e:	46e6      	mov	lr, ip
 8003c40:	eb0c 0b48 	add.w	fp, ip, r8, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 8003c44:	f83e 7b02 	ldrh.w	r7, [lr], #2
  for (count = n; count != 0U; count--)
 8003c48:	45f3      	cmp	fp, lr
    *pdwVal = (WrVal & 0xFFFFU);
 8003c4a:	f825 7b04 	strh.w	r7, [r5], #4
  for (count = n; count != 0U; count--)
 8003c4e:	d1f9      	bne.n	8003c44 <USB_EPStartXfer+0x394>
            ep->xfer_buff += len;
 8003c50:	eb0c 0503 	add.w	r5, ip, r3
            if (ep->xfer_len_db > ep->maxpacket)
 8003c54:	4284      	cmp	r4, r0
            ep->xfer_buff += len;
 8003c56:	614d      	str	r5, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003c58:	f080 80f9 	bcs.w	8003e4e <USB_EPStartXfer+0x59e>
              ep->xfer_len_db -= len;
 8003c5c:	1ac0      	subs	r0, r0, r3
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c5e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003c62:	6208      	str	r0, [r1, #32]
 8003c64:	b298      	uxth	r0, r3
 8003c66:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8003c6a:	4403      	add	r3, r0
 8003c6c:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003c70:	890b      	ldrh	r3, [r1, #8]
 8003c72:	eb06 0343 	add.w	r3, r6, r3, lsl #1
  for (count = n; count != 0U; count--)
 8003c76:	f1b8 0f00 	cmp.w	r8, #0
 8003c7a:	f43f aefc 	beq.w	8003a76 <USB_EPStartXfer+0x1c6>
 8003c7e:	eb05 0448 	add.w	r4, r5, r8, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 8003c82:	f835 0b02 	ldrh.w	r0, [r5], #2
  for (count = n; count != 0U; count--)
 8003c86:	42ac      	cmp	r4, r5
    *pdwVal = (WrVal & 0xFFFFU);
 8003c88:	f823 0b04 	strh.w	r0, [r3], #4
  for (count = n; count != 0U; count--)
 8003c8c:	d1f9      	bne.n	8003c82 <USB_EPStartXfer+0x3d2>
 8003c8e:	e6f2      	b.n	8003a76 <USB_EPStartXfer+0x1c6>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c90:	f202 4404 	addw	r4, r2, #1028	; 0x404
 8003c94:	442c      	add	r4, r5
 8003c96:	b29d      	uxth	r5, r3
 8003c98:	5225      	strh	r5, [r4, r0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003c9a:	b29b      	uxth	r3, r3
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003c9c:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003c9e:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003ca0:	f502 6080 	add.w	r0, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8003ca4:	085b      	lsrs	r3, r3, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ca6:	694c      	ldr	r4, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003ca8:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  for (count = n; count != 0U; count--)
 8003cac:	f43f aee3 	beq.w	8003a76 <USB_EPStartXfer+0x1c6>
 8003cb0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    WrVal |= (uint16_t)pBuf[1] << 8;
 8003cb4:	f834 cb02 	ldrh.w	ip, [r4], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8003cb8:	f820 cb04 	strh.w	ip, [r0], #4
  for (count = n; count != 0U; count--)
 8003cbc:	4298      	cmp	r0, r3
 8003cbe:	d1f9      	bne.n	8003cb4 <USB_EPStartXfer+0x404>
 8003cc0:	e6d9      	b.n	8003a76 <USB_EPStartXfer+0x1c6>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003cc2:	780c      	ldrb	r4, [r1, #0]
 8003cc4:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8003cc8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd0:	041b      	lsls	r3, r3, #16
 8003cd2:	0c1b      	lsrs	r3, r3, #16
 8003cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cdc:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003ce0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003ce4:	0124      	lsls	r4, r4, #4
 8003ce6:	b29d      	uxth	r5, r3
 8003ce8:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8003cec:	442b      	add	r3, r5
 8003cee:	b285      	uxth	r5, r0
 8003cf0:	531d      	strh	r5, [r3, r4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003cf2:	b280      	uxth	r0, r0
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003cf4:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003cf6:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003cf8:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8003cfc:	0840      	lsrs	r0, r0, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cfe:	694c      	ldr	r4, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003d00:	eb03 0345 	add.w	r3, r3, r5, lsl #1
  for (count = n; count != 0U; count--)
 8003d04:	f43f aeb7 	beq.w	8003a76 <USB_EPStartXfer+0x1c6>
 8003d08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    WrVal |= (uint16_t)pBuf[1] << 8;
 8003d0c:	f834 cb02 	ldrh.w	ip, [r4], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8003d10:	f823 cb04 	strh.w	ip, [r3], #4
  for (count = n; count != 0U; count--)
 8003d14:	4298      	cmp	r0, r3
 8003d16:	d1f9      	bne.n	8003d0c <USB_EPStartXfer+0x45c>
 8003d18:	e6ad      	b.n	8003a76 <USB_EPStartXfer+0x1c6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003d1a:	2d00      	cmp	r5, #0
 8003d1c:	d170      	bne.n	8003e00 <USB_EPStartXfer+0x550>
 8003d1e:	5ac5      	ldrh	r5, [r0, r3]
 8003d20:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 8003d24:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8003d28:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8003d2c:	b2ad      	uxth	r5, r5
 8003d2e:	52c5      	strh	r5, [r0, r3]
 8003d30:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8003d34:	b285      	uxth	r5, r0
 8003d36:	4620      	mov	r0, r4
 8003d38:	4428      	add	r0, r5
 8003d3a:	5ac4      	ldrh	r4, [r0, r3]
 8003d3c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003d40:	52c4      	strh	r4, [r0, r3]
 8003d42:	5ac4      	ldrh	r4, [r0, r3]
 8003d44:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8003d48:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003d4c:	b2a4      	uxth	r4, r4
 8003d4e:	52c4      	strh	r4, [r0, r3]
 8003d50:	e710      	b.n	8003b74 <USB_EPStartXfer+0x2c4>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003d52:	2800      	cmp	r0, #0
 8003d54:	f47f aeb2 	bne.w	8003abc <USB_EPStartXfer+0x20c>
 8003d58:	5ae5      	ldrh	r5, [r4, r3]
 8003d5a:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 8003d5e:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8003d62:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8003d66:	b2ad      	uxth	r5, r5
 8003d68:	52e5      	strh	r5, [r4, r3]
 8003d6a:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8003d6e:	b2a4      	uxth	r4, r4
 8003d70:	4420      	add	r0, r4
 8003d72:	5ac4      	ldrh	r4, [r0, r3]
 8003d74:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003d78:	52c4      	strh	r4, [r0, r3]
 8003d7a:	5ac4      	ldrh	r4, [r0, r3]
 8003d7c:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8003d80:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003d84:	b2a4      	uxth	r4, r4
 8003d86:	52c4      	strh	r4, [r0, r3]
 8003d88:	f891 c000 	ldrb.w	ip, [r1]
 8003d8c:	e60f      	b.n	80039ae <USB_EPStartXfer+0xfe>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003d8e:	f202 4504 	addw	r5, r2, #1028	; 0x404
 8003d92:	4435      	add	r5, r6
 8003d94:	fa1f fa83 	uxth.w	sl, r3
 8003d98:	f825 a009 	strh.w	sl, [r5, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003d9c:	890e      	ldrh	r6, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003d9e:	f10a 0801 	add.w	r8, sl, #1
 8003da2:	f502 6c80 	add.w	ip, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8003da6:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003daa:	694d      	ldr	r5, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003dac:	eb0c 0646 	add.w	r6, ip, r6, lsl #1
  for (count = n; count != 0U; count--)
 8003db0:	d008      	beq.n	8003dc4 <USB_EPStartXfer+0x514>
  uint8_t *pBuf = pbUsrBuf;
 8003db2:	46ae      	mov	lr, r5
 8003db4:	eb05 0b48 	add.w	fp, r5, r8, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 8003db8:	f83e 7b02 	ldrh.w	r7, [lr], #2
  for (count = n; count != 0U; count--)
 8003dbc:	45f3      	cmp	fp, lr
    *pdwVal = (WrVal & 0xFFFFU);
 8003dbe:	f826 7b04 	strh.w	r7, [r6], #4
  for (count = n; count != 0U; count--)
 8003dc2:	d1f9      	bne.n	8003db8 <USB_EPStartXfer+0x508>
            ep->xfer_buff += len;
 8003dc4:	441d      	add	r5, r3
            if (ep->xfer_len_db > ep->maxpacket)
 8003dc6:	4284      	cmp	r4, r0
            ep->xfer_buff += len;
 8003dc8:	614d      	str	r5, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003dca:	d238      	bcs.n	8003e3e <USB_EPStartXfer+0x58e>
              ep->xfer_len_db -= len;
 8003dcc:	1ac0      	subs	r0, r0, r3
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003dce:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8003dd2:	6208      	str	r0, [r1, #32]
 8003dd4:	b298      	uxth	r0, r3
 8003dd6:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 8003dda:	4403      	add	r3, r0
 8003ddc:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003de0:	894b      	ldrh	r3, [r1, #10]
 8003de2:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
  for (count = n; count != 0U; count--)
 8003de6:	f1b8 0f00 	cmp.w	r8, #0
 8003dea:	f43f ae44 	beq.w	8003a76 <USB_EPStartXfer+0x1c6>
 8003dee:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    WrVal |= (uint16_t)pBuf[1] << 8;
 8003df2:	f835 0b02 	ldrh.w	r0, [r5], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8003df6:	f823 0b04 	strh.w	r0, [r3], #4
  for (count = n; count != 0U; count--)
 8003dfa:	429c      	cmp	r4, r3
 8003dfc:	d1f9      	bne.n	8003df2 <USB_EPStartXfer+0x542>
 8003dfe:	e63a      	b.n	8003a76 <USB_EPStartXfer+0x1c6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003e00:	086e      	lsrs	r6, r5, #1
 8003e02:	4637      	mov	r7, r6
 8003e04:	f015 0401 	ands.w	r4, r5, #1
 8003e08:	5ac5      	ldrh	r5, [r0, r3]
 8003e0a:	bf18      	it	ne
 8003e0c:	1c77      	addne	r7, r6, #1
 8003e0e:	b2ad      	uxth	r5, r5
 8003e10:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8003e14:	b2ad      	uxth	r5, r5
 8003e16:	52c5      	strh	r5, [r0, r3]
 8003e18:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8003e1c:	f202 450c 	addw	r5, r2, #1036	; 0x40c
 8003e20:	b280      	uxth	r0, r0
 8003e22:	4405      	add	r5, r0
 8003e24:	5ae8      	ldrh	r0, [r5, r3]
 8003e26:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003e2a:	52e8      	strh	r0, [r5, r3]
 8003e2c:	b104      	cbz	r4, 8003e30 <USB_EPStartXfer+0x580>
 8003e2e:	3601      	adds	r6, #1
 8003e30:	5ae8      	ldrh	r0, [r5, r3]
 8003e32:	b280      	uxth	r0, r0
 8003e34:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8003e38:	b280      	uxth	r0, r0
 8003e3a:	52e8      	strh	r0, [r5, r3]
 8003e3c:	e69a      	b.n	8003b74 <USB_EPStartXfer+0x2c4>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003e3e:	b284      	uxth	r4, r0
 8003e40:	3401      	adds	r4, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003e42:	fa1f fa80 	uxth.w	sl, r0
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003e46:	ea4f 0854 	mov.w	r8, r4, lsr #1
              ep->xfer_len_db = 0U;
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	e7bf      	b.n	8003dce <USB_EPStartXfer+0x51e>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003e4e:	b284      	uxth	r4, r0
 8003e50:	3401      	adds	r4, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003e52:	fa1f fa80 	uxth.w	sl, r0
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003e56:	ea4f 0854 	mov.w	r8, r4, lsr #1
              ep->xfer_len_db = 0U;
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	e6ff      	b.n	8003c5e <USB_EPStartXfer+0x3ae>
 8003e5e:	bf00      	nop

08003e60 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8003e60:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003e62:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8003e64:	b18b      	cbz	r3, 8003e8a <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003e66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e72:	041b      	lsls	r3, r3, #16
 8003e74:	0c1b      	lsrs	r3, r3, #16
 8003e76:	f083 0310 	eor.w	r3, r3, #16
 8003e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e82:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8003e86:	2000      	movs	r0, #0
 8003e88:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003e8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	041b      	lsls	r3, r3, #16
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8003eaa:	2000      	movs	r0, #0
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop

08003eb0 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8003eb0:	7b0b      	ldrb	r3, [r1, #12]
 8003eb2:	bb3b      	cbnz	r3, 8003f04 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 8003eb4:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eb6:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8003eb8:	b333      	cbz	r3, 8003f08 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ebe:	065b      	lsls	r3, r3, #25
 8003ec0:	d50d      	bpl.n	8003ede <USB_EPClearStall+0x2e>
 8003ec2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	0c1b      	lsrs	r3, r3, #16
 8003ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003eda:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8003ede:	78cb      	ldrb	r3, [r1, #3]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d00f      	beq.n	8003f04 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ee4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef0:	041b      	lsls	r3, r3, #16
 8003ef2:	0c1b      	lsrs	r3, r3, #16
 8003ef4:	f083 0320 	eor.w	r3, r3, #32
 8003ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f00:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8003f04:	2000      	movs	r0, #0
 8003f06:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f0c:	045b      	lsls	r3, r3, #17
 8003f0e:	d50d      	bpl.n	8003f2c <USB_EPClearStall+0x7c>
 8003f10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	0c1b      	lsrs	r3, r3, #16
 8003f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f28:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f2c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f38:	041b      	lsls	r3, r3, #16
 8003f3a:	0c1b      	lsrs	r3, r3, #16
 8003f3c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f48:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	4770      	bx	lr

08003f50 <USB_SetDevAddress>:
  if (address == 0U)
 8003f50:	b911      	cbnz	r1, 8003f58 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8003f58:	2000      	movs	r0, #0
 8003f5a:	4770      	bx	lr

08003f5c <USB_DevConnect>:
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	4770      	bx	lr

08003f60 <USB_DevDisconnect>:
 8003f60:	2000      	movs	r0, #0
 8003f62:	4770      	bx	lr

08003f64 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8003f64:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 8003f68:	b280      	uxth	r0, r0
 8003f6a:	4770      	bx	lr

08003f6c <USB_EP0_OutStart>:
}
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	4770      	bx	lr

08003f70 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003f70:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f72:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (count = n; count != 0U; count--)
 8003f76:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8003f7c:	d007      	beq.n	8003f8e <USB_WritePMA+0x1e>
 8003f7e:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    WrVal |= (uint16_t)pBuf[1] << 8;
 8003f82:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8003f86:	f822 3b04 	strh.w	r3, [r2], #4
  for (count = n; count != 0U; count--)
 8003f8a:	4290      	cmp	r0, r2
 8003f8c:	d1f9      	bne.n	8003f82 <USB_WritePMA+0x12>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8003f8e:	4770      	bx	lr

08003f90 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003f90:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f92:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (count = n; count != 0U; count--)
 8003f96:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f98:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  for (count = n; count != 0U; count--)
 8003f9c:	d012      	beq.n	8003fc4 <USB_ReadPMA+0x34>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f9e:	46ae      	mov	lr, r5
  for (count = n; count != 0U; count--)
 8003fa0:	46b4      	mov	ip, r6
 8003fa2:	1c88      	adds	r0, r1, #2
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8003fa4:	f83e 2b04 	ldrh.w	r2, [lr], #4
  for (count = n; count != 0U; count--)
 8003fa8:	3002      	adds	r0, #2
    RdVal = *(__IO uint16_t *)pdwVal;
 8003faa:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8003fac:	0a14      	lsrs	r4, r2, #8
  for (count = n; count != 0U; count--)
 8003fae:	f1bc 0c01 	subs.w	ip, ip, #1
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8003fb2:	f800 2c04 	strb.w	r2, [r0, #-4]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8003fb6:	f800 4c03 	strb.w	r4, [r0, #-3]
  for (count = n; count != 0U; count--)
 8003fba:	d1f3      	bne.n	8003fa4 <USB_ReadPMA+0x14>
    pBuf++;
 8003fbc:	eb01 0146 	add.w	r1, r1, r6, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 8003fc0:	eb05 0586 	add.w	r5, r5, r6, lsl #2
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8003fc4:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8003fc6:	bf44      	itt	mi
 8003fc8:	882b      	ldrhmi	r3, [r5, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8003fca:	700b      	strbmi	r3, [r1, #0]
  }
}
 8003fcc:	bd70      	pop	{r4, r5, r6, pc}
 8003fce:	bf00      	nop

08003fd0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8003fd0:	4603      	mov	r3, r0
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8003fd2:	2229      	movs	r2, #41	; 0x29
  return USBD_CUSTOM_HID_CfgFSDesc;
}
 8003fd4:	4801      	ldr	r0, [pc, #4]	; (8003fdc <USBD_CUSTOM_HID_GetFSCfgDesc+0xc>)
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8003fd6:	801a      	strh	r2, [r3, #0]
}
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20000044 	.word	0x20000044

08003fe0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8003fe0:	4603      	mov	r3, r0
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8003fe2:	2229      	movs	r2, #41	; 0x29
  return USBD_CUSTOM_HID_CfgHSDesc;
}
 8003fe4:	4801      	ldr	r0, [pc, #4]	; (8003fec <USBD_CUSTOM_HID_GetHSCfgDesc+0xc>)
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8003fe6:	801a      	strh	r2, [r3, #0]
}
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000070 	.word	0x20000070

08003ff0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8003ff0:	4603      	mov	r3, r0
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8003ff2:	2229      	movs	r2, #41	; 0x29
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 8003ff4:	4801      	ldr	r0, [pc, #4]	; (8003ffc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0xc>)
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8003ff6:	801a      	strh	r2, [r3, #0]
}
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	200000b4 	.word	0x200000b4

08004000 <USBD_CUSTOM_HID_DataIn>:
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8004000:	2300      	movs	r3, #0
 8004002:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8004006:	4618      	mov	r0, r3
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8004008:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop

08004010 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004010:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004012:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8

  if (hhid->IsReportAvailable == 1U)
 8004016:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004018:	2b01      	cmp	r3, #1
 800401a:	d107      	bne.n	800402c <USBD_CUSTOM_HID_EP0_RxReady+0x1c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800401c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8004020:	7861      	ldrb	r1, [r4, #1]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	7820      	ldrb	r0, [r4, #0]
 8004026:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	64e3      	str	r3, [r4, #76]	; 0x4c
  }

  return USBD_OK;
}
 800402c:	2000      	movs	r0, #0
 800402e:	bd10      	pop	{r4, pc}

08004030 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004030:	4603      	mov	r3, r0
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004032:	220a      	movs	r2, #10
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8004034:	4801      	ldr	r0, [pc, #4]	; (800403c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0xc>)
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004036:	801a      	strh	r2, [r3, #0]
}
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	200000a8 	.word	0x200000a8

08004040 <USBD_CUSTOM_HID_DataOut>:
{
 8004040:	b538      	push	{r3, r4, r5, lr}
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004042:	e9d0 53ae 	ldrd	r5, r3, [r0, #696]	; 0x2b8
{
 8004046:	4604      	mov	r4, r0
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004048:	7869      	ldrb	r1, [r5, #1]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	7828      	ldrb	r0, [r5, #0]
 800404e:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8004050:	2340      	movs	r3, #64	; 0x40
 8004052:	462a      	mov	r2, r5
 8004054:	2101      	movs	r1, #1
 8004056:	4620      	mov	r0, r4
 8004058:	f000 ff5a 	bl	8004f10 <USBD_LL_PrepareReceive>
}
 800405c:	2000      	movs	r0, #0
 800405e:	bd38      	pop	{r3, r4, r5, pc}

08004060 <USBD_CUSTOM_HID_Setup>:
  uint16_t status_info = 0U;
 8004060:	2200      	movs	r2, #0
{
 8004062:	b530      	push	{r4, r5, lr}
 8004064:	780c      	ldrb	r4, [r1, #0]
 8004066:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004068:	f014 0460 	ands.w	r4, r4, #96	; 0x60
{
 800406c:	460b      	mov	r3, r1
  uint16_t status_info = 0U;
 800406e:	f8ad 2006 	strh.w	r2, [sp, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004072:	f8d0 12b8 	ldr.w	r1, [r0, #696]	; 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004076:	d017      	beq.n	80040a8 <USBD_CUSTOM_HID_Setup+0x48>
 8004078:	2c20      	cmp	r4, #32
 800407a:	d10e      	bne.n	800409a <USBD_CUSTOM_HID_Setup+0x3a>
      switch (req->bRequest)
 800407c:	785a      	ldrb	r2, [r3, #1]
 800407e:	3a02      	subs	r2, #2
 8004080:	2a09      	cmp	r2, #9
 8004082:	d80a      	bhi.n	800409a <USBD_CUSTOM_HID_Setup+0x3a>
 8004084:	e8df f002 	tbb	[pc, r2]
 8004088:	09093832 	.word	0x09093832
 800408c:	3e090909 	.word	0x3e090909
 8004090:	2e45      	.short	0x2e45
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004092:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004096:	2a03      	cmp	r2, #3
 8004098:	d059      	beq.n	800414e <USBD_CUSTOM_HID_Setup+0xee>
            USBD_CtlError(pdev, req);
 800409a:	4619      	mov	r1, r3
 800409c:	f000 fc86 	bl	80049ac <USBD_CtlError>
            ret = USBD_FAIL;
 80040a0:	2402      	movs	r4, #2
}
 80040a2:	4620      	mov	r0, r4
 80040a4:	b003      	add	sp, #12
 80040a6:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 80040a8:	785d      	ldrb	r5, [r3, #1]
 80040aa:	2d0b      	cmp	r5, #11
 80040ac:	d8f5      	bhi.n	800409a <USBD_CUSTOM_HID_Setup+0x3a>
 80040ae:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <USBD_CUSTOM_HID_Setup+0x54>)
 80040b0:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 80040b4:	08004093 	.word	0x08004093
 80040b8:	0800409b 	.word	0x0800409b
 80040bc:	0800409b 	.word	0x0800409b
 80040c0:	0800409b 	.word	0x0800409b
 80040c4:	0800409b 	.word	0x0800409b
 80040c8:	0800409b 	.word	0x0800409b
 80040cc:	08004139 	.word	0x08004139
 80040d0:	0800409b 	.word	0x0800409b
 80040d4:	0800409b 	.word	0x0800409b
 80040d8:	0800409b 	.word	0x0800409b
 80040dc:	0800412b 	.word	0x0800412b
 80040e0:	0800411d 	.word	0x0800411d
          hhid->Protocol = (uint8_t)(req->wValue);
 80040e4:	789b      	ldrb	r3, [r3, #2]
  uint8_t ret = USBD_OK;
 80040e6:	2400      	movs	r4, #0
          hhid->Protocol = (uint8_t)(req->wValue);
 80040e8:	640b      	str	r3, [r1, #64]	; 0x40
          break;
 80040ea:	e7da      	b.n	80040a2 <USBD_CUSTOM_HID_Setup+0x42>
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80040ec:	2201      	movs	r2, #1
 80040ee:	3144      	adds	r1, #68	; 0x44
 80040f0:	f000 fc92 	bl	8004a18 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80040f4:	2400      	movs	r4, #0
          break;
 80040f6:	e7d4      	b.n	80040a2 <USBD_CUSTOM_HID_Setup+0x42>
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80040f8:	2201      	movs	r2, #1
 80040fa:	3140      	adds	r1, #64	; 0x40
 80040fc:	f000 fc8c 	bl	8004a18 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004100:	2400      	movs	r4, #0
          break;
 8004102:	e7ce      	b.n	80040a2 <USBD_CUSTOM_HID_Setup+0x42>
          hhid->IsReportAvailable = 1U;
 8004104:	2501      	movs	r5, #1
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8004106:	88da      	ldrh	r2, [r3, #6]
          hhid->IsReportAvailable = 1U;
 8004108:	64cd      	str	r5, [r1, #76]	; 0x4c
  uint8_t ret = USBD_OK;
 800410a:	2400      	movs	r4, #0
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800410c:	f000 fc9c 	bl	8004a48 <USBD_CtlPrepareRx>
          break;
 8004110:	e7c7      	b.n	80040a2 <USBD_CUSTOM_HID_Setup+0x42>
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004112:	885b      	ldrh	r3, [r3, #2]
  uint8_t ret = USBD_OK;
 8004114:	2400      	movs	r4, #0
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	644b      	str	r3, [r1, #68]	; 0x44
          break;
 800411a:	e7c2      	b.n	80040a2 <USBD_CUSTOM_HID_Setup+0x42>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800411c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004120:	2a03      	cmp	r2, #3
 8004122:	d1ba      	bne.n	800409a <USBD_CUSTOM_HID_Setup+0x3a>
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004124:	789b      	ldrb	r3, [r3, #2]
 8004126:	648b      	str	r3, [r1, #72]	; 0x48
 8004128:	e7bb      	b.n	80040a2 <USBD_CUSTOM_HID_Setup+0x42>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800412a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800412e:	2a03      	cmp	r2, #3
 8004130:	d1b3      	bne.n	800409a <USBD_CUSTOM_HID_Setup+0x3a>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8004132:	2201      	movs	r2, #1
 8004134:	3148      	adds	r1, #72	; 0x48
 8004136:	e007      	b.n	8004148 <USBD_CUSTOM_HID_Setup+0xe8>
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8004138:	885a      	ldrh	r2, [r3, #2]
 800413a:	0a12      	lsrs	r2, r2, #8
 800413c:	2a22      	cmp	r2, #34	; 0x22
 800413e:	d00d      	beq.n	800415c <USBD_CUSTOM_HID_Setup+0xfc>
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004140:	2a21      	cmp	r2, #33	; 0x21
 8004142:	d013      	beq.n	800416c <USBD_CUSTOM_HID_Setup+0x10c>
  uint8_t  *pbuf = NULL;
 8004144:	2100      	movs	r1, #0
  uint16_t len = 0U;
 8004146:	460a      	mov	r2, r1
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8004148:	f000 fc66 	bl	8004a18 <USBD_CtlSendData>
 800414c:	e7a9      	b.n	80040a2 <USBD_CUSTOM_HID_Setup+0x42>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800414e:	2202      	movs	r2, #2
 8004150:	f10d 0106 	add.w	r1, sp, #6
 8004154:	f000 fc60 	bl	8004a18 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004158:	462c      	mov	r4, r5
 800415a:	e7a2      	b.n	80040a2 <USBD_CUSTOM_HID_Setup+0x42>
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800415c:	88da      	ldrh	r2, [r3, #6]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800415e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8004162:	2a21      	cmp	r2, #33	; 0x21
 8004164:	bf28      	it	cs
 8004166:	2221      	movcs	r2, #33	; 0x21
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8004168:	6819      	ldr	r1, [r3, #0]
 800416a:	e7ed      	b.n	8004148 <USBD_CUSTOM_HID_Setup+0xe8>
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800416c:	88da      	ldrh	r2, [r3, #6]
              pbuf = USBD_CUSTOM_HID_Desc;
 800416e:	4902      	ldr	r1, [pc, #8]	; (8004178 <USBD_CUSTOM_HID_Setup+0x118>)
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8004170:	2a09      	cmp	r2, #9
 8004172:	bf28      	it	cs
 8004174:	2209      	movcs	r2, #9
 8004176:	e7e7      	b.n	8004148 <USBD_CUSTOM_HID_Setup+0xe8>
 8004178:	2000009c 	.word	0x2000009c

0800417c <USBD_CUSTOM_HID_DeInit>:
{
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4604      	mov	r4, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004180:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8004182:	2181      	movs	r1, #129	; 0x81
 8004184:	f000 fe6a 	bl	8004e5c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8004188:	2101      	movs	r1, #1
 800418a:	4620      	mov	r0, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800418c:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800418e:	f000 fe65 	bl	8004e5c <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8004192:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004196:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  if (pdev->pClassData != NULL)
 800419a:	b14b      	cbz	r3, 80041b0 <USBD_CUSTOM_HID_DeInit+0x34>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800419c:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80041a4:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80041a8:	f000 fec4 	bl	8004f34 <USBD_static_free>
    pdev->pClassData = NULL;
 80041ac:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80041b0:	2000      	movs	r0, #0
 80041b2:	bd38      	pop	{r3, r4, r5, pc}

080041b4 <USBD_CUSTOM_HID_Init>:
{
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	4604      	mov	r4, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80041b8:	2601      	movs	r6, #1
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80041ba:	2302      	movs	r3, #2
 80041bc:	2203      	movs	r2, #3
 80041be:	2181      	movs	r1, #129	; 0x81
 80041c0:	f000 fe3c 	bl	8004e3c <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80041c4:	2302      	movs	r3, #2
 80041c6:	2203      	movs	r2, #3
 80041c8:	4631      	mov	r1, r6
 80041ca:	4620      	mov	r0, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80041cc:	62e6      	str	r6, [r4, #44]	; 0x2c
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80041ce:	f000 fe35 	bl	8004e3c <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80041d2:	2054      	movs	r0, #84	; 0x54
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80041d4:	f8c4 616c 	str.w	r6, [r4, #364]	; 0x16c
  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80041d8:	f000 fea8 	bl	8004f2c <USBD_static_malloc>
 80041dc:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 80041e0:	b178      	cbz	r0, 8004202 <USBD_CUSTOM_HID_Init+0x4e>
    hhid->state = CUSTOM_HID_IDLE;
 80041e2:	2700      	movs	r7, #0
 80041e4:	4605      	mov	r5, r0
 80041e6:	f880 7050 	strb.w	r7, [r0, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80041ea:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80041f2:	2340      	movs	r3, #64	; 0x40
 80041f4:	462a      	mov	r2, r5
 80041f6:	4631      	mov	r1, r6
 80041f8:	4620      	mov	r0, r4
 80041fa:	f000 fe89 	bl	8004f10 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80041fe:	4638      	mov	r0, r7
}
 8004200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1U;
 8004202:	4630      	mov	r0, r6
}
 8004204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004206:	bf00      	nop

08004208 <USBD_CUSTOM_HID_SendReport>:
{
 8004208:	b538      	push	{r3, r4, r5, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800420a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800420e:	2b03      	cmp	r3, #3
 8004210:	d002      	beq.n	8004218 <USBD_CUSTOM_HID_SendReport+0x10>
  return USBD_OK;
 8004212:	2400      	movs	r4, #0
}
 8004214:	4620      	mov	r0, r4
 8004216:	bd38      	pop	{r3, r4, r5, pc}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004218:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
    if (hhid->state == CUSTOM_HID_IDLE)
 800421c:	f895 4050 	ldrb.w	r4, [r5, #80]	; 0x50
 8004220:	b114      	cbz	r4, 8004228 <USBD_CUSTOM_HID_SendReport+0x20>
      return USBD_BUSY;
 8004222:	2401      	movs	r4, #1
}
 8004224:	4620      	mov	r0, r4
 8004226:	bd38      	pop	{r3, r4, r5, pc}
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8004228:	4613      	mov	r3, r2
 800422a:	460a      	mov	r2, r1
      hhid->state = CUSTOM_HID_BUSY;
 800422c:	2101      	movs	r1, #1
 800422e:	f885 1050 	strb.w	r1, [r5, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8004232:	2181      	movs	r1, #129	; 0x81
 8004234:	f000 fe5e 	bl	8004ef4 <USBD_LL_Transmit>
}
 8004238:	4620      	mov	r0, r4
 800423a:	bd38      	pop	{r3, r4, r5, pc}

0800423c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800423c:	4603      	mov	r3, r0
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800423e:	b119      	cbz	r1, 8004248 <USBD_CUSTOM_HID_RegisterInterface+0xc>
  {
    pdev->pUserData = fops;
    ret = USBD_OK;
 8004240:	2000      	movs	r0, #0
    pdev->pUserData = fops;
 8004242:	f8c3 12bc 	str.w	r1, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004246:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004248:	2002      	movs	r0, #2
  }

  return ret;
}
 800424a:	4770      	bx	lr

0800424c <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800424c:	b188      	cbz	r0, 8004272 <USBD_Init+0x26>
{
 800424e:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004250:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004254:	b113      	cbz	r3, 800425c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004256:	2300      	movs	r3, #0
 8004258:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800425c:	b109      	cbz	r1, 8004262 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800425e:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004262:	2301      	movs	r3, #1
  pdev->id = id;
 8004264:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004266:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800426a:	f000 fd9f 	bl	8004dac <USBD_LL_Init>

  return USBD_OK;
 800426e:	2000      	movs	r0, #0
}
 8004270:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004272:	2002      	movs	r0, #2
}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop

08004278 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004278:	4603      	mov	r3, r0
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800427a:	b119      	cbz	r1, 8004284 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
    status = USBD_OK;
 800427c:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 800427e:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004282:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004284:	2002      	movs	r0, #2
  }

  return status;
}
 8004286:	4770      	bx	lr

08004288 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004288:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800428a:	f000 fdc9 	bl	8004e20 <USBD_LL_Start>

  return USBD_OK;
}
 800428e:	2000      	movs	r0, #0
 8004290:	bd08      	pop	{r3, pc}
 8004292:	bf00      	nop

08004294 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004294:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004296:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800429a:	b11b      	cbz	r3, 80042a4 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4798      	blx	r3
 80042a0:	b900      	cbnz	r0, 80042a4 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80042a2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80042a4:	2002      	movs	r0, #2
}
 80042a6:	bd08      	pop	{r3, pc}

080042a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80042a8:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80042aa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4798      	blx	r3

  return USBD_OK;
}
 80042b2:	2000      	movs	r0, #0
 80042b4:	bd08      	pop	{r3, pc}
 80042b6:	bf00      	nop

080042b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80042b8:	b538      	push	{r3, r4, r5, lr}
 80042ba:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80042bc:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 80042c0:	4628      	mov	r0, r5
 80042c2:	f000 fb5f 	bl	8004984 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80042c6:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 80042c8:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae

  switch (pdev->request.bmRequest & 0x1FU)
 80042cc:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_data_len = pdev->request.wLength;
 80042d0:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 80042d4:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 80042d8:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 80042da:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 80042de:	d009      	beq.n	80042f4 <USBD_LL_SetupStage+0x3c>
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d013      	beq.n	800430c <USBD_LL_SetupStage+0x54>
 80042e4:	b163      	cbz	r3, 8004300 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80042e6:	4620      	mov	r0, r4
 80042e8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80042ec:	f000 fdc4 	bl	8004e78 <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 80042f0:	2000      	movs	r0, #0
 80042f2:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80042f4:	4629      	mov	r1, r5
 80042f6:	4620      	mov	r0, r4
 80042f8:	f000 fa74 	bl	80047e4 <USBD_StdItfReq>
}
 80042fc:	2000      	movs	r0, #0
 80042fe:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdDevReq(pdev, &pdev->request);
 8004300:	4629      	mov	r1, r5
 8004302:	4620      	mov	r0, r4
 8004304:	f000 f8fa 	bl	80044fc <USBD_StdDevReq>
}
 8004308:	2000      	movs	r0, #0
 800430a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdEPReq(pdev, &pdev->request);
 800430c:	4629      	mov	r1, r5
 800430e:	4620      	mov	r0, r4
 8004310:	f000 fa9c 	bl	800484c <USBD_StdEPReq>
}
 8004314:	2000      	movs	r0, #0
 8004316:	bd38      	pop	{r3, r4, r5, pc}

08004318 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800431c:	b969      	cbnz	r1, 800433a <USBD_LL_DataOutStage+0x22>
 800431e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004320:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004324:	2a03      	cmp	r2, #3
 8004326:	d015      	beq.n	8004354 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004328:	2a05      	cmp	r2, #5
 800432a:	460c      	mov	r4, r1
 800432c:	d10e      	bne.n	800434c <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800432e:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004332:	f000 fda1 	bl	8004e78 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004336:	4620      	mov	r0, r4
}
 8004338:	bd38      	pop	{r3, r4, r5, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 800433a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	b133      	cbz	r3, 8004350 <USBD_LL_DataOutStage+0x38>
 8004342:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004346:	2a03      	cmp	r2, #3
 8004348:	d102      	bne.n	8004350 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 800434a:	4798      	blx	r3
  return USBD_OK;
 800434c:	2000      	movs	r0, #0
}
 800434e:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004350:	2002      	movs	r0, #2
}
 8004352:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8004354:	e9d0 1258 	ldrd	r1, r2, [r0, #352]	; 0x160
 8004358:	4291      	cmp	r1, r2
 800435a:	d90c      	bls.n	8004376 <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -= pep->maxpacket;
 800435c:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx(pdev, pdata,
 800435e:	428a      	cmp	r2, r1
 8004360:	bf88      	it	hi
 8004362:	b28a      	uxthhi	r2, r1
        pep->rem_length -= pep->maxpacket;
 8004364:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8004368:	bf98      	it	ls
 800436a:	b292      	uxthls	r2, r2
 800436c:	4619      	mov	r1, r3
 800436e:	f000 fb79 	bl	8004a64 <USBD_CtlContinueRx>
  return USBD_OK;
 8004372:	2000      	movs	r0, #0
}
 8004374:	bd38      	pop	{r3, r4, r5, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004376:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	b11b      	cbz	r3, 8004386 <USBD_LL_DataOutStage+0x6e>
 800437e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004382:	2a03      	cmp	r2, #3
 8004384:	d004      	beq.n	8004390 <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 8004386:	4628      	mov	r0, r5
 8004388:	f000 fb76 	bl	8004a78 <USBD_CtlSendStatus>
  return USBD_OK;
 800438c:	2000      	movs	r0, #0
}
 800438e:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 8004390:	4798      	blx	r3
 8004392:	e7f8      	b.n	8004386 <USBD_LL_DataOutStage+0x6e>

08004394 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004398:	b961      	cbnz	r1, 80043b4 <USBD_LL_DataInStage+0x20>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800439a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d015      	beq.n	80043ce <USBD_LL_DataInStage+0x3a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80043a2:	f033 0304 	bics.w	r3, r3, #4
 80043a6:	d02e      	beq.n	8004406 <USBD_LL_DataInStage+0x72>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80043a8:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d031      	beq.n	8004414 <USBD_LL_DataInStage+0x80>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80043b0:	2000      	movs	r0, #0
}
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 80043b4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	b133      	cbz	r3, 80043ca <USBD_LL_DataInStage+0x36>
 80043bc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80043c0:	2a03      	cmp	r2, #3
 80043c2:	d102      	bne.n	80043ca <USBD_LL_DataInStage+0x36>
    pdev->pClass->DataIn(pdev, epnum);
 80043c4:	4798      	blx	r3
  return USBD_OK;
 80043c6:	2000      	movs	r0, #0
}
 80043c8:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80043ca:	2002      	movs	r0, #2
}
 80043cc:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 80043ce:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 80043d2:	429e      	cmp	r6, r3
 80043d4:	d833      	bhi.n	800443e <USBD_LL_DataInStage+0xaa>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80043d6:	69c2      	ldr	r2, [r0, #28]
 80043d8:	fbb2 f5f3 	udiv	r5, r2, r3
 80043dc:	fb03 2515 	mls	r5, r3, r5, r2
 80043e0:	b9ed      	cbnz	r5, 800441e <USBD_LL_DataInStage+0x8a>
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d81b      	bhi.n	800441e <USBD_LL_DataInStage+0x8a>
            (pep->total_length >= pep->maxpacket) &&
 80043e6:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d217      	bcs.n	800441e <USBD_LL_DataInStage+0x8a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80043ee:	462a      	mov	r2, r5
 80043f0:	f000 fb20 	bl	8004a34 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80043f4:	462b      	mov	r3, r5
 80043f6:	462a      	mov	r2, r5
 80043f8:	4629      	mov	r1, r5
 80043fa:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 80043fc:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004400:	f000 fd86 	bl	8004f10 <USBD_LL_PrepareReceive>
 8004404:	e7d0      	b.n	80043a8 <USBD_LL_DataInStage+0x14>
        USBD_LL_StallEP(pdev, 0x80U);
 8004406:	2180      	movs	r1, #128	; 0x80
 8004408:	f000 fd36 	bl	8004e78 <USBD_LL_StallEP>
    if (pdev->dev_test_mode == 1U)
 800440c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004410:	2b01      	cmp	r3, #1
 8004412:	d1cd      	bne.n	80043b0 <USBD_LL_DataInStage+0x1c>
      pdev->dev_test_mode = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800441a:	4618      	mov	r0, r3
}
 800441c:	bd70      	pop	{r4, r5, r6, pc}
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800441e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	b11b      	cbz	r3, 800442e <USBD_LL_DataInStage+0x9a>
 8004426:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800442a:	2a03      	cmp	r2, #3
 800442c:	d015      	beq.n	800445a <USBD_LL_DataInStage+0xc6>
          USBD_LL_StallEP(pdev, 0x80U);
 800442e:	2180      	movs	r1, #128	; 0x80
 8004430:	4620      	mov	r0, r4
 8004432:	f000 fd21 	bl	8004e78 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004436:	4620      	mov	r0, r4
 8004438:	f000 fb2a 	bl	8004a90 <USBD_CtlReceiveStatus>
 800443c:	e7b4      	b.n	80043a8 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800443e:	460d      	mov	r5, r1
 8004440:	1af3      	subs	r3, r6, r3
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004442:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8004444:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004446:	b29a      	uxth	r2, r3
 8004448:	f000 faf4 	bl	8004a34 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800444c:	462b      	mov	r3, r5
 800444e:	462a      	mov	r2, r5
 8004450:	4629      	mov	r1, r5
 8004452:	4620      	mov	r0, r4
 8004454:	f000 fd5c 	bl	8004f10 <USBD_LL_PrepareReceive>
 8004458:	e7a6      	b.n	80043a8 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 800445a:	4620      	mov	r0, r4
 800445c:	4798      	blx	r3
 800445e:	e7e6      	b.n	800442e <USBD_LL_DataInStage+0x9a>

08004460 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004460:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004462:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004464:	2640      	movs	r6, #64	; 0x40
{
 8004466:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004468:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800446a:	4611      	mov	r1, r2
 800446c:	4633      	mov	r3, r6
 800446e:	f000 fce5 	bl	8004e3c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004472:	4633      	mov	r3, r6
 8004474:	2180      	movs	r1, #128	; 0x80
 8004476:	2200      	movs	r2, #0
 8004478:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800447a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800447e:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004482:	f000 fcdb 	bl	8004e3c <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8004486:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004488:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800448c:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800448e:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004490:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004494:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8004498:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800449a:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800449e:	b123      	cbz	r3, 80044aa <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80044a0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80044a4:	4620      	mov	r0, r4
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4798      	blx	r3
  }

  return USBD_OK;
}
 80044aa:	2000      	movs	r0, #0
 80044ac:	bd70      	pop	{r4, r5, r6, pc}
 80044ae:	bf00      	nop

080044b0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80044b0:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 80044b2:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 80044b4:	7419      	strb	r1, [r3, #16]
}
 80044b6:	4770      	bx	lr

080044b8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80044b8:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80044ba:	2104      	movs	r1, #4
  pdev->dev_old_state =  pdev->dev_state;
 80044bc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
}
 80044c0:	2000      	movs	r0, #0
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80044c2:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state =  pdev->dev_state;
 80044c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 80044ca:	4770      	bx	lr

080044cc <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80044cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044d0:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80044d2:	bf04      	itt	eq
 80044d4:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80044d8:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80044dc:	2000      	movs	r0, #0
 80044de:	4770      	bx	lr

080044e0 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044e0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80044e4:	2a03      	cmp	r2, #3
 80044e6:	d001      	beq.n	80044ec <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80044e8:	2000      	movs	r0, #0
 80044ea:	4770      	bx	lr
{
 80044ec:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 80044ee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	b103      	cbz	r3, 80044f8 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 80044f6:	4798      	blx	r3
}
 80044f8:	2000      	movs	r0, #0
 80044fa:	bd08      	pop	{r3, pc}

080044fc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80044fc:	b530      	push	{r4, r5, lr}
 80044fe:	780b      	ldrb	r3, [r1, #0]
 8004500:	460d      	mov	r5, r1
 8004502:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004506:	2b20      	cmp	r3, #32
{
 8004508:	4604      	mov	r4, r0
 800450a:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800450c:	d00d      	beq.n	800452a <USBD_StdDevReq+0x2e>
 800450e:	2b40      	cmp	r3, #64	; 0x40
 8004510:	d00b      	beq.n	800452a <USBD_StdDevReq+0x2e>
 8004512:	b19b      	cbz	r3, 800453c <USBD_StdDevReq+0x40>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8004514:	2180      	movs	r1, #128	; 0x80
 8004516:	4620      	mov	r0, r4
 8004518:	f000 fcae 	bl	8004e78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800451c:	2100      	movs	r1, #0
 800451e:	4620      	mov	r0, r4
 8004520:	f000 fcaa 	bl	8004e78 <USBD_LL_StallEP>
}
 8004524:	2000      	movs	r0, #0
 8004526:	b003      	add	sp, #12
 8004528:	bd30      	pop	{r4, r5, pc}
      pdev->pClass->Setup(pdev, req);
 800452a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800452e:	4629      	mov	r1, r5
 8004530:	4620      	mov	r0, r4
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4798      	blx	r3
}
 8004536:	2000      	movs	r0, #0
 8004538:	b003      	add	sp, #12
 800453a:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 800453c:	784b      	ldrb	r3, [r1, #1]
 800453e:	2b09      	cmp	r3, #9
 8004540:	d8e8      	bhi.n	8004514 <USBD_StdDevReq+0x18>
 8004542:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <USBD_StdDevReq+0x4c>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	080045a3 	.word	0x080045a3
 800454c:	080045cf 	.word	0x080045cf
 8004550:	08004515 	.word	0x08004515
 8004554:	080045ed 	.word	0x080045ed
 8004558:	08004515 	.word	0x08004515
 800455c:	080045f5 	.word	0x080045f5
 8004560:	0800462d 	.word	0x0800462d
 8004564:	08004515 	.word	0x08004515
 8004568:	08004661 	.word	0x08004661
 800456c:	08004571 	.word	0x08004571
  cfgidx = (uint8_t)(req->wValue);
 8004570:	7889      	ldrb	r1, [r1, #2]
 8004572:	4d9b      	ldr	r5, [pc, #620]	; (80047e0 <USBD_StdDevReq+0x2e4>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004574:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8004576:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004578:	d8cc      	bhi.n	8004514 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800457a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800457e:	2b02      	cmp	r3, #2
 8004580:	f000 810c 	beq.w	800479c <USBD_StdDevReq+0x2a0>
 8004584:	2b03      	cmp	r3, #3
 8004586:	f000 80fa 	beq.w	800477e <USBD_StdDevReq+0x282>
  USBD_LL_StallEP(pdev, 0x80U);
 800458a:	2180      	movs	r1, #128	; 0x80
 800458c:	f000 fc74 	bl	8004e78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004590:	2100      	movs	r1, #0
 8004592:	4620      	mov	r0, r4
 8004594:	f000 fc70 	bl	8004e78 <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004598:	4620      	mov	r0, r4
 800459a:	7829      	ldrb	r1, [r5, #0]
 800459c:	f7ff fe84 	bl	80042a8 <USBD_ClrClassConfig>
        break;
 80045a0:	e7c0      	b.n	8004524 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80045a2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80045a6:	3b01      	subs	r3, #1
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d8b3      	bhi.n	8004514 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 80045ac:	88cb      	ldrh	r3, [r1, #6]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d1b0      	bne.n	8004514 <USBD_StdDevReq+0x18>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80045b2:	2201      	movs	r2, #1
      if (pdev->dev_remote_wakeup)
 80045b4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80045b8:	60c2      	str	r2, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80045ba:	b10b      	cbz	r3, 80045c0 <USBD_StdDevReq+0xc4>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80045bc:	2303      	movs	r3, #3
 80045be:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80045c0:	2202      	movs	r2, #2
 80045c2:	4620      	mov	r0, r4
 80045c4:	f104 010c 	add.w	r1, r4, #12
 80045c8:	f000 fa26 	bl	8004a18 <USBD_CtlSendData>
      break;
 80045cc:	e7aa      	b.n	8004524 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80045ce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80045d2:	3b01      	subs	r3, #1
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d89d      	bhi.n	8004514 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80045d8:	884b      	ldrh	r3, [r1, #2]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d1a2      	bne.n	8004524 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 80045de:	2300      	movs	r3, #0
        USBD_CtlSendStatus(pdev);
 80045e0:	4620      	mov	r0, r4
        pdev->dev_remote_wakeup = 0U;
 80045e2:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80045e6:	f000 fa47 	bl	8004a78 <USBD_CtlSendStatus>
 80045ea:	e79b      	b.n	8004524 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80045ec:	884b      	ldrh	r3, [r1, #2]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d198      	bne.n	8004524 <USBD_StdDevReq+0x28>
 80045f2:	e7f5      	b.n	80045e0 <USBD_StdDevReq+0xe4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80045f4:	888b      	ldrh	r3, [r1, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d18c      	bne.n	8004514 <USBD_StdDevReq+0x18>
 80045fa:	88cb      	ldrh	r3, [r1, #6]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d189      	bne.n	8004514 <USBD_StdDevReq+0x18>
 8004600:	884d      	ldrh	r5, [r1, #2]
 8004602:	2d7f      	cmp	r5, #127	; 0x7f
 8004604:	d886      	bhi.n	8004514 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004606:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800460a:	2b03      	cmp	r3, #3
 800460c:	d082      	beq.n	8004514 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800460e:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8004610:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004614:	f000 fc60 	bl	8004ed8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004618:	4620      	mov	r0, r4
 800461a:	f000 fa2d 	bl	8004a78 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800461e:	2d00      	cmp	r5, #0
 8004620:	f000 80d9 	beq.w	80047d6 <USBD_StdDevReq+0x2da>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004624:	2302      	movs	r3, #2
 8004626:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800462a:	e77b      	b.n	8004524 <USBD_StdDevReq+0x28>
  uint16_t len = 0U;
 800462c:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 800462e:	886a      	ldrh	r2, [r5, #2]
  uint16_t len = 0U;
 8004630:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 8004634:	0a13      	lsrs	r3, r2, #8
 8004636:	3b01      	subs	r3, #1
 8004638:	2b06      	cmp	r3, #6
 800463a:	f63f af6b 	bhi.w	8004514 <USBD_StdDevReq+0x18>
 800463e:	a101      	add	r1, pc, #4	; (adr r1, 8004644 <USBD_StdDevReq+0x148>)
 8004640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004644:	080046f3 	.word	0x080046f3
 8004648:	080046db 	.word	0x080046db
 800464c:	080046c9 	.word	0x080046c9
 8004650:	08004515 	.word	0x08004515
 8004654:	08004515 	.word	0x08004515
 8004658:	080046b3 	.word	0x080046b3
 800465c:	08004685 	.word	0x08004685
  if (req->wLength != 1U)
 8004660:	88ca      	ldrh	r2, [r1, #6]
 8004662:	2a01      	cmp	r2, #1
 8004664:	f47f af56 	bne.w	8004514 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8004668:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800466c:	2b02      	cmp	r3, #2
 800466e:	d871      	bhi.n	8004754 <USBD_StdDevReq+0x258>
 8004670:	2b00      	cmp	r3, #0
 8004672:	f43f af4f 	beq.w	8004514 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8004676:	4601      	mov	r1, r0
 8004678:	2300      	movs	r3, #0
 800467a:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800467e:	f000 f9cb 	bl	8004a18 <USBD_CtlSendData>
        break;
 8004682:	e74f      	b.n	8004524 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004684:	7c03      	ldrb	r3, [r0, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f47f af44 	bne.w	8004514 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800468c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004690:	f10d 0006 	add.w	r0, sp, #6
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004698:	2307      	movs	r3, #7
 800469a:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 800469c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80046a0:	2a00      	cmp	r2, #0
 80046a2:	d067      	beq.n	8004774 <USBD_StdDevReq+0x278>
 80046a4:	88eb      	ldrh	r3, [r5, #6]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d15b      	bne.n	8004762 <USBD_StdDevReq+0x266>
          USBD_CtlSendStatus(pdev);
 80046aa:	4620      	mov	r0, r4
 80046ac:	f000 f9e4 	bl	8004a78 <USBD_CtlSendStatus>
 80046b0:	e738      	b.n	8004524 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046b2:	7c03      	ldrb	r3, [r0, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f47f af2d 	bne.w	8004514 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80046ba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80046be:	f10d 0006 	add.w	r0, sp, #6
 80046c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c4:	4798      	blx	r3
  if (err != 0U)
 80046c6:	e7e9      	b.n	800469c <USBD_StdDevReq+0x1a0>
      switch ((uint8_t)(req->wValue))
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	2a05      	cmp	r2, #5
 80046cc:	f63f af22 	bhi.w	8004514 <USBD_StdDevReq+0x18>
 80046d0:	e8df f002 	tbb	[pc, r2]
 80046d4:	282e343a 	.word	0x282e343a
 80046d8:	1722      	.short	0x1722
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046da:	7c03      	ldrb	r3, [r0, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d16a      	bne.n	80047b6 <USBD_StdDevReq+0x2ba>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80046e0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80046e4:	f10d 0006 	add.w	r0, sp, #6
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80046ec:	2302      	movs	r3, #2
 80046ee:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80046f0:	e7d4      	b.n	800469c <USBD_StdDevReq+0x1a0>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80046f2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80046f6:	f10d 0106 	add.w	r1, sp, #6
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	7c00      	ldrb	r0, [r0, #16]
 80046fe:	4798      	blx	r3
  if (err != 0U)
 8004700:	e7cc      	b.n	800469c <USBD_StdDevReq+0x1a0>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004702:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f43f af03 	beq.w	8004514 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800470e:	7c20      	ldrb	r0, [r4, #16]
 8004710:	f10d 0106 	add.w	r1, sp, #6
 8004714:	4798      	blx	r3
  if (err != 0U)
 8004716:	e7c1      	b.n	800469c <USBD_StdDevReq+0x1a0>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004718:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f5      	bne.n	800470e <USBD_StdDevReq+0x212>
 8004722:	e6f7      	b.n	8004514 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004724:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1ef      	bne.n	800470e <USBD_StdDevReq+0x212>
 800472e:	e6f1      	b.n	8004514 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004730:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1e9      	bne.n	800470e <USBD_StdDevReq+0x212>
 800473a:	e6eb      	b.n	8004514 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800473c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e3      	bne.n	800470e <USBD_StdDevReq+0x212>
 8004746:	e6e5      	b.n	8004514 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004748:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1dd      	bne.n	800470e <USBD_StdDevReq+0x212>
 8004752:	e6df      	b.n	8004514 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8004754:	2b03      	cmp	r3, #3
 8004756:	f47f aedd 	bne.w	8004514 <USBD_StdDevReq+0x18>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800475a:	1d01      	adds	r1, r0, #4
 800475c:	f000 f95c 	bl	8004a18 <USBD_CtlSendData>
        break;
 8004760:	e6e0      	b.n	8004524 <USBD_StdDevReq+0x28>
      len = MIN(len, req->wLength);
 8004762:	429a      	cmp	r2, r3
 8004764:	bf28      	it	cs
 8004766:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004768:	4601      	mov	r1, r0
 800476a:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800476c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004770:	f000 f952 	bl	8004a18 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8004774:	88eb      	ldrh	r3, [r5, #6]
 8004776:	2b00      	cmp	r3, #0
 8004778:	f47f aed4 	bne.w	8004524 <USBD_StdDevReq+0x28>
 800477c:	e795      	b.n	80046aa <USBD_StdDevReq+0x1ae>
        if (cfgidx == 0U)
 800477e:	b319      	cbz	r1, 80047c8 <USBD_StdDevReq+0x2cc>
        else if (cfgidx != pdev->dev_config)
 8004780:	6841      	ldr	r1, [r0, #4]
 8004782:	2901      	cmp	r1, #1
 8004784:	d091      	beq.n	80046aa <USBD_StdDevReq+0x1ae>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004786:	b2c9      	uxtb	r1, r1
 8004788:	f7ff fd8e 	bl	80042a8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800478c:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800478e:	4620      	mov	r0, r4
          pdev->dev_config = cfgidx;
 8004790:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004792:	f7ff fd7f 	bl	8004294 <USBD_SetClassConfig>
 8004796:	2802      	cmp	r0, #2
 8004798:	d187      	bne.n	80046aa <USBD_StdDevReq+0x1ae>
 800479a:	e6bb      	b.n	8004514 <USBD_StdDevReq+0x18>
        if (cfgidx)
 800479c:	2900      	cmp	r1, #0
 800479e:	d084      	beq.n	80046aa <USBD_StdDevReq+0x1ae>
          pdev->dev_config = cfgidx;
 80047a0:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80047a2:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80047a4:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80047a6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80047aa:	f7ff fd73 	bl	8004294 <USBD_SetClassConfig>
 80047ae:	2802      	cmp	r0, #2
 80047b0:	f47f af7b 	bne.w	80046aa <USBD_StdDevReq+0x1ae>
 80047b4:	e6ae      	b.n	8004514 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80047b6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80047ba:	f10d 0006 	add.w	r0, sp, #6
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80047c2:	2302      	movs	r3, #2
 80047c4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80047c6:	e769      	b.n	800469c <USBD_StdDevReq+0x1a0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80047c8:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80047ca:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80047cc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80047d0:	f7ff fd6a 	bl	80042a8 <USBD_ClrClassConfig>
 80047d4:	e769      	b.n	80046aa <USBD_StdDevReq+0x1ae>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80047dc:	e6a2      	b.n	8004524 <USBD_StdDevReq+0x28>
 80047de:	bf00      	nop
 80047e0:	20000234 	.word	0x20000234

080047e4 <USBD_StdItfReq>:
{
 80047e4:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047e6:	780b      	ldrb	r3, [r1, #0]
{
 80047e8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047ea:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80047ee:	2a40      	cmp	r2, #64	; 0x40
{
 80047f0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047f2:	d00a      	beq.n	800480a <USBD_StdItfReq+0x26>
 80047f4:	065b      	lsls	r3, r3, #25
 80047f6:	d508      	bpl.n	800480a <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev, 0x80U);
 80047f8:	2180      	movs	r1, #128	; 0x80
 80047fa:	f000 fb3d 	bl	8004e78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80047fe:	2100      	movs	r1, #0
 8004800:	4620      	mov	r0, r4
 8004802:	f000 fb39 	bl	8004e78 <USBD_LL_StallEP>
}
 8004806:	2000      	movs	r0, #0
 8004808:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800480a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800480e:	3b01      	subs	r3, #1
 8004810:	2b02      	cmp	r3, #2
 8004812:	d811      	bhi.n	8004838 <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004814:	792b      	ldrb	r3, [r5, #4]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d80e      	bhi.n	8004838 <USBD_StdItfReq+0x54>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800481a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800481e:	4629      	mov	r1, r5
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	4620      	mov	r0, r4
 8004824:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004826:	88eb      	ldrh	r3, [r5, #6]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1ec      	bne.n	8004806 <USBD_StdItfReq+0x22>
 800482c:	2800      	cmp	r0, #0
 800482e:	d1ea      	bne.n	8004806 <USBD_StdItfReq+0x22>
              USBD_CtlSendStatus(pdev);
 8004830:	4620      	mov	r0, r4
 8004832:	f000 f921 	bl	8004a78 <USBD_CtlSendStatus>
 8004836:	e7e6      	b.n	8004806 <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev, 0x80U);
 8004838:	2180      	movs	r1, #128	; 0x80
 800483a:	4620      	mov	r0, r4
 800483c:	f000 fb1c 	bl	8004e78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004840:	2100      	movs	r1, #0
 8004842:	4620      	mov	r0, r4
 8004844:	f000 fb18 	bl	8004e78 <USBD_LL_StallEP>
}
 8004848:	2000      	movs	r0, #0
 800484a:	bd38      	pop	{r3, r4, r5, pc}

0800484c <USBD_StdEPReq>:
{
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	780b      	ldrb	r3, [r1, #0]
 8004850:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004852:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004856:	2b20      	cmp	r3, #32
 8004858:	d00c      	beq.n	8004874 <USBD_StdEPReq+0x28>
 800485a:	2b40      	cmp	r3, #64	; 0x40
 800485c:	d00a      	beq.n	8004874 <USBD_StdEPReq+0x28>
 800485e:	b183      	cbz	r3, 8004882 <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev, 0x80U);
 8004860:	2180      	movs	r1, #128	; 0x80
 8004862:	4620      	mov	r0, r4
 8004864:	f000 fb08 	bl	8004e78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004868:	2100      	movs	r1, #0
 800486a:	4620      	mov	r0, r4
 800486c:	f000 fb04 	bl	8004e78 <USBD_LL_StallEP>
}
 8004870:	2000      	movs	r0, #0
 8004872:	bd38      	pop	{r3, r4, r5, pc}
      pdev->pClass->Setup(pdev, req);
 8004874:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004878:	4620      	mov	r0, r4
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4798      	blx	r3
}
 800487e:	2000      	movs	r0, #0
 8004880:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8004882:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8004884:	888a      	ldrh	r2, [r1, #4]
 8004886:	2b01      	cmp	r3, #1
 8004888:	fa5f fc82 	uxtb.w	ip, r2
      switch (req->bRequest)
 800488c:	d03e      	beq.n	800490c <USBD_StdEPReq+0xc0>
 800488e:	2b03      	cmp	r3, #3
 8004890:	d02a      	beq.n	80048e8 <USBD_StdEPReq+0x9c>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e4      	bne.n	8004860 <USBD_StdEPReq+0x14>
          switch (pdev->dev_state)
 8004896:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800489a:	2b02      	cmp	r3, #2
 800489c:	d051      	beq.n	8004942 <USBD_StdEPReq+0xf6>
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d1de      	bne.n	8004860 <USBD_StdEPReq+0x14>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80048a2:	f00c 030f 	and.w	r3, ip, #15
 80048a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80048aa:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80048ac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80048b0:	d456      	bmi.n	8004960 <USBD_StdEPReq+0x114>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80048b2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0d2      	beq.n	8004860 <USBD_StdEPReq+0x14>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80048ba:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 80048be:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 80048c2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80048c6:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80048ca:	b133      	cbz	r3, 80048da <USBD_StdEPReq+0x8e>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80048cc:	4661      	mov	r1, ip
 80048ce:	4620      	mov	r0, r4
 80048d0:	f000 faee 	bl	8004eb0 <USBD_LL_IsStallEP>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d04f      	beq.n	8004978 <USBD_StdEPReq+0x12c>
                pep->status = 0x0001U;
 80048d8:	2301      	movs	r3, #1
 80048da:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80048dc:	2202      	movs	r2, #2
 80048de:	4629      	mov	r1, r5
 80048e0:	4620      	mov	r0, r4
 80048e2:	f000 f899 	bl	8004a18 <USBD_CtlSendData>
              break;
 80048e6:	e7c3      	b.n	8004870 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 80048e8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d01d      	beq.n	800492c <USBD_StdEPReq+0xe0>
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d1b5      	bne.n	8004860 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80048f4:	884b      	ldrh	r3, [r1, #2]
 80048f6:	b92b      	cbnz	r3, 8004904 <USBD_StdEPReq+0xb8>
                if ((ep_addr != 0x00U) &&
 80048f8:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 80048fc:	d002      	beq.n	8004904 <USBD_StdEPReq+0xb8>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80048fe:	88cb      	ldrh	r3, [r1, #6]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d03b      	beq.n	800497c <USBD_StdEPReq+0x130>
              USBD_CtlSendStatus(pdev);
 8004904:	4620      	mov	r0, r4
 8004906:	f000 f8b7 	bl	8004a78 <USBD_CtlSendStatus>
              break;
 800490a:	e7b1      	b.n	8004870 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 800490c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004910:	2b02      	cmp	r3, #2
 8004912:	d00b      	beq.n	800492c <USBD_StdEPReq+0xe0>
 8004914:	2b03      	cmp	r3, #3
 8004916:	d1a3      	bne.n	8004860 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004918:	884b      	ldrh	r3, [r1, #2]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1a8      	bne.n	8004870 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 800491e:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 8004922:	d0ef      	beq.n	8004904 <USBD_StdEPReq+0xb8>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004924:	4661      	mov	r1, ip
 8004926:	f000 fab5 	bl	8004e94 <USBD_LL_ClearStallEP>
 800492a:	e7eb      	b.n	8004904 <USBD_StdEPReq+0xb8>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800492c:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 8004930:	d096      	beq.n	8004860 <USBD_StdEPReq+0x14>
                USBD_LL_StallEP(pdev, ep_addr);
 8004932:	4661      	mov	r1, ip
 8004934:	f000 faa0 	bl	8004e78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004938:	2180      	movs	r1, #128	; 0x80
 800493a:	4620      	mov	r0, r4
 800493c:	f000 fa9c 	bl	8004e78 <USBD_LL_StallEP>
 8004940:	e796      	b.n	8004870 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004942:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 8004946:	d18b      	bne.n	8004860 <USBD_StdEPReq+0x14>
              pep->status = 0x0000U;
 8004948:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800494a:	0611      	lsls	r1, r2, #24
 800494c:	bf4c      	ite	mi
 800494e:	f100 0114 	addmi.w	r1, r0, #20
 8004952:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004956:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8004958:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800495a:	f000 f85d 	bl	8004a18 <USBD_CtlSendData>
              break;
 800495e:	e787      	b.n	8004870 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	f43f af7c 	beq.w	8004860 <USBD_StdEPReq+0x14>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004968:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800496c:	1c5d      	adds	r5, r3, #1
 800496e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004972:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8004976:	e7a8      	b.n	80048ca <USBD_StdEPReq+0x7e>
                pep->status = 0x0000U;
 8004978:	6028      	str	r0, [r5, #0]
 800497a:	e7af      	b.n	80048dc <USBD_StdEPReq+0x90>
                  USBD_LL_StallEP(pdev, ep_addr);
 800497c:	4661      	mov	r1, ip
 800497e:	f000 fa7b 	bl	8004e78 <USBD_LL_StallEP>
 8004982:	e7bf      	b.n	8004904 <USBD_StdEPReq+0xb8>

08004984 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8004984:	780b      	ldrb	r3, [r1, #0]
 8004986:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004988:	784b      	ldrb	r3, [r1, #1]
 800498a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800498c:	78ca      	ldrb	r2, [r1, #3]
 800498e:	788b      	ldrb	r3, [r1, #2]
 8004990:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004994:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004996:	794a      	ldrb	r2, [r1, #5]
 8004998:	790b      	ldrb	r3, [r1, #4]
 800499a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800499e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80049a0:	79ca      	ldrb	r2, [r1, #7]
 80049a2:	798b      	ldrb	r3, [r1, #6]
 80049a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80049a8:	80c3      	strh	r3, [r0, #6]
}
 80049aa:	4770      	bx	lr

080049ac <USBD_CtlError>:
{
 80049ac:	b510      	push	{r4, lr}
 80049ae:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80049b0:	2180      	movs	r1, #128	; 0x80
 80049b2:	f000 fa61 	bl	8004e78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80049b6:	4620      	mov	r0, r4
}
 80049b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80049bc:	2100      	movs	r1, #0
 80049be:	f000 ba5b 	b.w	8004e78 <USBD_LL_StallEP>
 80049c2:	bf00      	nop

080049c4 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 80049c4:	b318      	cbz	r0, 8004a0e <USBD_GetString+0x4a>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80049c6:	7803      	ldrb	r3, [r0, #0]
{
 80049c8:	b430      	push	{r4, r5}
  while (*buf != '\0')
 80049ca:	b30b      	cbz	r3, 8004a10 <USBD_GetString+0x4c>
 80049cc:	4604      	mov	r4, r0
 80049ce:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 80049d2:	eb04 030c 	add.w	r3, r4, ip
  while (*buf != '\0')
 80049d6:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2d00      	cmp	r5, #0
 80049de:	d1f8      	bne.n	80049d2 <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80049e0:	3301      	adds	r3, #1
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	b2dc      	uxtb	r4, r3
 80049e6:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80049e8:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 80049ea:	700c      	strb	r4, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80049ec:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 80049ee:	7804      	ldrb	r4, [r0, #0]
 80049f0:	b15c      	cbz	r4, 8004a0a <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80049f2:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 80049f4:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 80049fc:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 80049fe:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8004a02:	3302      	adds	r3, #2
 8004a04:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8004a06:	2c00      	cmp	r4, #0
 8004a08:	d1f5      	bne.n	80049f6 <USBD_GetString+0x32>
}
 8004a0a:	bc30      	pop	{r4, r5}
 8004a0c:	4770      	bx	lr
 8004a0e:	4770      	bx	lr
  while (*buf != '\0')
 8004a10:	2402      	movs	r4, #2
 8004a12:	4623      	mov	r3, r4
 8004a14:	e7e7      	b.n	80049e6 <USBD_GetString+0x22>
 8004a16:	bf00      	nop

08004a18 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004a18:	b510      	push	{r4, lr}
 8004a1a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004a1c:	2402      	movs	r4, #2
{
 8004a1e:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8004a20:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004a24:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004a26:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004a2a:	f000 fa63 	bl	8004ef4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004a2e:	2000      	movs	r0, #0
 8004a30:	bd10      	pop	{r4, pc}
 8004a32:	bf00      	nop

08004a34 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004a34:	468c      	mov	ip, r1
 8004a36:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004a38:	2100      	movs	r1, #0
{
 8004a3a:	4613      	mov	r3, r2
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004a3c:	4662      	mov	r2, ip
 8004a3e:	f000 fa59 	bl	8004ef4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004a42:	2000      	movs	r0, #0
 8004a44:	bd08      	pop	{r3, pc}
 8004a46:	bf00      	nop

08004a48 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004a4c:	2403      	movs	r4, #3
{
 8004a4e:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8004a50:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004a54:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004a56:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004a5a:	f000 fa59 	bl	8004f10 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004a5e:	2000      	movs	r0, #0
 8004a60:	bd10      	pop	{r4, pc}
 8004a62:	bf00      	nop

08004a64 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004a64:	468c      	mov	ip, r1
 8004a66:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004a68:	2100      	movs	r1, #0
{
 8004a6a:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004a6c:	4662      	mov	r2, ip
 8004a6e:	f000 fa4f 	bl	8004f10 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004a72:	2000      	movs	r0, #0
 8004a74:	bd08      	pop	{r3, pc}
 8004a76:	bf00      	nop

08004a78 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004a78:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004a7a:	2104      	movs	r1, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004a7c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004a7e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004a82:	461a      	mov	r2, r3
 8004a84:	4619      	mov	r1, r3
 8004a86:	f000 fa35 	bl	8004ef4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	bd08      	pop	{r3, pc}
 8004a8e:	bf00      	nop

08004a90 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004a90:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004a92:	2105      	movs	r1, #5

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a94:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004a96:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f000 fa37 	bl	8004f10 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	bd08      	pop	{r3, pc}
 8004aa6:	bf00      	nop

08004aa8 <SendGovnoReport>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void SendGovnoReport(uint8_t* report, uint16_t length) {
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	460a      	mov	r2, r1
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, length);
 8004aac:	4801      	ldr	r0, [pc, #4]	; (8004ab4 <SendGovnoReport+0xc>)
 8004aae:	4619      	mov	r1, r3
 8004ab0:	f7ff bbaa 	b.w	8004208 <USBD_CUSTOM_HID_SendReport>
 8004ab4:	20000238 	.word	0x20000238

08004ab8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004ab8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004aba:	2200      	movs	r2, #0
 8004abc:	4917      	ldr	r1, [pc, #92]	; (8004b1c <MX_USB_DEVICE_Init+0x64>)
 8004abe:	4818      	ldr	r0, [pc, #96]	; (8004b20 <MX_USB_DEVICE_Init+0x68>)
 8004ac0:	f7ff fbc4 	bl	800424c <USBD_Init>
 8004ac4:	b970      	cbnz	r0, 8004ae4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8004ac6:	4917      	ldr	r1, [pc, #92]	; (8004b24 <MX_USB_DEVICE_Init+0x6c>)
 8004ac8:	4815      	ldr	r0, [pc, #84]	; (8004b20 <MX_USB_DEVICE_Init+0x68>)
 8004aca:	f7ff fbd5 	bl	8004278 <USBD_RegisterClass>
 8004ace:	b988      	cbnz	r0, 8004af4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8004ad0:	4915      	ldr	r1, [pc, #84]	; (8004b28 <MX_USB_DEVICE_Init+0x70>)
 8004ad2:	4813      	ldr	r0, [pc, #76]	; (8004b20 <MX_USB_DEVICE_Init+0x68>)
 8004ad4:	f7ff fbb2 	bl	800423c <USBD_CUSTOM_HID_RegisterInterface>
 8004ad8:	b9a0      	cbnz	r0, 8004b04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004ada:	4811      	ldr	r0, [pc, #68]	; (8004b20 <MX_USB_DEVICE_Init+0x68>)
 8004adc:	f7ff fbd4 	bl	8004288 <USBD_Start>
 8004ae0:	b9b8      	cbnz	r0, 8004b12 <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004ae2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004ae4:	f7fc fa1a 	bl	8000f1c <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8004ae8:	490e      	ldr	r1, [pc, #56]	; (8004b24 <MX_USB_DEVICE_Init+0x6c>)
 8004aea:	480d      	ldr	r0, [pc, #52]	; (8004b20 <MX_USB_DEVICE_Init+0x68>)
 8004aec:	f7ff fbc4 	bl	8004278 <USBD_RegisterClass>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d0ed      	beq.n	8004ad0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8004af4:	f7fc fa12 	bl	8000f1c <Error_Handler>
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8004af8:	490b      	ldr	r1, [pc, #44]	; (8004b28 <MX_USB_DEVICE_Init+0x70>)
 8004afa:	4809      	ldr	r0, [pc, #36]	; (8004b20 <MX_USB_DEVICE_Init+0x68>)
 8004afc:	f7ff fb9e 	bl	800423c <USBD_CUSTOM_HID_RegisterInterface>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d0ea      	beq.n	8004ada <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8004b04:	f7fc fa0a 	bl	8000f1c <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004b08:	4805      	ldr	r0, [pc, #20]	; (8004b20 <MX_USB_DEVICE_Init+0x68>)
 8004b0a:	f7ff fbbd 	bl	8004288 <USBD_Start>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	d0e7      	beq.n	8004ae2 <MX_USB_DEVICE_Init+0x2a>
}
 8004b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004b16:	f7fc ba01 	b.w	8000f1c <Error_Handler>
 8004b1a:	bf00      	nop
 8004b1c:	20000114 	.word	0x20000114
 8004b20:	20000238 	.word	0x20000238
 8004b24:	2000000c 	.word	0x2000000c
 8004b28:	20000104 	.word	0x20000104

08004b2c <CUSTOM_HID_Init_FS>:
static int8_t CUSTOM_HID_Init_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	4770      	bx	lr

08004b30 <CUSTOM_HID_OutEvent_FS>:
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004b30:	2000      	movs	r0, #0
 8004b32:	4770      	bx	lr

08004b34 <CUSTOM_HID_DeInit_FS>:
 8004b34:	2000      	movs	r0, #0
 8004b36:	4770      	bx	lr

08004b38 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004b38:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8004b3a:	4801      	ldr	r0, [pc, #4]	; (8004b40 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8004b3c:	800b      	strh	r3, [r1, #0]
}
 8004b3e:	4770      	bx	lr
 8004b40:	20000130 	.word	0x20000130

08004b44 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004b44:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8004b46:	4801      	ldr	r0, [pc, #4]	; (8004b4c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004b48:	800b      	strh	r3, [r1, #0]
}
 8004b4a:	4770      	bx	lr
 8004b4c:	20000144 	.word	0x20000144

08004b50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b50:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004b52:	4c04      	ldr	r4, [pc, #16]	; (8004b64 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8004b54:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004b56:	4804      	ldr	r0, [pc, #16]	; (8004b68 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004b58:	4621      	mov	r1, r4
 8004b5a:	f7ff ff33 	bl	80049c4 <USBD_GetString>
  return USBD_StrDesc;
}
 8004b5e:	4620      	mov	r0, r4
 8004b60:	bd10      	pop	{r4, pc}
 8004b62:	bf00      	nop
 8004b64:	200004fc 	.word	0x200004fc
 8004b68:	08004fdc 	.word	0x08004fdc

08004b6c <USBD_FS_ProductStrDescriptor>:
{
 8004b6c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004b6e:	4c04      	ldr	r4, [pc, #16]	; (8004b80 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8004b70:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004b72:	4804      	ldr	r0, [pc, #16]	; (8004b84 <USBD_FS_ProductStrDescriptor+0x18>)
 8004b74:	4621      	mov	r1, r4
 8004b76:	f7ff ff25 	bl	80049c4 <USBD_GetString>
}
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	bd10      	pop	{r4, pc}
 8004b7e:	bf00      	nop
 8004b80:	200004fc 	.word	0x200004fc
 8004b84:	08004ff0 	.word	0x08004ff0

08004b88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004b88:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004b8a:	4c04      	ldr	r4, [pc, #16]	; (8004b9c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8004b8c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004b8e:	4804      	ldr	r0, [pc, #16]	; (8004ba0 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004b90:	4621      	mov	r1, r4
 8004b92:	f7ff ff17 	bl	80049c4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8004b96:	4620      	mov	r0, r4
 8004b98:	bd10      	pop	{r4, pc}
 8004b9a:	bf00      	nop
 8004b9c:	200004fc 	.word	0x200004fc
 8004ba0:	08005010 	.word	0x08005010

08004ba4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004ba4:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004ba6:	4c04      	ldr	r4, [pc, #16]	; (8004bb8 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8004ba8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004baa:	4804      	ldr	r0, [pc, #16]	; (8004bbc <USBD_FS_InterfaceStrDescriptor+0x18>)
 8004bac:	4621      	mov	r1, r4
 8004bae:	f7ff ff09 	bl	80049c4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	bd10      	pop	{r4, pc}
 8004bb6:	bf00      	nop
 8004bb8:	200004fc 	.word	0x200004fc
 8004bbc:	08005024 	.word	0x08005024

08004bc0 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8004bc0:	f04f 0c1a 	mov.w	ip, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004bc4:	4a44      	ldr	r2, [pc, #272]	; (8004cd8 <USBD_FS_SerialStrDescriptor+0x118>)
 8004bc6:	f8d2 07e8 	ldr.w	r0, [r2, #2024]	; 0x7e8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8004bca:	f8d2 37f0 	ldr.w	r3, [r2, #2032]	; 0x7f0
  *length = USB_SIZ_STRING_SERIAL;
 8004bce:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 8004bd2:	18c3      	adds	r3, r0, r3
 8004bd4:	d101      	bne.n	8004bda <USBD_FS_SerialStrDescriptor+0x1a>
}
 8004bd6:	4841      	ldr	r0, [pc, #260]	; (8004cdc <USBD_FS_SerialStrDescriptor+0x11c>)
 8004bd8:	4770      	bx	lr
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8004bda:	f04f 0c00 	mov.w	ip, #0
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004bde:	f8d2 17ec 	ldr.w	r1, [r2, #2028]	; 0x7ec
    if (((value >> 28)) < 0xA)
 8004be2:	0f18      	lsrs	r0, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8004be4:	4a3d      	ldr	r2, [pc, #244]	; (8004cdc <USBD_FS_SerialStrDescriptor+0x11c>)
    if (((value >> 28)) < 0xA)
 8004be6:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004bea:	bf2c      	ite	cs
 8004bec:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8004bee:	3030      	addcc	r0, #48	; 0x30
 8004bf0:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 8004bf2:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8004bf6:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004bf8:	bf8c      	ite	hi
 8004bfa:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8004bfc:	3030      	addls	r0, #48	; 0x30
 8004bfe:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 8004c00:	f3c3 5003 	ubfx	r0, r3, #20, #4
 8004c04:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004c06:	bf8c      	ite	hi
 8004c08:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8004c0a:	3030      	addls	r0, #48	; 0x30
 8004c0c:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 8004c0e:	f3c3 4003 	ubfx	r0, r3, #16, #4
 8004c12:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004c14:	bf8c      	ite	hi
 8004c16:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8004c18:	3030      	addls	r0, #48	; 0x30
 8004c1a:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 8004c1c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8004c20:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004c22:	bf8c      	ite	hi
 8004c24:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8004c26:	3030      	addls	r0, #48	; 0x30
 8004c28:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 8004c2a:	f3c3 2003 	ubfx	r0, r3, #8, #4
 8004c2e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004c30:	bf8c      	ite	hi
 8004c32:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8004c34:	3030      	addls	r0, #48	; 0x30
 8004c36:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 8004c38:	f3c3 1003 	ubfx	r0, r3, #4, #4
 8004c3c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004c3e:	bf8c      	ite	hi
 8004c40:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8004c42:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8004c44:	f882 c003 	strb.w	ip, [r2, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 8004c48:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 8004c4a:	f04f 0c00 	mov.w	ip, #0
 8004c4e:	2000      	movs	r0, #0
 8004c50:	f882 c005 	strb.w	ip, [r2, #5]
 8004c54:	73d0      	strb	r0, [r2, #15]
 8004c56:	f04f 0c00 	mov.w	ip, #0
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	f882 c007 	strb.w	ip, [r2, #7]
 8004c60:	7450      	strb	r0, [r2, #17]
 8004c62:	f04f 0c00 	mov.w	ip, #0
 8004c66:	2000      	movs	r0, #0
 8004c68:	f882 c009 	strb.w	ip, [r2, #9]
 8004c6c:	74d0      	strb	r0, [r2, #19]
 8004c6e:	f04f 0c00 	mov.w	ip, #0
 8004c72:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8004c7a:	bf94      	ite	ls
 8004c7c:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004c7e:	3337      	addhi	r3, #55	; 0x37
 8004c80:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 8004c82:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 8004c86:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004c8a:	bf2c      	ite	cs
 8004c8c:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8004c8e:	3330      	addcc	r3, #48	; 0x30
 8004c90:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 8004c92:	f3c1 6303 	ubfx	r3, r1, #24, #4
 8004c96:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004c98:	bf8c      	ite	hi
 8004c9a:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8004c9c:	3330      	addls	r3, #48	; 0x30
 8004c9e:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 8004ca0:	f3c1 5303 	ubfx	r3, r1, #20, #4
 8004ca4:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004ca6:	bf8c      	ite	hi
 8004ca8:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8004caa:	3330      	addls	r3, #48	; 0x30
 8004cac:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 8004cae:	f3c1 4303 	ubfx	r3, r1, #16, #4
 8004cb2:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8004cb4:	bf94      	ite	ls
 8004cb6:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004cb8:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 8004cba:	f882 c00b 	strb.w	ip, [r2, #11]
 8004cbe:	7550      	strb	r0, [r2, #21]
 8004cc0:	f04f 0c00 	mov.w	ip, #0
 8004cc4:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004cc6:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	75d0      	strb	r0, [r2, #23]
 8004ccc:	f882 c00d 	strb.w	ip, [r2, #13]
}
 8004cd0:	4802      	ldr	r0, [pc, #8]	; (8004cdc <USBD_FS_SerialStrDescriptor+0x11c>)
    pbuf[2 * idx + 1] = 0;
 8004cd2:	7653      	strb	r3, [r2, #25]
}
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	1ffff000 	.word	0x1ffff000
 8004cdc:	20000148 	.word	0x20000148

08004ce0 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 8004ce0:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <HAL_PCD_MspInit+0x3c>)
 8004ce2:	6802      	ldr	r2, [r0, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d000      	beq.n	8004cea <HAL_PCD_MspInit+0xa>
 8004ce8:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004cea:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8004cec:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004cf0:	69d9      	ldr	r1, [r3, #28]
{
 8004cf2:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 8004cf4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8004cf8:	61d9      	str	r1, [r3, #28]
 8004cfa:	69db      	ldr	r3, [r3, #28]
{
 8004cfc:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8004cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d02:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004d04:	2014      	movs	r0, #20
 8004d06:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8004d08:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004d0a:	f7fc fd3d 	bl	8001788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004d0e:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004d10:	b003      	add	sp, #12
 8004d12:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004d16:	f7fc bd75 	b.w	8001804 <HAL_NVIC_EnableIRQ>
 8004d1a:	bf00      	nop
 8004d1c:	40005c00 	.word	0x40005c00

08004d20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d20:	4601      	mov	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004d22:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
 8004d26:	f501 7126 	add.w	r1, r1, #664	; 0x298
 8004d2a:	f7ff bac5 	b.w	80042b8 <USBD_LL_SetupStage>
 8004d2e:	bf00      	nop

08004d30 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004d30:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004d34:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8004d38:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8004d3c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
 8004d40:	f7ff baea 	b.w	8004318 <USBD_LL_DataOutStage>

08004d44 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004d44:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004d48:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8004d4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d4e:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
 8004d52:	f7ff bb1f 	b.w	8004394 <USBD_LL_DataInStage>
 8004d56:	bf00      	nop

08004d58 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004d58:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
 8004d5c:	f7ff bbc0 	b.w	80044e0 <USBD_LL_SOF>

08004d60 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d60:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004d62:	7983      	ldrb	r3, [r0, #6]
{
 8004d64:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d001      	beq.n	8004d6e <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8004d6a:	f7fc f8d7 	bl	8000f1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004d6e:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
 8004d72:	2101      	movs	r1, #1
 8004d74:	f7ff fb9c 	bl	80044b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004d78:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
}
 8004d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004d80:	f7ff bb6e 	b.w	8004460 <USBD_LL_Reset>

08004d84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d84:	b510      	push	{r4, lr}
 8004d86:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004d88:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
 8004d8c:	f7ff fb94 	bl	80044b8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004d90:	7aa3      	ldrb	r3, [r4, #10]
 8004d92:	b123      	cbz	r3, 8004d9e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004d94:	4a02      	ldr	r2, [pc, #8]	; (8004da0 <HAL_PCD_SuspendCallback+0x1c>)
 8004d96:	6913      	ldr	r3, [r2, #16]
 8004d98:	f043 0306 	orr.w	r3, r3, #6
 8004d9c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004d9e:	bd10      	pop	{r4, pc}
 8004da0:	e000ed00 	.word	0xe000ed00

08004da4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004da4:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
 8004da8:	f7ff bb90 	b.w	80044cc <USBD_LL_Resume>

08004dac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004dac:	b510      	push	{r4, lr}
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004dae:	2408      	movs	r4, #8
  hpcd_USB_FS.pData = pdev;
 8004db0:	4b19      	ldr	r3, [pc, #100]	; (8004e18 <USBD_LL_Init+0x6c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004db2:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004db4:	711c      	strb	r4, [r3, #4]
{
 8004db6:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004db8:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004dba:	815a      	strh	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004dbc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_FS.Instance = USB;
 8004dbe:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <USBD_LL_Init+0x70>)
  hpcd_USB_FS.pData = pdev;
 8004dc0:	f8c3 42d4 	str.w	r4, [r3, #724]	; 0x2d4
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004dc4:	4618      	mov	r0, r3
  pdev->pData = &hpcd_USB_FS;
 8004dc6:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004dca:	7199      	strb	r1, [r3, #6]
  hpcd_USB_FS.Instance = USB;
 8004dcc:	601a      	str	r2, [r3, #0]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004dce:	f7fc ff0d 	bl	8001bec <HAL_PCD_Init>
 8004dd2:	b9e8      	cbnz	r0, 8004e10 <USBD_LL_Init+0x64>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2318      	movs	r3, #24
 8004dd8:	4611      	mov	r1, r2
 8004dda:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004dde:	f7fd fec1 	bl	8002b64 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004de2:	2358      	movs	r3, #88	; 0x58
 8004de4:	2200      	movs	r2, #0
 8004de6:	2180      	movs	r1, #128	; 0x80
 8004de8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004dec:	f7fd feba 	bl	8002b64 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8004df0:	2398      	movs	r3, #152	; 0x98
 8004df2:	2200      	movs	r2, #0
 8004df4:	2181      	movs	r1, #129	; 0x81
 8004df6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004dfa:	f7fd feb3 	bl	8002b64 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8004dfe:	23d8      	movs	r3, #216	; 0xd8
 8004e00:	2200      	movs	r2, #0
 8004e02:	2101      	movs	r1, #1
 8004e04:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004e08:	f7fd feac 	bl	8002b64 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
}
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8004e10:	f7fc f884 	bl	8000f1c <Error_Handler>
 8004e14:	e7de      	b.n	8004dd4 <USBD_LL_Init+0x28>
 8004e16:	bf00      	nop
 8004e18:	200006fc 	.word	0x200006fc
 8004e1c:	40005c00 	.word	0x40005c00

08004e20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004e20:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8004e22:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004e26:	f7fc ffdf 	bl	8001de8 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004e2a:	2803      	cmp	r0, #3
 8004e2c:	bf96      	itet	ls
 8004e2e:	4b02      	ldrls	r3, [pc, #8]	; (8004e38 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8004e30:	2002      	movhi	r0, #2
 8004e32:	5c18      	ldrbls	r0, [r3, r0]
}
 8004e34:	bd08      	pop	{r3, pc}
 8004e36:	bf00      	nop
 8004e38:	0800503c 	.word	0x0800503c

08004e3c <USBD_LL_OpenEP>:
{
 8004e3c:	4694      	mov	ip, r2
 8004e3e:	b508      	push	{r3, lr}
 8004e40:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004e42:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004e46:	4663      	mov	r3, ip
 8004e48:	f7fd fd7a 	bl	8002940 <HAL_PCD_EP_Open>
  switch (hal_status)
 8004e4c:	2803      	cmp	r0, #3
 8004e4e:	bf96      	itet	ls
 8004e50:	4b01      	ldrls	r3, [pc, #4]	; (8004e58 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004e52:	2002      	movhi	r0, #2
 8004e54:	5c18      	ldrbls	r0, [r3, r0]
}
 8004e56:	bd08      	pop	{r3, pc}
 8004e58:	0800503c 	.word	0x0800503c

08004e5c <USBD_LL_CloseEP>:
{
 8004e5c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004e5e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004e62:	f7fd fda3 	bl	80029ac <HAL_PCD_EP_Close>
  switch (hal_status)
 8004e66:	2803      	cmp	r0, #3
 8004e68:	bf96      	itet	ls
 8004e6a:	4b02      	ldrls	r3, [pc, #8]	; (8004e74 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004e6c:	2002      	movhi	r0, #2
 8004e6e:	5c18      	ldrbls	r0, [r3, r0]
}
 8004e70:	bd08      	pop	{r3, pc}
 8004e72:	bf00      	nop
 8004e74:	0800503c 	.word	0x0800503c

08004e78 <USBD_LL_StallEP>:
{
 8004e78:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004e7a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004e7e:	f7fd fdf9 	bl	8002a74 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8004e82:	2803      	cmp	r0, #3
 8004e84:	bf96      	itet	ls
 8004e86:	4b02      	ldrls	r3, [pc, #8]	; (8004e90 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004e88:	2002      	movhi	r0, #2
 8004e8a:	5c18      	ldrbls	r0, [r3, r0]
}
 8004e8c:	bd08      	pop	{r3, pc}
 8004e8e:	bf00      	nop
 8004e90:	0800503c 	.word	0x0800503c

08004e94 <USBD_LL_ClearStallEP>:
{
 8004e94:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004e96:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004e9a:	f7fd fe2b 	bl	8002af4 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8004e9e:	2803      	cmp	r0, #3
 8004ea0:	bf96      	itet	ls
 8004ea2:	4b02      	ldrls	r3, [pc, #8]	; (8004eac <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004ea4:	2002      	movhi	r0, #2
 8004ea6:	5c18      	ldrbls	r0, [r3, r0]
}
 8004ea8:	bd08      	pop	{r3, pc}
 8004eaa:	bf00      	nop
 8004eac:	0800503c 	.word	0x0800503c

08004eb0 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8004eb0:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004eb2:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8004eb6:	d406      	bmi.n	8004ec6 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004eb8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004ebc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004ec0:	f891 0152 	ldrb.w	r0, [r1, #338]	; 0x152
}
 8004ec4:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004ec6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004eca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004ece:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004ed2:	7c88      	ldrb	r0, [r1, #18]
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop

08004ed8 <USBD_LL_SetUSBAddress>:
{
 8004ed8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004eda:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ede:	f7fd fd1b 	bl	8002918 <HAL_PCD_SetAddress>
  switch (hal_status)
 8004ee2:	2803      	cmp	r0, #3
 8004ee4:	bf96      	itet	ls
 8004ee6:	4b02      	ldrls	r3, [pc, #8]	; (8004ef0 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004ee8:	2002      	movhi	r0, #2
 8004eea:	5c18      	ldrbls	r0, [r3, r0]
}
 8004eec:	bd08      	pop	{r3, pc}
 8004eee:	bf00      	nop
 8004ef0:	0800503c 	.word	0x0800503c

08004ef4 <USBD_LL_Transmit>:
{
 8004ef4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004ef6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004efa:	f7fd fd9d 	bl	8002a38 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8004efe:	2803      	cmp	r0, #3
 8004f00:	bf96      	itet	ls
 8004f02:	4b02      	ldrls	r3, [pc, #8]	; (8004f0c <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004f04:	2002      	movhi	r0, #2
 8004f06:	5c18      	ldrbls	r0, [r3, r0]
}
 8004f08:	bd08      	pop	{r3, pc}
 8004f0a:	bf00      	nop
 8004f0c:	0800503c 	.word	0x0800503c

08004f10 <USBD_LL_PrepareReceive>:
{
 8004f10:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004f12:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004f16:	f7fd fd77 	bl	8002a08 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8004f1a:	2803      	cmp	r0, #3
 8004f1c:	bf96      	itet	ls
 8004f1e:	4b02      	ldrls	r3, [pc, #8]	; (8004f28 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004f20:	2002      	movhi	r0, #2
 8004f22:	5c18      	ldrbls	r0, [r3, r0]
}
 8004f24:	bd08      	pop	{r3, pc}
 8004f26:	bf00      	nop
 8004f28:	0800503c 	.word	0x0800503c

08004f2c <USBD_static_malloc>:
}
 8004f2c:	4800      	ldr	r0, [pc, #0]	; (8004f30 <USBD_static_malloc+0x4>)
 8004f2e:	4770      	bx	lr
 8004f30:	200009d4 	.word	0x200009d4

08004f34 <USBD_static_free>:
}
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop

08004f38 <HAL_PCDEx_SetConnectionState>:
}
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop

08004f3c <__libc_init_array>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	2600      	movs	r6, #0
 8004f40:	4d0c      	ldr	r5, [pc, #48]	; (8004f74 <__libc_init_array+0x38>)
 8004f42:	4c0d      	ldr	r4, [pc, #52]	; (8004f78 <__libc_init_array+0x3c>)
 8004f44:	1b64      	subs	r4, r4, r5
 8004f46:	10a4      	asrs	r4, r4, #2
 8004f48:	42a6      	cmp	r6, r4
 8004f4a:	d109      	bne.n	8004f60 <__libc_init_array+0x24>
 8004f4c:	f000 f81a 	bl	8004f84 <_init>
 8004f50:	2600      	movs	r6, #0
 8004f52:	4d0a      	ldr	r5, [pc, #40]	; (8004f7c <__libc_init_array+0x40>)
 8004f54:	4c0a      	ldr	r4, [pc, #40]	; (8004f80 <__libc_init_array+0x44>)
 8004f56:	1b64      	subs	r4, r4, r5
 8004f58:	10a4      	asrs	r4, r4, #2
 8004f5a:	42a6      	cmp	r6, r4
 8004f5c:	d105      	bne.n	8004f6a <__libc_init_array+0x2e>
 8004f5e:	bd70      	pop	{r4, r5, r6, pc}
 8004f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f64:	4798      	blx	r3
 8004f66:	3601      	adds	r6, #1
 8004f68:	e7ee      	b.n	8004f48 <__libc_init_array+0xc>
 8004f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6e:	4798      	blx	r3
 8004f70:	3601      	adds	r6, #1
 8004f72:	e7f2      	b.n	8004f5a <__libc_init_array+0x1e>
 8004f74:	08005040 	.word	0x08005040
 8004f78:	08005040 	.word	0x08005040
 8004f7c:	08005040 	.word	0x08005040
 8004f80:	08005044 	.word	0x08005044

08004f84 <_init>:
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	bf00      	nop
 8004f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8a:	bc08      	pop	{r3}
 8004f8c:	469e      	mov	lr, r3
 8004f8e:	4770      	bx	lr

08004f90 <_fini>:
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f92:	bf00      	nop
 8004f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f96:	bc08      	pop	{r3}
 8004f98:	469e      	mov	lr, r3
 8004f9a:	4770      	bx	lr
